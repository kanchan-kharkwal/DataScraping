print("# SELECT\n\nSELECT can be used as either a statement or as a clause within other statements:\n\nAs a statement, the SELECT statement is the most commonly executed SQL statement; it queries the database and retrieves a set of rows.\n\nAs a clause, SELECT defines the set of columns returned by a query.\n\n`See also:`\nQuery syntax\n\n## Syntax\n\nThe following sections describe the syntax for this command:\n\nSelecting all columns\n\nSelecting specific columns\n\n### Selecting all columns\n\n```\n[ ... ]\nSELECT [ { ALL | DISTINCT } ]\n       [ TOP <n> ]\n       [{<object_name>|<alias>}.]*\n\n       [ ILIKE '<pattern>' ]\n\n       [ EXCLUDE\n         {\n           <col_name> | ( <col_name>, <col_name>, ... )\n         }\n       ]\n\n       [ REPLACE\n         {\n           ( <expr> AS <col_name> [ , <expr> AS <col_name>, ... ] )\n         }\n       ]\n\n       [ RENAME\n         {\n           <col_name> AS <col_alias>\n           | ( <col_name> AS <col_alias>, <col_name> AS <col_alias>, ... )\n         }\n       ]\n\n```\n\nYou can specify the following combinations of keywords after SELECT *. The keywords must be in the order shown below:\n\n```\nSELECT * ILIKE ... REPLACE ...\n\n```\n\n```\nSELECT * ILIKE ... RENAME ...\n\n```\n\n```\nSELECT * ILIKE ... REPLACE ... RENAME ...\n\n```\n\n```\nSELECT * EXCLUDE ... REPLACE ...\n\n```\n\n```\nSELECT * EXCLUDE ... RENAME ...\n\n```\n\n```\nSELECT * EXCLUDE ... REPLACE ... RENAME ...\n\n```\n\n```\nSELECT * REPLACE ... RENAME ...\n\n```\n\n### Selecting specific columns\n\n```\n[ ... ]\nSELECT [ { ALL | DISTINCT } ]\n       [ TOP <n> ]\n       {\n         [{<object_name>|<alias>}.]<col_name>\n         | [{<object_name>|<alias>}.]$<col_position>\n         | <expr>\n       }\n       [ [ AS ] <col_alias> ]\n       [ , ... ]\n[ ... ]\n\n```\n\nA trailing comma is supported in a column list. For example, the following SELECT statement is supported:\n\n```\nSELECT emp_id,\n       name,\n       dept,\n  FROM employees;\n\n```\n\nFor more information about SELECT as a statement and the other clauses within the statement, see Query syntax .\n\n## Parameters\n\n`ALL | DISTINCT`\nSpecifies whether to perform duplicate elimination on the result set:\n\nALL includes all values in the result set.\n\nDISTINCT eliminates duplicate values from the result set.\n\nDefault: ALL\n\n`TOP n`\nSpecifies the maximum number of results to return. See TOP <n> .\n\n`object_name or . alias`\nSpecifies the object identifier or object alias as defined in the FROM clause.\n\n`*`\nThe asterisk is shorthand to indicate that the output should include all columns of the specified object, or all columns of\nall objects if * is not qualified with an object name or alias. The columns are returned in the order shown by\nexecuting the DESCRIBE command on the object.\n\nWhen you specify * , you can also specify ILIKE , EXCLUDE , REPLACE , and RENAME :\n\n`ILIKE 'pattern'`\nSpecifies that only the columns that match pattern should be included in the results.\n\nIn pattern , you can use the following SQL wildcards:\n\nUse an underscore ( _ ) to match any single character.\n\nUse a percent sign ( % ) to match any sequence of zero or more characters.\n\nTo match a sequence anywhere within the column name, begin and end the pattern with % .\n\nMatching is case-insensitive.\n\nIf no columns match the specified pattern, a compilation error occurs ( 001080 (42601): ... SELECT with no columns ).\n\n`EXCLUDE col_name . EXCLUDE (col_name, col_name, ...)`\nSpecifies the columns that should be excluded from the results.\n\nIf you are selecting from multiple tables, use SELECT table_name .* to specify that you want to select all columns\nfrom a specific table, and specify the unqualified column name in EXCLUDE . For example:\n\n```\nSELECT table_a.* EXCLUDE column_in_table_a ,\n  table_b.* EXCLUDE column_in_table_b\n  ...\n\n```\n\n`REPLACE (expr AS col_name [ , expr AS col_name, ...] )`\nReplaces the value of col_name with the value of the evaluated expression expr .\n\nFor example, to prepend the string 'DEPT-' to the values in the department_id column, use:\n\n```\nSELECT * REPLACE ('DEPT-' || department_id AS department_id) ...\n\n```\n\nFor col_name :\n\nThe column must exist and cannot be filtered out by ILIKE or EXCEPT .\n\nYou cannot specify the same column more than once in the list of replacements.\n\nIf the column is in multiple tables (for example, in both tables in a join), the statement fails with an “ambiguous column”\nerror.\n\nexpr must evaluate to a single value.\n\n`RENAME col_name AS col_alias . RENAME (col_name AS col_alias, col_name AS col_alias, ...)`\nSpecifies the column aliases that should be used in the results.\n\nIf you are selecting from multiple tables, use SELECT table_name .* to specify that you want to select all columns\nfrom a specific table, and specify the unqualified column name in RENAME . For example:\n\n```\nSELECT table_a.* RENAME column_in_table_a AS col_alias_a,\n  table_b.* RENAME column_in_table_b AS col_alias_b\n  ...\n\n```\n\nNote\n\nWhen specifying a combination of keywords after SELECT * :\n\nYou cannot specify both ILIKE and EXCLUDE .\n\nIf you specify EXCLUDE with RENAME or REPLACE :\n\nYou must specify EXCLUDE before RENAME or REPLACE :\n\n```\nSELECT * EXCLUDE col_a RENAME col_b AS alias_b ...\n\n```\n\n```\nSELECT * EXCLUDE employee_id REPLACE ('DEPT-' || department_id AS department_id) ...\n\n```\n\nYou cannot specify the same column in EXCLUDE and RENAME .\n\nIf you specify ILIKE with RENAME or REPLACE , you must specify ILIKE first:\n\n```\nSELECT * ILIKE '%id%' RENAME department_id AS department ...\n\n```\n\n```\nSELECT * ILIKE '%id%' REPLACE ('DEPT-' || department_id AS department_id) ...\n\n```\n\nIf you specify REPLACE and RENAME :\n\nYou must specify REPLACE first:\n\n```\nSELECT * REPLACE ('DEPT-' || department_id AS department_id) RENAME employee_id as employee ...\n\n```\n\nYou can specify the same column name in REPLACE and RENAME :\n\n```\nSELECT * REPLACE ('DEPT-' || department_id AS department_id) RENAME department_id as department ...\n\n```\n\n`col_name`\nSpecifies the column identifier as defined in the FROM clause.\n\n`$col_position`\nSpecifies the position of the column (1-based) as defined in the FROM clause. If a column is\nreferenced from a table, this number can’t exceed the maximum number of columns in the table.\n\n`expr`\nSpecifies an expression, such as a mathematical expression, that evaluates\nto a specific value for any given row.\n\n`[ AS ] col_alias`\nSpecifies the column alias assigned to the resulting expression. This is used as the display name in a top-level SELECT list, and the column name in an inline view.\n\nDo not assign a column alias that is the same as the name of another column referenced in the query.\nFor example, if you are selecting columns named prod_id and product_id , do not alias prod_id as product_id .\nSee Error case: Specifying an alias that matches another column name .\n\n## Usage notes\n\nAliases and identifiers are case-insensitive by default. To preserve case, enclose them within double quotes ( \" ). For more\ninformation, see Object identifiers .\n\nWithout an ORDER BY clause, the results returned by SELECT are an unordered set. Running the same query repeatedly against the\nsame tables might result in a different output order every time. If order matters, use the ORDER BY clause.\n\nSELECT can be used not only as an independent statement, but also as a clause in other statements, for example INSERT INTO ... SELECT ...; . SELECT can also be used in a subquery within a statement.\n\nIn many cases, when you use a column alias for an expression (i.e. expr AS col_alias ) in other parts of the same\nquery (in JOIN, FROM, WHERE, GROUP BY, other column expressions, etc.), the expression is evaluated only once.\n\nHowever, note that in some cases, the expression can be evaluated multiple times, which can result in different values for the\nalias used in different parts of the same query.\n\n## Examples\n\nA few simple examples are provided below.\n\nSetting up the data for the examples\n\nExamples of selecting all columns (SELECT *)\n\nExamples of selecting specific columns (SELECT colname)\n\nMany additional examples are included in other parts of the documentation, including the detailed descriptions of Query syntax .\n\nFor examples related to querying an event table (whose schema is predefined by Snowflake), refer to Viewing log messages and Viewing trace data .\n\n### Setting up the data for the examples\n\nSome of the queries below use the following tables and data:\n\n```\nCREATE TABLE employee_table (\n    employee_ID INTEGER,\n    last_name VARCHAR,\n    first_name VARCHAR,\n    department_ID INTEGER\n    );\n\nCREATE TABLE department_table (\n    department_ID INTEGER,\n    department_name VARCHAR\n    );\n\n```\n\n```\nINSERT INTO employee_table (employee_ID, last_name, first_name, department_ID) VALUES\n    (101, 'Montgomery', 'Pat', 1),\n    (102, 'Levine', 'Terry', 2),\n    (103, 'Comstock', 'Dana', 2);\n\nINSERT INTO department_table (department_ID, department_name) VALUES\n    (1, 'Engineering'),\n    (2, 'Customer Support'),\n    (3, 'Finance');\n\n```\n\n### Examples of selecting all columns (SELECT *)\n\nSelecting all columns in the table\n\nSelecting all columns with names that match a pattern\n\nSelecting all columns except one column\n\nSelecting all columns except two or more columns\n\nSelecting all columns and renaming one column\n\nSelecting all columns and renaming multiple columns\n\nSelecting all columns with names that match a pattern and renaming a column\n\nSelecting all columns, excluding a column, and renaming multiple columns\n\nSelecting all columns and replacing the value of a column\n\nSelecting all columns, replacing the value of a column, and renaming the column\n\nSelecting all columns with names that match a pattern and replacing the value in a column\n\nSelecting all columns from multiple tables, excluding a column, and renaming a column\n\n#### Selecting all columns in the table\n\nThis example shows how to select all columns in employee_table :\n\n```\nSELECT * FROM employee_table;\n\n```\n\n```\n+-------------+------------+------------+---------------+\n| EMPLOYEE_ID | LAST_NAME  | FIRST_NAME | DEPARTMENT_ID |\n|-------------+------------+------------+---------------|\n|         101 | Montgomery | Pat        |             1 |\n|         102 | Levine     | Terry      |             2 |\n|         103 | Comstock   | Dana       |             2 |\n+-------------+------------+------------+---------------+\n\n```\n\n#### Selecting all columns with names that match a pattern\n\nThis example shows how to select all columns in employee_table with names that contain id :\n\n```\nSELECT * ILIKE '%id%' FROM employee_table;\n\n```\n\n```\n+-------------+---------------+\n| EMPLOYEE_ID | DEPARTMENT_ID |\n|-------------+---------------|\n|         101 |             1 |\n|         102 |             2 |\n|         103 |             2 |\n+-------------+---------------+\n\n```\n\n#### Selecting all columns except one column\n\nThis example shows how to select all columns in employee_table except for the department_id column:\n\n```\nSELECT * EXCLUDE department_id FROM employee_table;\n\n```\n\n```\n+-------------+------------+------------+\n| EMPLOYEE_ID | LAST_NAME  | FIRST_NAME |\n|-------------+------------+------------|\n|         101 | Montgomery | Pat        |\n|         102 | Levine     | Terry      |\n|         103 | Comstock   | Dana       |\n+-------------+------------+------------+\n\n```\n\n#### Selecting all columns except two or more columns\n\nThis example shows how to select all columns in employee_table except for the department_id and employee_id columns:\n\n```\nSELECT * EXCLUDE (department_id, employee_id) FROM employee_table;\n\n```\n\n```\n+------------+------------+\n| LAST_NAME  | FIRST_NAME |\n|------------+------------|\n| Montgomery | Pat        |\n| Levine     | Terry      |\n| Comstock   | Dana       |\n+------------+------------+\n\n```\n\n#### Selecting all columns and renaming one column\n\nThis example shows how to select all columns in employee_table and rename the department_id column:\n\n```\nSELECT * RENAME department_id AS department FROM employee_table;\n\n```\n\n```\n+-------------+------------+------------+------------+\n| EMPLOYEE_ID | LAST_NAME  | FIRST_NAME | DEPARTMENT |\n|-------------+------------+------------+------------|\n|         101 | Montgomery | Pat        |          1 |\n|         102 | Levine     | Terry      |          2 |\n|         103 | Comstock   | Dana       |          2 |\n+-------------+------------+------------+------------+\n\n```\n\n#### Selecting all columns and renaming multiple columns\n\nThis example shows how to select all columns in employee_table and rename the department_id and employee_id columns:\n\n```\nSELECT * RENAME (department_id AS department, employee_id AS id) FROM employee_table;\n\n```\n\n```\n+-----+------------+------------+------------+\n|  ID | LAST_NAME  | FIRST_NAME | DEPARTMENT |\n|-----+------------+------------+------------|\n| 101 | Montgomery | Pat        |          1 |\n| 102 | Levine     | Terry      |          2 |\n| 103 | Comstock   | Dana       |          2 |\n+-----+------------+------------+------------+\n\n```\n\n#### Selecting all columns, excluding a column, and renaming multiple columns\n\nThis example shows how to select all columns in employee_table , exclude the first_name column,  and rename the department_id and employee_id columns:\n\n```\nSELECT * EXCLUDE first_name RENAME (department_id AS department, employee_id AS id) FROM employee_table;\n\n```\n\n```\n+-----+------------+------------+\n|  ID | LAST_NAME  | DEPARTMENT |\n|-----+------------+------------|\n| 101 | Montgomery |          1 |\n| 102 | Levine     |          2 |\n| 103 | Comstock   |          2 |\n+-----+------------+------------+\n\n```\n\n#### Selecting all columns with names that match a pattern and renaming a column\n\nThis example shows how to select all columns in employee_table with names that contain id and rename the department_id column:\n\n```\nSELECT * ILIKE '%id%' RENAME department_id AS department FROM employee_table;\n\n```\n\n```\n+-------------+------------+\n| EMPLOYEE_ID | DEPARTMENT |\n|-------------+------------|\n|         101 |          1 |\n|         102 |          2 |\n|         103 |          2 |\n+-------------+------------+\n\n```\n\n#### Selecting all columns and replacing the value of a column\n\nThis example shows how to select all columns in employee_table and replace the value in the department_id column with\nthe ID prepended with DEPT- :\n\n```\nSELECT * REPLACE ('DEPT-' || department_id AS department_id) FROM employee_table;\n\n```\n\n```\n+-------------+------------+------------+---------------+\n| EMPLOYEE_ID | LAST_NAME  | FIRST_NAME | DEPARTMENT_ID |\n|-------------+------------+------------+---------------|\n|         101 | Montgomery | Pat        | DEPT-1        |\n|         102 | Levine     | Terry      | DEPT-2        |\n|         103 | Comstock   | Dana       | DEPT-2        |\n+-------------+------------+------------+---------------+\n\n```\n\n#### Selecting all columns, replacing the value of a column, and renaming the column\n\nThis example shows how to select all columns in employee_table , replace the value in the department_id column with\nthe ID prepended with DEPT- , and rename the column:\n\n```\nSELECT * REPLACE ('DEPT-' || department_id AS department_id) RENAME department_id AS department FROM employee_table;\n\n```\n\n```\n+-------------+------------+------------+------------+\n| EMPLOYEE_ID | LAST_NAME  | FIRST_NAME | DEPARTMENT |\n|-------------+------------+------------+------------|\n|         101 | Montgomery | Pat        | DEPT-1     |\n|         102 | Levine     | Terry      | DEPT-2     |\n|         103 | Comstock   | Dana       | DEPT-2     |\n+-------------+------------+------------+------------+\n\n```\n\n#### Selecting all columns with names that match a pattern and replacing the value in a column\n\nThis example shows how to select all columns in employee_table with names that contain id and prepending DEPT- to the\nvalues in the department_id column:\n\n```\nSELECT * ILIKE '%id%' REPLACE('DEPT-' || department_id AS department_id) FROM employee_table;\n\n```\n\n```\n+-------------+---------------+\n| EMPLOYEE_ID | DEPARTMENT_ID |\n|-------------+---------------|\n|         101 | DEPT-1        |\n|         102 | DEPT-2        |\n|         103 | DEPT-2        |\n+-------------+---------------+\n\n```\n\n#### Selecting all columns from multiple tables, excluding a column, and renaming a column\n\nThis example joins two tables and selects all columns from both tables except one column from employee_table . The example also\nrenames one of the columns selected from department_table .\n\n```\nSELECT\n  employee_table.* EXCLUDE department_id,\n  department_table.* RENAME department_name AS department\nFROM employee_table INNER JOIN department_table\n  ON employee_table.department_id = department_table.department_id\nORDER BY department, last_name, first_name;\n\n```\n\n```\n+-------------+------------+------------+---------------+------------------+\n| EMPLOYEE_ID | LAST_NAME  | FIRST_NAME | DEPARTMENT_ID | DEPARTMENT       |\n|-------------+------------+------------+---------------+------------------|\n|         103 | Comstock   | Dana       |             2 | Customer Support |\n|         102 | Levine     | Terry      |             2 | Customer Support |\n|         101 | Montgomery | Pat        |             1 | Engineering      |\n+-------------+------------+------------+---------------+------------------+\n\n```\n\n### Examples of selecting specific columns (SELECT colname)\n\nSelecting a single column by name\n\nSelecting multiple columns by name from joined tables\n\nSelecting a column by position\n\nSpecifying an alias for a column in the output\n\nError case: Specifying an alias that matches another column name\n\n#### Selecting a single column by name\n\nThis example shows how to look up an employee’s last name if you know their ID.\n\n```\nSELECT last_name FROM employee_table WHERE employee_ID = 101;\n+------------+\n| LAST_NAME  |\n|------------|\n| Montgomery |\n+------------+\n\n```\n\n#### Selecting multiple columns by name from joined tables\n\nThis example lists each employee and the name of the department that each employee works in. The output is in order by department\nname, and within each department the employees are in order by name. This query uses a join to relate the information in one table\nto the information in another table.\n\n```\nSELECT department_name, last_name, first_name\n    FROM employee_table INNER JOIN department_table\n        ON employee_table.department_ID = department_table.department_ID\n    ORDER BY department_name, last_name, first_name;\n+------------------+------------+------------+\n| DEPARTMENT_NAME  | LAST_NAME  | FIRST_NAME |\n|------------------+------------+------------|\n| Customer Support | Comstock   | Dana       |\n| Customer Support | Levine     | Terry      |\n| Engineering      | Montgomery | Pat        |\n+------------------+------------+------------+\n\n```\n\n#### Selecting a column by position\n\nThis example shows how to use $ to specify a column by column number, rather than by column name:\n\n```\nSELECT $2 FROM employee_table ORDER BY $2;\n+------------+\n| $2         |\n|------------|\n| Comstock   |\n| Levine     |\n| Montgomery |\n+------------+\n\n```\n\n#### Specifying an alias for a column in the output\n\nThis example shows that the output columns do not need to be taken directly from the tables in the FROM clause; the output columns\ncan be general expressions. This example calculates the area of a circle that has a radius of 2.0. This example also shows how to use\na column alias so that the output has a meaningful column name:\n\n```\nSELECT pi() * 2.0 * 2.0 AS area_of_circle;\n+----------------+\n| AREA_OF_CIRCLE |\n|----------------|\n|   12.566370614 |\n+----------------+\n\n```\n\n#### Error case: Specifying an alias that matches another column name\n\nThis example demonstrates why it is not recommended to use a column alias that matches\nthe name of another column that is used in the query. This GROUP BY query results in a\nSQL compiler error, not an ambiguous column error.\nThe alias prod_id that is assigned to product_id in table1 matches the name\nof the prod_id column in table2 . The simplest solution to this error is to give\nthe column a different alias.\n\n```\nCREATE OR REPLACE TABLE table1 (product_id NUMBER);\n\nCREATE OR REPLACE TABLE table2 (prod_id NUMBER);\n\nSELECT t1.product_id AS prod_id, t2.prod_id\n  FROM table1 AS t1 JOIN table2 AS t2\n    ON t1.product_id=t2.prod_id\n  GROUP BY prod_id, t2.prod_id;\n\n```\n\n```\n001104 (42601): SQL compilation error: error line 1 at position 7\n'T1.PRODUCT_ID' in select clause is neither an aggregate nor in the group by clause.\n\n```")