[
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-aggregation-policies",
    "title": "SHOW AGGREGATION POLICIES",
    "description": "Lists information about existing aggregation policies, including the creation date, database and\nschema names, owner, and any available comments.",
    "syntax": "SHOW AGGREGATION POLICIES  [ LIKE '<pattern>' ]\n                           [ IN\n                               {\n                                 ACCOUNT                  |\n\n                                 DATABASE [ <database_name> ] |\n\n                                 SCHEMA [ <schema_name> ]     |\n                               }\n                           ]",
    "examples": [
        {
            "code": "SHOW AGGREGATION POLICIES  [ LIKE '<pattern>' ]\n                           [ IN\n                               {\n                                 ACCOUNT                  |\n\n                                 DATABASE [ <database_name> ] |\n\n                                 SCHEMA [ <schema_name> ]     |\n                               }\n                           ]"
        },
        {
            "code": "SHOW AGGREGATION POLICIES;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-network-policies",
    "title": "SHOW NETWORK POLICIES",
    "description": "Lists all network policies defined in the system.",
    "syntax": "SHOW NETWORK POLICIES",
    "examples": [
        {
            "code": "SHOW NETWORK POLICIES;"
        },
        {
            "code": "+-------------------------------+----------+---------+----------------------------+----------------------------+---------------------------------------------------------------------+\n| created_on                    | name     | comment | entries_in_allowed_ip_list | entries_in_blocked_ip_list | entries_in_allowed_network_rules | entries_in_blocked_network_rules |\n|-------------------------------+----------+---------+----------------------------+----------------------------+----------------------------------+----------------------------------|\n| 2016-04-29 13:22:34.034 -0700 | Policy1  |         |                          2 |                          1 |                                 0|                                0 |\n| 2016-04-28 17:31:59.269 -0700 | Policy2  |         |                          1 |                          0 |                                 0|                                0 |\n+-------------------------------+----------+---------+----------------------------+----------------------------+----------------------------------+----------------------------------+"
        }
    ],
    "usage_notes": "Only the network policy owner (that is, role with the OWNERSHIP privilege on the network policy) or higher can execute this command.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-session-policies",
    "title": "SHOW SESSION POLICIES",
    "description": "Lists session policy information, including the creation date, database and schema names, owner, and any available comments.",
    "syntax": "SHOW SESSION POLICIES\n  [ LIKE '<pattern>' ]\n  [ IN\n       {\n         ACCOUNT                                         |\n\n         DATABASE                                        |\n         DATABASE <database_name>                        |\n\n         SCHEMA                                          |\n         SCHEMA <schema_name>                            |\n\n         APPLICATION <application_name>                  |\n         APPLICATION PACKAGE <application_package_name>  |\n       }\n    |\n    ON\n       {\n         ACCOUNT           |\n         USER <user_name>  |\n       }\n  ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> ]",
    "examples": [
        {
            "code": "SHOW SESSION POLICIES\n  [ LIKE '<pattern>' ]\n  [ IN\n       {\n         ACCOUNT                                         |\n\n         DATABASE                                        |\n         DATABASE <database_name>                        |\n\n         SCHEMA                                          |\n         SCHEMA <schema_name>                            |\n\n         APPLICATION <application_name>                  |\n         APPLICATION PACKAGE <application_package_name>  |\n       }\n    |\n    ON\n       {\n         ACCOUNT           |\n         USER <user_name>  |\n       }\n  ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> ]"
        },
        {
            "code": "SHOW SESSION POLICIES;"
        },
        {
            "code": "----------------------------------+-----------------------+---------------+-------------+----------------+--------------+--------------------------------------------------+---------+\n         created_on               | name                  | database_name | schema_name |      kind      |  owner       |   comment                                        | options |\n----------------------------------+-----------------------+---------------+-------------+----------------+--------------+--------------------------------------------------+---------+\n  Mon, 11 Jan 2021 00:00:00 -0700 | session_policy_prod_1 | MY_DB         | MY_SCHEMA   | SESSION_POLICY | POLICY_ADMIN | session policy for use in the prod_1 environment | \"\"      |\n----------------------------------+-----------------------+---------------+-------------+----------------+--------------+--------------------------------------------------+---------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        },
        {
            "name": "[   ON   ...   ]",
            "description": "Lists the policies that are effective on the specified object. This command considers precedence.\nFor example, listing policies on a user will show the account or built-in policy that is effective\nfor the user if there is no policy set specifically on the user. Specify one of the following: Returns policies effective on the account. Returns policies effective on the specified user."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns policies effective on the account."
        },
        {
            "name": "USER   user_name",
            "description": "Returns policies effective on the specified user."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned. The actual number of rows returned might be less than the specified limit. For\nexample, the number of existing objects is less than the specified limit. Default: No value (no limit is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-roles",
    "title": "SHOW ROLES",
    "description": "Lists all the roles which you can view across your entire account, including the system-defined roles and any custom roles that exist.",
    "syntax": "SHOW [ TERSE ] ROLES\n  [ LIKE '<pattern>' ]\n  [ IN CLASS <class_name> ]\n  [ STARTS WITH '<name_string>']\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW ROLES;"
        },
        {
            "code": "---------------------------------+---------------+------------+------------+--------------+-------------------+------------------+---------------+---------------+--------------------------+\n           created_on            |     name      | is_default | is_current | is_inherited | assigned_to_users | granted_to_roles | granted_roles |     owner     |         comment          |\n---------------------------------+---------------+------------+------------+--------------+-------------------+------------------+---------------+---------------+--------------------------+\n Fri, 05 Dec 2014 16:25:06 -0800 | ACCOUNTADMIN  | Y          | Y          | N            | 1                 | 0                | 2             |               |                          |\n Mon, 15 Dec 2014 17:58:33 -0800 | ANALYST       | N          | N          | N            | 0                 | 6                | 0             | SECURITYADMIN | Data analyst             |\n Fri, 05 Dec 2014 16:25:06 -0800 | PUBLIC        | N          | N          | Y            | 0                 | 0                | 0             |               |                          |\n Fri, 05 Dec 2014 16:25:06 -0800 | SECURITYADMIN | N          | N          | Y            | 0                 | 1                | 0             |               |                          |\n Fri, 05 Dec 2014 16:25:06 -0800 | SYSADMIN      | N          | N          | Y            | 5                 | 1                | 2             |               |                          |\n---------------------------------+---------------+------------+------------+--------------+-------------------+------------------+---------------+---------------+--------------------------+"
        },
        {
            "code": "SHOW ROLES LIMIT 10 FROM 'my_role2';"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of columns: Specifies whether the role used to run the command is the user’s default role. Specifies whether the role used to run the command is the user’s current role. Specifies whether the role used to run the command inherits the specified role."
        },
        {
            "name": "is_default",
            "description": "Specifies whether the role used to run the command is the user’s default role."
        },
        {
            "name": "is_current",
            "description": "Specifies whether the role used to run the command is the user’s current role."
        },
        {
            "name": "is_inherited",
            "description": "Specifies whether the role used to run the command inherits the specified role."
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   CLASS   class_name",
            "description": "Returns records for the specified class ( class_name )."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "If you specify CLASS, only the following columns are returned:\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-external-tables",
    "title": "SHOW EXTERNAL TABLES",
    "description": "Lists the external tables for which you have access privileges. The command can be used to list external tables for the current/specified\ndatabase or schema, or across your entire account.",
    "syntax": "SHOW [ TERSE ] EXTERNAL TABLES [ LIKE '<pattern>' ]\n                               [ IN\n                                        {\n                                          ACCOUNT                                         |\n\n                                          DATABASE                                        |\n                                          DATABASE <database_name>                        |\n\n                                          SCHEMA                                          |\n                                          SCHEMA <schema_name>                            |\n                                          <schema_name>\n\n                                          APPLICATION <application_name>                  |\n                                          APPLICATION PACKAGE <application_package_name>  |\n                                        }\n                               ]\n                               [ STARTS WITH '<name_string>' ]\n                               [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW EXTERNAL TABLES LIKE 'line%' IN tpch.public;"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of the output columns: created_on name kind database_name schema_name"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "This command doesn’t list external tables that have been dropped.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-integrations",
    "title": "SHOW INTEGRATIONS",
    "description": "Lists the integrations in your account.",
    "syntax": "SHOW [ { API | CATALOG | EXTERNAL ACCESS | NOTIFICATION | SECURITY | STORAGE } ] INTEGRATIONS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW NOTIFICATION INTEGRATIONS;"
        },
        {
            "code": "SHOW INTEGRATIONS LIKE 'line%';"
        }
    ],
    "parameters": [
        {
            "name": "{   API   |   CATALOG   |   EXTERNAL   ACCESS   |   NOTIFICATION   |   SECURITY   |   STORAGE   }",
            "description": "Returns integrations of the specified type only. For more information about some of these types, see the following topics: SHOW CATALOG INTEGRATIONS SHOW NOTIFICATION INTEGRATIONS"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "Currently, only the API | CATALOG | EXTERNAL ACCESS | NOTIFICATION | SECURITY | STORAGE parameter is supported.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/classes/classification_profile/commands/show-classification-profile",
    "title": "SHOW CLASSIFICATION_PROFILE",
    "description": "Fully qualified name: SNOWFLAKE.DATA_PRIVACY.CLASSIFICATION_PROFILE",
    "syntax": "SHOW SNOWFLAKE.DATA_PRIVACY.CLASSIFICATION_PROFILE\n  [ LIKE <pattern> ]\n  [ IN\n    {\n      ACCOUNT                  |\n\n      DATABASE                 |\n      DATABASE <database_name> |\n\n      SCHEMA                   |\n      SCHEMA <schema_name>     |\n      <schema_name>\n    }\n  ]",
    "examples": [
        {
            "code": "SHOW SNOWFLAKE.DATA_PRIVACY.CLASSIFICATION_PROFILE;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-user-programmatic-access-tokens",
    "title": "SHOW USER PROGRAMMATIC ACCESS TOKENS",
    "description": "Lists the programmatic access tokens associated with a user.",
    "syntax": "SHOW USER { PROGRAMMATIC ACCESS TOKENS | PATS } [ FOR USER <username> ]",
    "examples": [
        {
            "code": "SHOW USER PROGRAMMATIC ACCESS TOKENS FOR USER example_user;"
        }
    ],
    "parameters": [
        {
            "name": "FOR   USER   username",
            "description": "Lists the programmatic access tokens for the specified user. Default: Lists the programmatic access tokens for the current user."
        }
    ],
    "usage_notes": "The command lists all programmatic access tokens for a given user, not all programmatic access tokens for an account.\nThe programmatic access token secret is never returned after creation.\nAfter seven days, expired programmatic access tokens are deleted and no longer appear in the output of the command."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-model",
    "title": "SHOW VERSIONS IN MODEL",
    "description": "Lists the versions in a machine learning model. Models may have multiple versions, one of which must be designated as\nthe default (see ALTER MODEL).",
    "syntax": "SHOW VERSIONS [ LIKE '<pattern>' ] IN MODEL <model_name>",
    "examples": [
        {
            "code": "SHOW VERSIONS [ LIKE '<pattern>' ] IN MODEL <model_name>"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   MODEL   model_name",
            "description": "Specifies the identifier of the model that contains the versions to be listed. If the identifier contains spaces,\nspecial characters, or mixed-case characters, the entire identifier must be enclosed in double quotes. Identifiers\nenclosed in double quotes are also case-sensitive (e.g. \"My Object\" ). If the model identifier is not fully-qualified (in the form of db_name . schema_name . model_name or schema_name . model_name ), the command looks for the model in the current schema for the session."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-listing",
    "title": "SHOW VERSIONS IN LISTING",
    "description": "Lists and provides details of all listing versions.",
    "syntax": "SHOW VERSIONS IN LISTING <name>\n  [ LIMIT <rows> ]",
    "examples": [
        {
            "code": "SHOW VERSIONS IN LISTING MYLISTING"
        },
        {
            "code": "+-----------------------------------+------------------------------+------------------------------+-----------------------------------------------+--------------------+--------------------+--------------------+--------------------+---------------------------------------------+---------------------------------------+---------------------------------------+\n|             created_on            |             name             |             alias            |                  location_uri                 |     is_default     |       is_live      |      is_first      |       is_last      |                   comment                   |          source_location_uri          |             git_commit_hash           |\n+-----------------------------------+------------------------------+------------------------------+-----------------------------------------------+--------------------+--------------------+--------------------+--------------------+---------------------------------------------+---------------------------------------+---------------------------------------+\n|   2025-01-08 11:18:39.921 -0800   |                              |                              |  snow://listing/MYLISTING/versions/live/      |        FALSE       |        TRUE        |        FALSE       |       FALSE        |                                             |            @listingstage              |                                       |\n|   2025-01-08 11:18:24.550 -0800   |        VERSION$2             |                              |  snow://listing/MYLISTING/versions/version$2/ |        TRUE        |        FALSE       |        FALSE       |       TRUE         |                                             |            @listingstage              |                                       |\n|   2025-01-08 11:17:32.894 -0800   |        VERSION$1             |                              |  snow://listing/MYLISTING/versions/version$1/ |        FALSE       |        FALSE       |        TRUE        |       FALSE        |                                             |            @listingstage              |                                       |\n+-----------------------------------+------------------------------+------------------------------+-----------------------------------------------+--------------------+--------------------+--------------------+--------------------+---------------------------------------------+---------------------------------------+---------------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "name",
            "description": "Specifies the listing identifier (name). If the identifier contains spaces or special characters, the entire string must be enclosed in double quotes. Identifiers enclosed in double quotes are also case sensitive. For more information, see Identifier Requirements ."
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit."
        }
    ],
    "usage_notes": "The value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-accounts",
    "title": "SHOW ACCOUNTS",
    "description": "Lists all the accounts in your organization, excluding managed accounts.",
    "syntax": "SHOW ACCOUNTS [ HISTORY ] [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW ACCOUNTS LIKE 'myaccount%';"
        }
    ],
    "parameters": [
        {
            "name": "HISTORY",
            "description": "Optionally includes dropped accounts that have not yet been deleted. The output of SHOW ACCOUNTS HISTORY includes additional\ncolumns related to dropped accounts. Default: No value (dropped accounts are not included in the output)"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "Organization administrators and any role with the CREATE ORGANIZATION LISTING\nprivilege or the CREATE LISTING privilege can execute this SQL command.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-specifications",
    "title": "SHOW SPECIFICATIONS",
    "description": "Lists the app specifications that have been defined for an app.",
    "syntax": "SHOW [ { APPROVED | DECLINED | PENDING } ] SPECIFICATIONS [ IN APPLICATION <app_name> ];",
    "examples": [
        {
            "code": "SHOW SPECIFICATIONS;"
        }
    ],
    "parameters": [
        {
            "name": "APPROVED   |   DECLINED   |   PENDING",
            "description": "Narrows the output to app specifications with one of these statuses."
        },
        {
            "name": "IN   APPLICATION   app_name",
            "description": "Specifies the name of the app whose app specification you want to view."
        }
    ],
    "usage_notes": "Consumers must provide the name of an app using the IN APPLICATION clause.\nAn app can run this command without specifying the\nIN APPLICATION clause."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-applications",
    "title": "SHOW APPLICATIONS",
    "description": "Lists the application objects for which you have access privileges across your entire account in the Snowflake Native App Framework.",
    "syntax": "SHOW APPLICATIONS [ LIKE '<pattern>' ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ];",
    "examples": [
        {
            "code": "SHOW APPLICATIONS;"
        },
        {
            "code": "+-------------------------------+------------------------+------------+------------+---------------------+----------------------------+---------------+---------+---------------------+-----------------+-------+---------+----------------+\n| created_on                    | name                   | is_default | is_current | source_type         | source                     | owner         | comment | version             | label           | patch | options | retention_time |\n|-------------------------------+------------------------+------------+------------+---------------------+----------------------------+---------------+---------+---------------------+-----------------+-------+---------+----------------|\n| 2023-02-03 10:14:09.828 -0800 | hello_snowflake_app    | N          | Y          | APPLICATION PACKAGE | hello_snowflake_package    | PROVIDER_ROLE |         | v1                  | Version v1      |     0 |         | 1              |\n| 2023-03-22 16:12:40.373 -0700 | PRODUCTION_APP         | Y          | Y          | APPLICATION PACKAGE | hello_snowflake_package    | PROVIDER_ROLE |         | v2                  | Version v2      |     0 |         | 1              |\n+-------------------------------+------------------------+------------+------------+---------------------+----------------------------+---------------+---------+---------------------+-----------------+-------+---------+----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/desc",
    "title": "DESCRIBE",
    "description": "Describes the details for the specified object."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-model-monitors",
    "title": "SHOW MODEL MONITORS",
    "description": "Lists all model monitor that you can access in\nthe current or specified schema and displays information about each one.",
    "syntax": "SHOW MODEL MONITORS\n[ LIKE <pattern> ]\n[ IN\n    {\n      ACCOUNT                  |\n\n      DATABASE                 |\n      DATABASE <database_name> |\n\n      SCHEMA                   |\n      SCHEMA <schema_name>     |\n      <schema_name>\n    }\n ]",
    "examples": [
        {
            "code": "SHOW MODEL MONITORS\n[ LIKE <pattern> ]\n[ IN\n    {\n      ACCOUNT                  |\n\n      DATABASE                 |\n      DATABASE <database_name> |\n\n      SCHEMA                   |\n      SCHEMA <schema_name>     |\n      <schema_name>\n    }\n ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-failover-groups",
    "title": "SHOW FAILOVER GROUPS",
    "description": "Lists the primary and secondary failover groups in your account,\nas well as the failover groups in other accounts that are associated with your account.",
    "syntax": "SHOW FAILOVER GROUPS [ IN ACCOUNT <account> ]",
    "examples": [
        {
            "code": "SHOW FAILOVER GROUPS IN ACCOUNT myaccount1;\n\n+------------------+-------------------------------+--------------+------+----------+---------+------------+-----------------------+---------------------------------------------+---------------------------+----------------------------------------------+-------------------+-------------------+----------------------+-----------------+-------------------------------+------------+-----------------------------------+\n| snowflake_region | created_on                    | account_name | name | type     | comment | is_primary | primary               | object_types                                | allowed_integration_types |  allowed_accounts                            | organization_name | account_locator   | replication_schedule | secondary_state | next_scheduled_refresh        | owner      | is_listing_auto_fulfillment_group |\n+------------------+-------------------------------+--------------+------+----------+---------+------------+-----------------------+---------------------------------------------+---------------------------+----------------------------------------------+-------------------+-------------------+----------------------+-----------------+-------------------------------+------------+-----------------------------------+\n| AWS_US_EAST_1    | 2021-10-25 19:08:15.209 -0700 | MYACCOUNT1   | MYFG | FAILOVER |         | true       | MYORG.MYACCOUNT1.MYFG | DATABASES, ROLES, USERS, WAREHOUSES, SHARES |                           | MYORG.MYACCOUNT1.MYFG,MYORG.MYACCOUNT2.MYFG  | MYORG             | MYACCOUNT1LOCATOR | 10 MINUTE            | NULL            |                               | MYROLE     | false                             |\n+------------------+-------------------------------+--------------+------+----------+---------+------------+-----------------------+---------------------------------------------+---------------------------+----------------------------------------------+-------------------+-------------------+----------------------+-----------------+-------------------------------+------------+-----------------------------------+\n| AWS_US_WEST_2    | 2021-10-25 19:08:15.209 -0700 | MYACCOUNT2   | MYFG | FAILOVER |         | false      | MYORG.MYACCOUNT1.MYFG |                                             |                           |                                              | MYORG             | MYACCOUNT2LOCATOR | 10 MINUTE            | STARTED         | 2022-03-06 12:10:35.280 -0800 | NULL       | false                             |\n+------------------+-------------------------------+--------------+------+----------+---------+------------+-----------------------+---------------------------------------------+---------------------------+----------------------------------------------+-------------------+-------------------+----------------------+-----------------+-------------------------------+------------+-----------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "account",
            "description": "Specifies the identifier for the account. Account name is a unique identifier within your organization. For more details about account\nname, see Format 1 (preferred): Account name in your organization ."
        }
    ],
    "usage_notes": "Executing this command requires a role with any one of the following privileges on a failover group:\nFAILOVER\nMONITOR\nOWNERSHIP\nREPLICATE\nThe output of SHOW FAILOVER GROUPS only includes groups of type FAILOVER.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-schemas",
    "title": "SHOW SCHEMAS",
    "description": "Lists the schemas for which you have access privileges, including dropped schemas that are still within the Time Travel retention period\nand, therefore, can be undropped. The command can be used to list schemas for the current/specified database, or across your entire\naccount.",
    "syntax": "SHOW [ TERSE ] SCHEMAS\n  [ HISTORY ]\n  [ LIKE '<pattern>' ]\n  [ IN { ACCOUNT | DATABASE [ <db_name> ] | APPLICATION <application_name> | APPLICATION PACKAGE <application_package_name> } ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]\n  [ WITH PRIVILEGES <object_privilege> [ , <object_privilege> [ , ... ] ] ]",
    "examples": [
        {
            "code": "SHOW SCHEMAS;"
        },
        {
            "code": "+---------------------------------+--------------------+------------+------------+---------------+--------+-----------------------------------------------------------+---------+----------------+-----------------+-------------------+\n| created_on                      | name               | is_default | is_current | database_name | owner  | comment                                                   | options | retention_time | owner_role_type | OBJECT_VISIBILITY |\n|---------------------------------+--------------------+------------+------------+---------------+--------+-----------------------------------------------------------+---------+----------------+-----------------+-------------------+\n| Fri, 13 May 2016 17:58:37 -0700 | INFORMATION_SCHEMA | N          | N          | MYTESTDB      |        | Views describing the contents of schemas in this database |         |              1 | ROLE            | NULL              |\n| Wed, 25 Feb 2015 16:16:54 -0800 | PUBLIC             | N          | Y          | MYTESTDB      | PUBLIC |                                                           |         |              1 | ROLE            | NULL              |\n+---------------------------------+--------------------+------------+------------+---------------+--------+-----------------------------------------------------------+---------+----------------+-----------------+-------------------+"
        },
        {
            "code": "SHOW SCHEMAS HISTORY;"
        },
        {
            "code": "+---------------------------------+--------------------+------------+------------+---------------+--------+-----------------------------------------------------------+---------+----------------+---------------------------------+-----------------+-------------------+\n| created_on                      | name               | is_default | is_current | database_name | owner  | comment                                                   | options | retention_time | dropped_on                      | owner_role_type | OBJECT_VISIBILITY |\n|---------------------------------+--------------------+------------+------------+---------------+--------+-----------------------------------------------------------+---------+----------------+---------------------------------+-----------------+-------------------+\n| Fri, 13 May 2016 17:59:50 -0700 | INFORMATION_SCHEMA | N          | N          | MYTESTDB      |        | Views describing the contents of schemas in this database |         |              1 | NULL                            |                 | NULL              |\n| Wed, 25 Feb 2015 16:16:54 -0800 | PUBLIC             | N          | Y          | MYTESTDB      | PUBLIC |                                                           |         |              1 | NULL                            | ROLE            | NULL              |\n| Tue, 17 Mar 2015 16:42:29 -0700 | MYSCHEMA           | N          | N          | MYTESTDB      | PUBLIC |                                                           |         |              1 | Fri, 13 May 2016 17:25:32 -0700 | ROLE            | NULL              |\n+---------------------------------+--------------------+------------+------------+---------------+--------+-----------------------------------------------------------+---------+----------------+---------------------------------+-----------------+-------------------+"
        },
        {
            "code": "SHOW SCHEMAS WITH PRIVILEGES USAGE;"
        },
        {
            "code": "+-------------------------------+----------------+------------+------------+-----------------------------------------------------------+--------------+---------+---------+----------------+-----------------+-------------------+\n| created_on                    | name           | is_default | is_current | database_name                                             | owner        | comment | options | retention_time | owner_role_type | OBJECT_VISIBILITY |\n|-------------------------------+----------------+------------+------------+-----------------------------------------------------------+--------------+---------+---------+----------------+-----------------+-------------------+\n| 2023-01-27 15:01:12.940 -0800 | PUBLIC         | N          | N          | BOOKS_DB                                                  | DATA_ADMIN   |         |         | 1              | ROLE            | NULL              |\n| 2023-09-15 15:22:51.164 -0700 | PUBLIC         | N          | N          | TEST_DB                                                   | ACCOUNTADMIN |         |         | 4              | ROLE            | NULL              |\n| 2023-01-13 10:58:49.584 -0800 | ACCOUNT_USAGE  | N          | N          | SNOWFLAKE                                                 |              |         |         | 1              |                 | NULL              |\n+-------------------------------+----------------+------------+------------+-----------------------------------------------------------+--------------+---------+---------+----------------+-----------------+-------------------+"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns output containing only the following columns: created_on name kind database_name schema_name Note that kind and schema_name always display NULL because kind is not applicable for schemas and schema_name is redundant with name . Default: No value (all columns are included in the output)"
        },
        {
            "name": "HISTORY",
            "description": "Includes dropped schemas that have not yet been purged (i.e. they are still within their respective Time Travel retention periods).\nIf multiple versions of a dropped schema exist, the output displays a row for each version. The output also includes an additional dropped_on column, which displays: Date and timestamp (for dropped schemas) NULL (for active schemas). Default: No value (dropped schemas are not included in the output)"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   {   ACCOUNT   |   [   DATABASE   ]   [   db_name   ]   |   APPLICATION   application_name   |   APPLICATION   PACKAGE   application_package_name    }",
            "description": "Specifies the scope of the command, which determines whether the command lists records only for the current/specified database or\nacross your entire account. The APPLICATION and APPLICATION PACKAGE keywords are not required, but they specify the scope for the named Snowflake Native App. The DATABASE keyword is not required; you can set the scope by specifying only the database name. Likewise, the database name\nis not required if the session currently has a database in use. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        },
        {
            "name": "WITH   PRIVILEGES   object_privilege   [   ,   object_privilege   [   ,   ...   ]   ]",
            "description": "Optionally limits rows to objects for which the active role for the current\nuser has been granted all of the specified privileges in the list on the object. If a CREATE <object> privilege is included in the privileges list, the command excludes objects for which secondary roles have\nbeen granted privileges. This is because only the primary role has the authorization to create objects. For more information, see Authorization through primary role and secondary roles ."
        },
        {
            "name": "OBJECT_VISIBILITY",
            "description": "This new column is appended to the existing views and is reserved for future use. For more information, see DATABASES and SCHEMATA views, and SHOW DATABASES and SHOW SCHEMAS commands: New column in output ."
        }
    ],
    "usage_notes": "When you specify the scope to either APPLICATION or the database named SNOWFLAKE, the owner column returns\nSNOWFLAKE as the owner for the schema named LOCAL. For example:\nThe owner column returns:\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema.\nThe HISTORY and WITH PRIVILEGES parameters are mutually exclusive; they cannot both be used in the same statement."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-event-tables",
    "title": "SHOW EVENT TABLES",
    "description": "Lists the event tables for which you have access privileges, including\ndropped tables that are still within the Time Travel retention period and, therefore, can be undropped. The command can be used to list\nevent tables for the current/specified database or schema, or across your entire account.",
    "syntax": "SHOW [ TERSE ] EVENT TABLES [ LIKE '<pattern>' ]\n  [ IN { ACCOUNT | DATABASE [ <db_name> ] | SCHEMA [ <schema_name> ] } ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW EVENT TABLES LIKE 'mylogs%' IN tpch.public;"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Optionally returns only a subset of the output columns: created_on name database_name schema_name Default: No value (all columns are included in the output)"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   ACCOUNT   |   DATABASE   [   db_name   ]   |   SCHEMA   [   schema_name   ]",
            "description": "Optionally specifies the scope of the command, which determines whether the command lists records only for the current/specified database or schema, or across your entire account. If you specify the keyword ACCOUNT , then the command retrieves records for all schemas in all databases\nof the current account. If you specify the keyword DATABASE , then: If you specify a db_name , then the command retrieves records for all schemas of the specified database. If you do not specify a db_name , then: If there is a current database, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and schemas in the account. If you specify the keyword SCHEMA , then: If you specify a qualified schema name (e.g. my_database.my_schema ), then the command\nretrieves records for the specified database and schema. If you specify an unqualified schema_name , then: If there is a current database, then the command retrieves records for the specified schema in the current database. If there is no current database, then the command displays the error SQL compilation error: Object does not exist, or operation cannot be performed . If you do not specify a schema_name , then: If there is a current database, then: If there is a current schema, then the command retrieves records for the current schema in the current database. If there is no current schema, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and all schemas in the account. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the current\ndatabase). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "If an account (or database or schema) has a large number of event tables, then searching the entire account (or table or schema)\ncan consume a significant amount of compute resources.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-classes",
    "title": "SHOW CLASSES",
    "description": "Lists all available classes.",
    "syntax": "SHOW CLASSES [ LIKE '<pattern>' ]\n             [ IN DATABASE [ <db_name> ] ]\n             [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW CLASSES IN DATABASE SNOWFLAKE;\n\n+-------------------------------+-----------------------+---------------+-------------+---------+---------+-------+------------------+-----------------+\n| created_on                    | name                  | database_name | schema_name | version | comment | owner | is_service_class | owner_role_type |\n|-------------------------------+-----------------------+---------------+-------------+---------+---------+-------|------------------|-----------------+\n| 2023-04-17 11:48:31.222 -0700 | ANOMALY_DETECTION     | SNOWFLAKE     | ML          | NULL    | NULL    |       | false            |                 |\n| 2023-05-26 10:01:24.852 -0700 | FORECAST              | SNOWFLAKE     | ML          | NULL    | NULL    |       | false            |                 |\n+-------------------------------+-----------------------+---------------+-------------+---------+---------+-------+------------------+-----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   DATABASE   db_name",
            "description": "Specifies the scope of the command, which determines whether the command lists records only for the current/specified database or\nacross your entire account. The DATABASE keyword is not required; you can set the scope by specifying only the database name. Likewise, the database name\nis not required if the session currently has a database in use. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The owner and owner_role_type columns don’t return a value.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-global-accounts",
    "title": "SHOW GLOBAL ACCOUNTS",
    "description": "Lists all the accounts in your organization that are enabled for replication and indicates the Snowflake Region in which each account\nis located.",
    "syntax": "SHOW GLOBAL ACCOUNTS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW GLOBAL ACCOUNTS LIKE 'myaccount%';"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-organization-profiles",
    "title": "SHOW ORGANIZATION PROFILES",
    "description": "Lists the organization profiles for which you have access privileges.",
    "syntax": "SHOW ORGANIZATION PROFILES",
    "examples": [
        {
            "code": "SHOW ORGANIZATION PROFILES;"
        },
        {
            "code": "+-------------------------+-----------------+---------------------+---------------------+---------------------+---------------------------+----------------------------------+---------------------+---------------------+---------------------+\n|created_on               |name             |system_generated     |state                |organization_name    |title                      |description                       |owner_contact        |approver_contact     |owner                |\n+-------------------------+-----------------+---------------------+---------------------+---------------------+---------------------------+----------------------------------+---------------------+---------------------+---------------------+\n| 2025-01-01 01:01:01.000 |ORGPROFILE       |FALSE                |ACTIVE               |TESTORG              |My Organization Profile    |Organization profile description  |test@test.com        |test@test.com        |ACCOUNTADMIN         |\n+-------------------------+-----------------+---------------------+---------------------+---------------------+---------------------------+----------------------------------+---------------------+---------------------+---------------------+"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-services",
    "title": "SHOW SERVICES",
    "description": "Lists the Snowpark Container Services services (including job services) for\nwhich you have access privileges.",
    "syntax": "SHOW [ JOB ] SERVICES [ EXCLUDE JOBS ] [ LIKE '<pattern>' ]\n           [ IN\n                {\n                  ACCOUNT                  |\n\n                  DATABASE                 |\n                  DATABASE <database_name> |\n\n                  SCHEMA                   |\n                  SCHEMA <schema_name>     |\n                  <schema_name>            |\n\n                  COMPUTE POOL <compute_pool_name>\n                }\n           ]\n           [ STARTS WITH '<name_string>' ]\n           [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW SERVICES;"
        },
        {
            "coden| name         | status  | database_name | schema_name | owner     | compute_pool          | dns_name                            | current_instances | target_instances | min_ready_instances | min_instances | max_instances | auto_resume | external_access_integrations | created_on                    | updated_on                    | resumed_on | suspended_on | auto_suspend_secs | comment | owner_role_type | query_warehouse | is_job | is_async_job | spec_digest                                                      | is_upgrading | managing_object_domain | managing_object_name |\n||\n| ECHO_SERVICE | RUNNING | TUTORIAL_DB   | DATA_SCHEMA | TEST_ROLE | TUTORIAL_COMPUTE_POOL | echo-service.k3m6.svc.spcs.internal |                 1 |                1 |                   1 |             1 |             1 | true        | NULL                         | 2024-11-29 12:12:47.310 -0800 | 2024-11-29 12:12:48.843 -0800 | NULL       | NULL         |                 0 | NULL    | ROLE            | NULL            | false  | false        | edaf548eb0c2744a87426529b53aac75756d0ea1c0ba5edb3cbb4295a381f2b4 | false        | NULL                   | NULL                 |\n
        },
        {
            "code": "SHOW SERVICES LIMIT 1;"
        },
        {
            "code": "SHOW SERVICES LIKE '%echo%';"
        },
        {
            "code": "SHOW SERVICES LIKE '%echo%' LIMIT 1;"
        },
        {
            "code": "SHOW JOB SERVICES;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned. The actual number of rows returned might be less than the specified limit. For\nexample, the number of existing objects is less than the specified limit. Default: No value (no limit is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-git-branches",
    "title": "SHOW GIT BRANCHES",
    "description": "Lists the branches in the specified Snowflake Git repository clone.",
    "syntax": "SHOW GIT BRANCHES [ LIKE '<pattern>' ] IN [ GIT REPOSITORY ] <repository_name>",
    "examples": [
        {
            "code": "SHOW GIT BRANCHES IN snowflake_extensions;"
        },
        {
            "code": "--------------------------------------------------------------------------------\n| name | path           | checkouts | commit_hash                              |\n--------------------------------------------------------------------------------\n| main | /branches/main |           | 0f81b1487dfc822df9f73ac6b3096b9ea9e42d69 |\n--------------------------------------------------------------------------------"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   [   GIT   REPOSITORY   ]   repository_name",
            "description": "Specifies the Git repository clone containing the branches to show."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-user-functions",
    "title": "SHOW USER FUNCTIONS",
    "description": "Lists all user-defined functions (UDFs) for which you have access privileges. Use this command to list the UDFs for a specified\ndatabase or schema (or the current database/schema for the session), or across your entire account.",
    "syntax": "SHOW USER FUNCTIONS [ LIKE '<pattern>' ]\n  [ IN\n    {\n      ACCOUNT                                         |\n\n      DATABASE                                        |\n      DATABASE <database_name>                        |\n\n      SCHEMA                                          |\n      SCHEMA <schema_name>                            |\n      <schema_name>\n\n      APPLICATION <application_name>                  |\n      APPLICATION PACKAGE <application_package_name>  |\n    }\n  ]",
    "examples": [
        {
            "code": "SHOW USER FUNCTIONS LIKE 'ALLOWED_REGIONS%' IN SCHEMA;"
        },
        {
            "code": "---------------------------------+--------------------------+-------------+------------+--------------+---------+-------------------+-------------------+-----------------------------------------+-----------------------+----------------+-------------------+----------------------+-----------+---------+-----------------------------+----------------------+----------+---------------+----------------+\n          created_on             |           name           | schema_name | is_builtin | is_aggregate | is_ansi | min_num_arguments | max_num_arguments |                arguments                |      description      |  catalog_name  | is_table_function | valid_for_clustering | is_secure | secrets | external_access_integration | is_external_function | language | is_memoizable | is_data_metric |\n---------------------------------+--------------------------+-------------+------------+--------------+---------+-------------------+-------------------+-----------------------------------------+-----------------------+----------------+-------------------+----------------------+-----------+---------+-----------------------------+----------------------+----------+---------------+----------------+\n Fri, 23 Jun 1967 00:00:00 -0700 | ALLOWED_REGIONS          | PUBLIC      | N          | N            | N       | 0                 | 0                 | ALLOWED_REGIONS() RETURN ARRAY          | user-defined function | MEMO_FUNC_TEST | N                 | N                    | N         |         |                             | N                    | SQL      | Y             | N              |\n Fri, 23 Jun 1967 00:00:00 -0700 | ALLOWED_REGIONS_NON_MEMO | PUBLIC      | N          | N            | N       | 0                 | 0                 | ALLOWED_REGIONS_NON_MEMO() RETURN ARRAY | user-defined function | MEMO_FUNC_TEST | N                 | N                    | N         |         |                             | N                    | SQL      | N             | N              |\n---------------------------------+--------------------------+-------------+------------+--------------+---------+-------------------+-------------------+-----------------------------------------+-----------------------+----------------+-------------------+----------------------+-----------+---------+-----------------------------+----------------------+----------+---------------+----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-tags",
    "title": "SHOW TAGS",
    "description": "Lists the tag information.",
    "syntax": "SHOW TAGS [ LIKE '<pattern>' ]\n          [ IN\n               {\n                 ACCOUNT                                         |\n\n                 DATABASE                                        |\n                 DATABASE <database_name>                        |\n\n                 SCHEMA                                          |\n                 SCHEMA <schema_name>                            |\n                 <schema_name>\n\n                 APPLICATION <application_name>                  |\n                 APPLICATION PACKAGE <application_package_name>  |\n               }\n          ]",
    "examples": [
        {
            "code": "SHOW TAGS IN SCHEMA my_db.my_schema;"
        },
        {
            "code": "------------------------------+----------------+---------------+-------------+--------------+--------------------+----------------+-----------------+\n                   created_on | name           | database_name | schema_name | owner        | comment            | allowed_values | owner_role_type |\n------------------------------+----------------+---------------+-------------+--------------+--------------------+----------------+-----------------+\n2021-03-20 21:09:38.317 +0000 | CLASSIFICATION | MY_DB         | MY_SCHEMA   | ACCOUNTADMIN | secure information | [NULL]         | ROLE            |\n2021-03-20 21:08:59.000 +0000 | COST_CENTER    | MY_DB         | MY_SCHEMA   | ACCOUNTADMIN | cost_center tag    | [NULL]         | ROLE            |\n------------------------------+----------------+---------------+-------------+--------------+--------------------+----------------+-----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The ALLOWED_VALUES column specifies the possible string values that can be assigned to the tag when the tag is set\non an object or NULL if the tag does not have any specified allowed values. For details, see\nSet a list of allowed tag values.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-models",
    "title": "SHOW MODELS",
    "description": "Lists the machine learning models that you have privileges to access.",
    "syntax": "SHOW MODELS [ LIKE '<pattern>' ]\n            [ IN { DATABASE [ <db_name> ] | SCHEMA [ <schema_name> ] } ]",
    "examples": [
        {
            "code": "SHOW MODELS [ LIKE '<pattern>' ]\n            [ IN { DATABASE [ <db_name> ] | SCHEMA [ <schema_name> ] } ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   DATABASE   [   db_name   ]   |   SCHEMA   [   schema_name   ]",
            "description": "Optionally specifies the scope of the command, which determines whether the command lists models only in the current/specified\ndatabase or schema. If you specify the keyword ACCOUNT , then the command retrieves records for all schemas in all databases\nof the current account. If you specify the keyword DATABASE , then: If you specify a db_name , then the command retrieves records for all schemas of the specified database. If you do not specify a db_name , then: If there is a current database, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and schemas in the account. If you specify the keyword SCHEMA , then: If you specify a qualified schema name (e.g. my_database.my_schema ), then the command\nretrieves records for the specified database and schema. If you specify an unqualified schema_name , then: If there is a current database, then the command retrieves records for the specified schema in the current database. If there is no current database, then the command displays the error SQL compilation error: Object does not exist, or operation cannot be performed . If you do not specify a schema_name , then: If there is a current database, then: If there is a current schema, then the command retrieves records for the current schema in the current database. If there is no current schema, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and all schemas in the account. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the models you have privileges to view in the current\ndatabase). No database: Account scope is the default (i.e. the command returns the models you have privileges to view in your account)."
        }
    ],
    "usage_notes": "Results are sorted by database name, schema name, and then model name. This means results for a database can contain models from multiple schemas\nand might break pagination. In order for pagination to work as expected, you must execute the SHOW MODELS statement for a single schema. You can\nuse the IN SCHEMA schema_name parameter to the SHOW MODELS command. Alternatively, you can use the schema in the current context by\nexecuting a USE SCHEMA schema_name before executing SHOW MODELS.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-external-functions",
    "title": "SHOW EXTERNAL FUNCTIONS",
    "description": "Lists all the external functions created for your account.",
    "syntax": "SHOW EXTERNAL FUNCTIONS [ LIKE '<pattern>' ]\n           [ IN { APPLICATION <application_name> | APPLICATION PACKAGE <application_package_name> }  ]",
    "examples": [
        {
            "code": "SHOW EXTERNAL FUNCTIONS;"
        },
        {
            "code": "SHOW EXTERNAL FUNCTIONS LIKE 'SQUARE%';"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the named Snowflake Native App or application package."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The commands SHOW FUNCTIONS and SHOW USER FUNCTIONS also display information\nabout external functions.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-sequences",
    "title": "SHOW SEQUENCES",
    "description": "Lists all the sequences for which you have access privileges. This command can be used to list the sequences for a specified schema or\ndatabase (or the current schema/database for the session), or your entire account.",
    "syntax": "SHOW SEQUENCES [ LIKE '<pattern>' ]\n               [ IN\n                    {\n                      ACCOUNT                                         |\n\n                      DATABASE                                        |\n                      DATABASE <database_name>                        |\n\n                      SCHEMA                                          |\n                      SCHEMA <schema_name>                            |\n                      <schema_name>\n\n                      APPLICATION <application_name>                  |\n                      APPLICATION PACKAGE <application_package_name>  |\n                    }\n               ]",
    "examples": [
        {
            "code": "SHOW SEQUENCES [ LIKE '<pattern>' ]\n               [ IN\n                    {\n                      ACCOUNT                                         |\n\n                      DATABASE                                        |\n                      DATABASE <database_name>                        |\n\n                      SCHEMA                                          |\n                      SCHEMA <schema_name>                            |\n                      <schema_name>\n\n                      APPLICATION <application_name>                  |\n                      APPLICATION PACKAGE <application_package_name>  |\n                    }\n               ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-datasets",
    "title": "SHOW DATASETS",
    "description": "Displays information about the datasets in your account.\nYou can show all datasets or use the IN subcommand to only display results at the schema or database level.",
    "syntax": "SHOW DATASETS\n  [ LIKE '<pattern>' ]\n  [ IN { SCHEMA <schema_name> | DATABASE <db_name> | ACCOUNT } ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW DATASETS IN SCHEMA PUBLIC LIMIT 2;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   pattern",
            "description": "Restricts the list of returned datasets to those matching the specified pattern."
        },
        {
            "name": "IN   SCHEMA   <schema_name>   |   DATABASE   <db_name>   |   ACCOUNT",
            "description": "Restricts the list of returned datasets to those in the specified schema or database within an account."
        },
        {
            "name": "DATABASE   db_name",
            "description": "Restricts the list of returned datasets to those in the specified database.\nIf you specify a database without db_name and no database is in use, they keyword has no\neffect on the output."
        },
        {
            "name": "SCHEMA   schema_name",
            "description": "By default, returns records for the schema in use. You can also specify a schema_name ."
        },
        {
            "name": "STARTS   WITH   name_string",
            "description": "Uses the string that you specify to limit the datasets returned.\nThe names of the datasets returned have the same beginning characters as the specified string."
        },
        {
            "name": "LIMIT   rows   [   FROM   name_string   ]",
            "description": "Limits the number of returned datasets to the specified number of rows.\nThe optional FROM clause specifies the starting point for the returned datasets."
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-regions",
    "title": "SHOW REGIONS",
    "description": "Lists all the regions in which accounts can be created. This command returns the Snowflake Region name,\nthe cloud provider (AWS, Google Cloud Platform, or Microsoft Azure) that hosts the account, and the cloud provider’s name for the region.",
    "syntax": "SHOW REGIONS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW REGIONS [ LIKE '<pattern>' ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-user-procedures",
    "title": "SHOW USER PROCEDURES",
    "description": "Lists all user-defined procedures for which you have access privileges. Use this command to list the user-defined procedures for a specified\ndatabase or schema (or the current database/schema for the session), application, or for your entire account.",
    "syntax": "SHOW USER PROCEDURES [ LIKE '<pattern>' ]\n  [ IN\n    {\n      ACCOUNT                                         |\n\n      DATABASE                                        |\n      DATABASE <database_name>                        |\n\n      SCHEMA                                          |\n      SCHEMA <schema_name>                            |\n      <schema_name>\n\n      APPLICATION <application_name>                  |\n      APPLICATION PACKAGE <application_package_name>  |\n    }\n  ]",
    "examples": [
        {
            "code": "SHOW USER PROCEDURES LIKE 'GET_%' IN SCHEMA;"
        },
        {
            "code": "-------------------------------+-----------------+-------------+------------+--------------+---------+-------------------+-------------------+---------------------------------------+------------------------+--------------+-------------------+----------------------+-----------+---------+------------------------------+\n          created_on           | name            | schema_name | is_builtin | is_aggregate | is_ansi | min_num_arguments | max_num_arguments | arguments                             | description            | catalog_name | is_table_function | valid_for_clustering | is_secure | secrets | external_access_integrations |\n-------------------------------+-----------------+-------------+------------+--------------+---------+-------------------+-------------------+---------------------------------------+------------------------+--------------+-------------------+----------------------+-----------+---------+------------------------------+\n 2023-01-27 15:01:13.862 -0800 | GET_FILE        | PUBLIC      | N          | N            | N       | 1                 | 1                 | GET_FILE(VARCHAR) RETURN VARCHAR      | user-defined procedure | BOOKS_DB     | N                 | N                    | N         |         |                              |\n 2023-03-23 10:38:10.423 -0700 | GET_NUM_RESULTS | PUBLIC      | N          | N            | N       | 1                 | 1                 | GET_NUM_RESULTS(VARCHAR) RETURN FLOAT | user-defined procedure | BOOKS_DB     | N                 | N                    | N         |         |                              |\n 2023-03-23 09:47:55.840 -0700 | GET_RESULTS     | PUBLIC      | N          | N            | N       | 1                 | 1                 | GET_RESULTS(VARCHAR) RETURN TABLE ()  | user-defined procedure | BOOKS_DB     | Y                 | N                    | N         |         |                              |\n-------------------------------+-----------------+-------------+------------+--------------+---------+-------------------+-------------------+---------------------------------------+------------------------+--------------+-------------------+----------------------+-----------+---------+------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-git-repositories",
    "title": "SHOW GIT REPOSITORIES",
    "description": "Lists the Git repository clones that you have privileges to access.",
    "syntax": "SHOW GIT REPOSITORIES [ LIKE '<pattern>' ]\n  [ IN\n      {\n        ACCOUNT                  |\n\n        DATABASE                 |\n        DATABASE <database_name> |\n\n        SCHEMA                   |\n        SCHEMA <schema_name>     |\n        <schema_name>\n      }\n  ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW GIT REPOSITORIES;"
        },
        {
            "code": "------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| CREATED_ON                    | NAME                 | DATABASE_NAME | SCHEMA_NAME | ORIGIN                                                  | API_INTEGRATION     | GIT_CREDENTIALS              | OWNER        | OWNER_ROLE_TYPE | COMMENT |\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| 2023-06-28 08:46:10.886 -0700 | SNOWFLAKE_EXTENSIONS | MY_DB         | MAIN        | https://github.com/my-account/snowflake-extensions.git  | GIT_API_INTEGRATION | MY_DB.MAIN.EXTENSIONS_SECRET | ACCOUNTADMIN | ROLE            |         |\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n| 2023-06-28 08:46:10.886 -0700 | SNOWFLAKE_AI         | MY_DB         | MAIN        | https://github.com/my-account/snowflake-AI.git          | GIT_API_INTEGRATION | MY_DB.MAIN.AI_SECRET         | ACCOUNTADMIN | ROLE            |         |\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned. The actual number of rows returned might be less than the specified limit. For\nexample, the number of existing objects is less than the specified limit. Default: No value (no limit is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-contacts",
    "title": "SHOW CONTACTS",
    "description": "Lists the contacts for which you have access privileges.",
    "syntax": "SHOW CONTACTS [ LIKE '<pattern>' ]\n          [ IN\n              {\n                ACCOUNT                  |\n\n                DATABASE                 |\n                DATABASE <database_name> |\n\n                SCHEMA                   |\n                SCHEMA <schema_name>     |\n                <schema_name>\n              }\n          ]\n          [ STARTS WITH '<name_string>' ]\n          [ LIMIT <rows> ]\n          [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "USE DATABASE mydb;\n\nSHOW CONTACTS;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned. The actual number of rows returned might be less than the specified limit. For\nexample, the number of existing objects is less than the specified limit. Default: No value (no limit is applied to the output)."
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-streams",
    "title": "SHOW STREAMS",
    "description": "Lists the streams for which you have access privileges. The command can be used to list streams for the current/specified database\nor schema, or across your entire account.",
    "syntax": "SHOW [ TERSE ] STREAMS [ LIKE '<pattern>' ]\n                       [ IN { ACCOUNT | DATABASE [ <db_name> ] | [ SCHEMA ] [ <schema_name> ] | APPLICATION <application_name> | APPLICATION PACKAGE <application_package_name> } ]\n                       [ STARTS WITH '<name_string>' ]\n                       [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW STREAMS LIKE 'line%' IN tpch.public;"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of the output columns: created_on name kind (rename of type column in full set of columns) database_name schema_name tableOn (rename of table_name column in full set of columns)"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   ACCOUNT   |   [   DATABASE   ]   db_name   |   [   SCHEMA   ]   schema_name   |   APPLICATION   application_name   |   APPLICATION   PACKAGE   application_package_name",
            "description": "Specifies the scope of the command, which determines whether the command lists records only for the current/specified database or\nschema, or across your entire account: The APPLICATION and APPLICATION PACKAGE keywords are not required, but they specify the scope for the named Snowflake Native App. The DATABASE or SCHEMA keyword is not required; you can set the scope by specifying only the database or schema name.\nLikewise, the database or schema name is not required if the session currently has a database in use. If DATABASE or SCHEMA is specified without a name and the session does not currently have a database in use, the\nparameter has no effect on the output. If SCHEMA is specified with a name and the session does not currently have a database in use, the schema name must be fully qualified with the database name (e.g. testdb.testschema ). Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns source object names for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-indexes",
    "title": "SHOW INDEXES",
    "description": "Lists all the indexes in your account for which you have access privileges.",
    "syntax": "SHOW [ TERSE ] INDEXES\n  [ LIKE '<pattern>' ]\n  [ IN { ACCOUNT | DATABASE [ <database_name> ] | SCHEMA [ <schema_name> ] | TABLE | TABLE <table_name> } ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW TERSE INDEXES LIKE '%DEVICE%';"
        },
        {
            "code": "+-------------------------------+---------------------------------------+-----------------+---------------+-------------+\n| created_on                    | name                                  | kind            | database_name | schema_name |\n|-------------------------------+---------------------------------------+-----------------+---------------+-------------|\n| 2024-08-29 12:24:49.197 -0700 | SYS_INDEX_SENSOR_DATA_DEVICE1_PRIMARY | KEY_VALUE_INDEX | HT_SENSORS    | HT_SCHEMA   |\n| 2024-08-29 12:24:49.197 -0700 | DEVICE_IDX                            | KEY_VALUE_INDEX | HT_SENSORS    | HT_SCHEMA   |\n| 2024-08-29 14:03:36.537 -0700 | SYS_INDEX_SENSOR_DATA_DEVICE2_PRIMARY | KEY_VALUE_INDEX | HT_SENSORS    | HT_SCHEMA   |\n| 2024-08-29 14:03:36.537 -0700 | DEVICE_IDX                            | KEY_VALUE_INDEX | HT_SENSORS    | HT_SCHEMA   |\n+-------------------------------+---------------------------------------+-----------------+---------------+-------------+"
        },
        {
            "code": "SHOW INDEXES\n  ->> SELECT \"name\",\n             \"is_unique\",\n             \"table\",\n             \"columns\",\n             \"included_columns\",\n             \"database_name\",\n             \"schema_name\"\n        FROM $1\n        WHERE \"included_columns\" != '[]';"
        },
        {
            "code": "+------------+-----------+---------------------+-------------+------------------+---------------+-------------+\n| name       | is_unique | table               | columns     | included_columns | database_name | schema_name |\n|------------+-----------+---------------------+-------------+------------------+---------------+-------------|\n| DEVICE_IDX | N         | SENSOR_DATA_DEVICE2 | [DEVICE_ID] | [TEMPERATURE]    | HT_SENSORS    | HT_SCHEMA   |\n+------------+-----------+---------------------+-------------+------------------+---------------+-------------+"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of the output columns: created_on name kind database_name schema_name"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   {   ACCOUNT   |   DATABASE   [   database_name   ]   |   SCHEMA   [   schema_name   ]   |   TABLE   |   TABLE   table_name   }",
            "description": "Filters the output by the specified database, schema, table, or account. If you specify the keyword ACCOUNT , then the command retrieves records for all schemas in all databases\nof the current account. If you specify the keyword DATABASE , then: If you specify a db_name , then the command retrieves records for all schemas of the specified database. If you do not specify a db_name , then: If there is a current database, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and schemas in the account. If you specify the keyword SCHEMA , then: If you specify a qualified schema name (e.g. my_database.my_schema ), then the command\nretrieves records for the specified database and schema. If you specify an unqualified schema_name , then: If there is a current database, then the command retrieves records for the specified schema in the current database. If there is no current database, then the command displays the error SQL compilation error: Object does not exist, or operation cannot be performed . If you do not specify a schema_name , then: If there is a current database, then: If there is a current schema, then the command retrieves records for the current schema in the current database. If there is no current schema, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and all schemas in the account. If you specify the keyword TABLE without a table_name , then: If there is a current database, then: If there is a current schema, then the command retrieves records for the current schema in the current database. If there is no current schema, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and all schemas in the account. If you specify a <table_name> (with or without the keyword TABLE ), then: If you specify a fully-qualified <table_name> (e.g. my_database_name.my_schema_name.my_table_name ),\nthen the command retrieves all records for the specified table. If you specify a schema-qualified <table_name> (e.g. my_schema_name.my_table_name ), then: If a current database exists, then the command retrieves all records for the specified table. If no current database exists, then the command displays an error similar to Cannot perform SHOW <object_type>. This session does not have a current database... . If you specify an unqualified <table_name> , then: If a current database and current schema exist, then the command retrieves records for the specified table in the current\nschema of the current database. If no current database exists or no current schema exists, then the command displays an error similar to: SQL compilation error: <object> does not exist or not authorized. . Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/create",
    "title": "CREATE",
    "description": "Creates a new object of the specified type."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-versions-in-dataset",
    "title": "SHOW VERSIONS IN DATASET",
    "description": "Displays information about the datasets in your account at either the schema or database level.",
    "syntax": "SHOW VERSIONS [ LIKE '<pattern>' ] IN DATASET <dataset_name>\n  [ LIMIT <rows>]",
    "examples": [
        {
            "code": "SHOW VERSIONS [ LIKE '<pattern>' ] IN DATASET <dataset_name>\n  [ LIMIT <rows>]"
        }
    ],
    "parameters": [
        {
            "name": "IN   DATASET   dataset_name",
            "description": "Name of dataset for which versions are displayed."
        },
        {
            "name": "LIKE   pattern",
            "description": "Restricts the list of returned datasets to those matching the specified pattern. Matching is case-insensitive."
        },
        {
            "name": "LIMIT   num",
            "description": "Limits the maximum number of rows returned."
        }
    ],
    "usage_notes": "Regarding metadata:\nAttention\nCustomers should ensure that no personal data (other than for a User object), sensitive data, export-controlled data, or other regulated data is entered as metadata when using the Snowflake service. For more information, see Metadata fields in Snowflake."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-procedures",
    "title": "SHOW PROCEDURES",
    "description": "Lists all stored procedures that you have privileges to access, including built-in and user-defined procedures.",
    "syntax": "SHOW PROCEDURES [ LIKE '<pattern>' ]\n  [ IN\n    {\n      ACCOUNT                                         |\n\n      CLASS <class_name>                              |\n\n      DATABASE                                        |\n      DATABASE <database_name>                        |\n\n      SCHEMA                                          |\n      SCHEMA <schema_name>                            |\n      <schema_name>\n\n      APPLICATION <application_name>                  |\n      APPLICATION PACKAGE <application_package_name>  |\n    }\n  ]",
    "examples": [
        {
            "code": "SHOW PROCEDURES;"
        },
        {
            "code": "SHOW PROCEDURES LIKE 'area_of_%';\n+-------------------------------+----------------+--------------------+------------+--------------+---------+-------------------+-------------------+------------------------------------+------------------------+-----------------------+-------------------+----------------------+-----------+\n| created_on                    | name           | schema_name        | is_builtin | is_aggregate | is_ansi | min_num_arguments | max_num_arguments | arguments                          | description            | catalog_name          | is_table_function | valid_for_clustering | is_secure |\n|-------------------------------+----------------+--------------------+------------+--------------+---------+-------------------+-------------------+------------------------------------+------------------------+-----------------------+-------------------+----------------------+-----------|\n| 1967-06-23 00:00:00.123 -0700 | AREA_OF_CIRCLE | TEMPORARY_DOC_TEST | N          | N            | N       |                 1 |                 1 | AREA_OF_CIRCLE(FLOAT) RETURN FLOAT | user-defined procedure | TEMPORARY_DOC_TEST_DB | N                 | N                    | N         |\n+-------------------------------+----------------+--------------------+------------+--------------+---------+-------------------+-------------------+------------------------------------+------------------------+-----------------------+-------------------+----------------------+-----------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema.\nIf you specify CLASS, the command only returns the following columns:"
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-shares",
    "title": "SHOW SHARES",
    "description": "Lists all shares available in the system:",
    "syntax": "SHOW SHARES [ LIKE '<pattern>' ]\n            [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW SHARES;\n\n+-------------------------------+----------+----------------------+---------------+-----------------------+------------------+--------------+----------------------------------------+---------------------+\n| created_on                    | kind     | owner_account        | name          | database_name         | to               | owner        | comment                                | listing_global_name |                  |\n|-------------------------------+----------+----------------------+---------------+-----------------------+------------------+--------------+----------------------------------------|---------------------|\n| 2016-07-09 19:18:09.821 -0700 | INBOUND  | SNOW.MY_TEST_ACCOUNT | SAMPLE_DATA   | SNOWFLAKE_SAMPLE_DATA |                  |              | Sample data sets provided by Snowflake |                     |\n| 2017-06-15 17:02:29.625 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT | SALES_S       | SALES_DB              | XY12345, YZ23456 | ACCOUNTADMIN |                                        |                     |\n+-------------------------------+----------+----------------------+---------------+-----------------------+------------------+--------------+----------------------------------------+---------------------+"
        },
        {
            "code": "SHOW SHARES LIMIT 5 FROM 'SNOW';\n\n+-------------------------------+----------+-------------------------+-----------------+----------------+------------------+--------------+---------+---------------------+\n| created_on                    | kind     | owner_account           | name            | database_name  | to               | owner        | comment | listing_global_name |\n|-------------------------------+----------+-------------------------+-----------------+----------------+------------------+--------------+---------+---------------------|\n| 2020-07-07 19:18:09.821 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT    | SNOW_DATA       | EXAMPLE        |                  | ACCOUNTADMIN |         |                     |\n| 2020-07-10 19:18:09.821 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT    | DATA_SNOWS      | EXAMPLE        |                  | ACCOUNTADMIN |         |                     |\n| 2022-08-18 12:02:29.625 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT    | SNOW_DATA       | ALFALFA_DB     | AB12345, YZ23456 | ACCOUNTADMIN |         |                     |\n| 2022-08-18 13:04:29.625 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT    | SNOW_SHARE      | SALES_DB       | AB12345          | ACCOUNTADMIN |         |                     |\n| 2022-08-18 14:02:40.625 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT    | SNOWIER_SHARE   | SALES_DB       |                  | ACCOUNTADMIN |         |                     |\n+-------------------------------+----------+-------------------------+-----------------+----------------+------------------+--------------+---------+---------------------+"
        },
        {
            "code": "SHOW SHARES STARTS WITH 'SNOW' LIMIT 5 FROM 'A';\n\n+-------------------------------+----------+------------------------+------------------------+----------------+------------------+--------------+---------+---------------------+\n| created_on                    | kind     | owner_account          |  name                  | database_name  | to               | owner        | comment | listing_global_name |\n|-------------------------------+----------+------------------------+------------------------+----------------+------------------+--------------+---------+---------------------|\n| 2020-07-07 19:18:09.821 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT   | SNOW_DATA              | EXAMPLE        |                  | ACCOUNTADMIN |         |                     |\n| 2022-08-18 12:02:29.625 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT   | SNOW_DATA              | ALFALFA_DB     | AB12345, YZ23456 | ACCOUNTADMIN |         |                     |\n| 2022-08-18 14:02:40.625 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT   | SNOWIER_SHARE          | SALES_DB       |                  | ACCOUNTADMIN |         |                     |\n| 2022-08-20 15:03:50.625 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT   | SNOWY_SHARE            | SALES_DB       |                  | ACCOUNTADMIN |         |                     |\n| 2022-08-18 13:04:29.625 -0700 | OUTBOUND | SNOW.MY_TEST_ACCOUNT   | SNOW_SHARE             | SALES_DB       | AB12345          | ACCOUNTADMIN |         |                     |\n+-------------------------------+----------+------------------------+------------------------+----------------+------------------+--------------+---------+---------------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command lists shares only for users with a role that has the IMPORT SHARE privilege:\nBy default, the ACCOUNTADMIN role has this privilege.\nA user with the ACCOUNTADMIN role can delegate this privilege. See Enable non-ACCOUNTADMIN roles to perform data sharing tasks.\nIf a user without the IMPORT SHARE privilege runs this command, no shares are listed.\nNote\nExecuting this command without sufficient privileges returns empty results.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-grants",
    "title": "SHOW GRANTS",
    "description": "Lists all access control privileges that have been explicitly granted to roles, users, and shares.",
    "syntax": "SHOW GRANTS [ LIMIT <rows> ]\n\nSHOW GRANTS ON ACCOUNT [ LIMIT <rows> ]\n\nSHOW GRANTS ON <object_type> <object_name> [ LIMIT <rows> ]\n\nSHOW GRANTS TO {\n  APPLICATION <app_name>\n  | APPLICATION ROLE [ <app_name>. ]<app_role_name>\n  | SERVICE ROLE <service_name>!<service_role_name>\n  | <class_name> ROLE <instance_name>!<instance_role_name>\n  | ROLE <role_name>\n  | SHARE <share_name> [ IN APPLICATION PACKAGE <app_package_name> ]\n  | USER <user_name>\n} [ LIMIT <rows> ]\n\nSHOW GRANTS OF {\n  APPLICATION ROLE <app_role_name>\n  | SERVICE ROLE <service_name>!<service_role_name>\n  | ROLE <role_name>\n} [ LIMIT <rows> ]\n\nSHOW GRANTS OF SHARE <share_name> [ LIMIT <rows> ]\n\nSHOW FUTURE GRANTS IN SCHEMA { <schema_name> } [ LIMIT <rows> ]\n\nSHOW FUTURE GRANTS IN DATABASE { <database_name> } [ LIMIT <rows> ]\n\nSHOW FUTURE GRANTS TO ROLE <role_name> [ LIMIT <rows> ]\n\nSHOW FUTURE GRANTS TO DATABASE ROLE <database_role_name>",
    "examples": [
        {
            "code": "SHOW GRANTS ON DATABASE sales;"
        },
        {
            "code": "+---------------------------------+-----------+------------+------------+------------+--------------+--------------+----------------------+--------------+\n| created_on                      | privilege | granted_on | name       | granted_to | grantee_name | grant_option | granted_by_role_type | granted_by   |\n+---------------------------------+-----------+------------+------------+------------+--------------+--------------+----------------------+--------------+\n| Thu, 07 Jul 2016 05:22:29 -0700 | OWNERSHIP | DATABASE   | REALESTATE | ROLE       | ACCOUNTADMIN | true         | ROLE                 | ACCOUNTADMIN |\n| Thu, 07 Jul 2016 12:14:12 -0700 | USAGE     | DATABASE   | REALESTATE | ROLE       | PUBLIC       | false        | ROLE                 | ACCOUNTADMIN |\n+---------------------------------+-----------+------------+------------+------------+--------------+--------------+----------------------+--------------+"
        },
        {
            "code": "SHOW GRANTS TO ROLE analyst;"
        },
        {
            "code": "+---------------------------------+------------------+------------+------------+------------+--------------+--------------+------------+\n| created_on                      | privilege        | granted_on | name       | granted_to | grantee_name | grant_option | granted_by |\n|---------------------------------+------------------+------------+------------+------------+--------------+--------------+------------+\n| Wed, 17 Dec 2014 18:19:37 -0800 | CREATE WAREHOUSE | ACCOUNT    | DEMOENV    | ROLE       |  ANALYST     | false        | SYSADMIN   |\n+---------------------------------+------------------+------------+------------+------------+--------------+--------------+------------+"
        },
        {
            "code": "SHOW GRANTS TO ROLE public;"
        },
        {
            "code": "+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| created_on                      | privilege | granted_on    | name                              | granted_to | grantee_name | grant_option | granted_by |\n|---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------|\n| ...                             |           |               |                                   |            |              |              |            |\n|---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | ALERT_VIEWER                      | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | CLASSIFICATION_VIEWER             | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | CORE_VIEWER                       | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | DATA_PRIVACY_VIEWER               | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+-------- -----+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | ML_USER                           | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | MONITORING_VIEWER                 | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | NOTIFICATION_VIEWER               | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | SNOWFLAKE_TEMPLATE_SNOWGIT_VIEWER | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| 2023-08-18 13:33:01.156 -0700   | USAGE     | DATABASE_ROLE | SPCS_REGISTRY_VIEWER              | ROLE       | PUBLIC       | false        |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+\n| ...                             |           |               |                                   |            |              |              |            |\n+---------------------------------+-----------+---------------+-----------------------------------+------------+--------------+--------------+------------+"
        },
        {
            "code": "SHOW GRANTS TO USER user1;"
        },
        {
            "code": "+-------------------------------+-----------+------------+---------------------------+-----------+------------+--------------+--------------+---------------+\n| created_on                    | privilege | granted_on | name                      |  role     | granted_to | grantee_name | grant_option | granted_by    |\n|-------------------------------+-----------+------------+---------------------------+-----------+------------+--------------+------------------------------|\n| 2025-05-07 09:08:43.773 -0800 | USAGE     | DATABASE   | test_db                   | null      | USER       | user1        | false        | SECURITYADMIN |\n| 2025-05-07 09:08:55.253 -0800 | USAGE     | SCHEMA     | test_db.test_sch          | null      | USER       | user1        | false        | SECURITYADMIN |\n| 2025-05-07 09:08:55.253 -0800 | SELECT    | TABLE      | test_db.test_sch.test_tbl | null      | USER       | user1        | false        | SECURITYADMIN |\n| 2025-05-07 09:08:34.838 -0800 | USAGE     | WAREHOUSE  | test_wh                   | null      | USER       | user1        | false        | SECURITYADMIN |\n+-------------------------------+-----------+------------+---------------------------+-----------+------------+--------------+--------------+---------------+"
        },
        {
            "code": "SHOW GRANTS OF ROLE analyst;"
        },
        {
            "code": "+---------------------------------+---------+------------+--------------+---------------+\n| created_on                      | role    | granted_to | grantee_name | granted_by    |\n|---------------------------------+---------+------------+--------------+---------------|\n| Tue, 05 Jul 2016 16:16:34 -0700 | ANALYST | ROLE       | ANALYST_US   | SECURITYADMIN |\n| Tue, 05 Jul 2016 16:16:34 -0700 | ANALYST | ROLE       | DBA          | SECURITYADMIN |\n| Fri, 08 Jul 2016 10:21:30 -0700 | ANALYST | USER       | JOESM        | SECURITYADMIN |\n+---------------------------------+---------+------------+--------------+---------------+"
        },
        {
            "code": "SHOW FUTURE GRANTS IN SCHEMA sales.public;"
        },
        {
            "code": "+-------------------------------+-----------+----------+---------------------------+----------+-----------------------+--------------+\n| created_on                    | privilege | grant_on | name                      | grant_to | grantee_name          | grant_option |\n|-------------------------------+-----------+----------+---------------------------+----------+-----------------------+--------------|\n| 2018-12-21 09:22:26.946 -0800 | INSERT    | TABLE    | SALES.PUBLIC.<TABLE>      | ROLE     | ROLE1                 | false        |\n| 2018-12-21 09:22:26.946 -0800 | SELECT    | TABLE    | SALES.PUBLIC.<TABLE>      | ROLE     | ROLE1                 | false        |\n+-------------------------------+-----------+----------+---------------------------+----------+-----------------------+--------------+"
        },
        {
            "code": "SHOW GRANTS TO SNOWFLAKE.CORE.BUDGET ROLE cost.budgets.my_budget!ADMIN;"
        },
        {
            "code": "+-------------------------------+-----------+------------+----------------------------------------------------------------------------------------------------------------------------------------+\n| created_on                    | privilege | granted_on | name                                                                                                                                   |\n+-------------------------------+-----------+------------+----------------------------------------------------------------------------------------------------------------------------------------+\n| 2023-10-31 15:57:41.489 +0000 | USAGE     | ROLE       | SNOWFLAKE.CORE.BUDGET!ADMIN                                                                                                            |\n| 2023-09-25 22:56:12.798 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!ACTIVATE():VARCHAR(16777216)                                                                                     |\n| 2023-09-25 22:56:13.304 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!ADD_RESOURCE(TARGET_REF VARCHAR):VARCHAR(16777216)                                                               |\n| 2023-09-25 22:56:12.863 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_ACTIVATION_DATE():DATE                                                                                       |\n| 2023-09-25 22:56:12.412 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_BUDGET_NAME():VARCHAR(16777216)                                                                              |\n| 2023-09-25 22:56:11.510 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_CONFIG():TABLE: ()                                                                                           |\n| 2023-09-25 22:56:13.432 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_LINKED_RESOURCES():TABLE: ()                                                                                 |\n| 2023-09-25 22:56:11.582 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_MEASUREMENT_TABLE():TABLE: ()                                                                                |\n| 2023-09-25 22:56:12.153 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_NOTIFICATION_EMAIL():VARCHAR(16777216)                                                                       |\n| 2023-09-25 22:56:12.016 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_NOTIFICATION_INTEGRATION_NAME():VARCHAR(16777216)                                                            |\n| 2023-09-25 22:56:12.286 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_NOTIFICATION_MUTE_FLAG():VARCHAR(16777216)                                                                   |\n| 2023-09-25 22:56:13.068 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_SERVICE_TYPE_USAGE(SERVICE_TYPE VARCHAR):TABLE: ()                                                           |\n| 2023-09-25 22:56:13.245 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_SERVICE_TYPE_USAGE(SERVICE_TYPE VARCHAR, TIME_DEPART VARCHAR, USER_TIMEZONE VARCHAR, TIME_LOWER_BOUND VARCHA |\n| 2023-09-25 22:56:12.595 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_SPENDING_HISTORY():TABLE: ()                                                                                 |\n| 2023-09-25 22:56:12.732 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_SPENDING_HISTORY(TIME_LOWER_BOUND VARCHAR, TIME_UPPER_BOUND VARCHAR):TABLE: ()                               |\n| 2023-09-25 22:56:11.716 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!GET_SPENDING_LIMIT():NUMBER(38,0)                                                                                |\n| 2023-09-25 22:56:13.367 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!REMOVE_RESOURCE(TARGET_REF VARCHAR):VARCHAR(16777216)                                                            |\n| 2023-09-25 22:56:11.856 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!SET_EMAIL_NOTIFICATIONS(NOTIFICATION_CHANNEL_NAME VARCHAR, EMAIL VARCHAR):VARCHAR(16777216)                      |\n| 2023-09-25 22:56:12.349 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!SET_NOTIFICATION_MUTE_FLAG(USER_MUTE_FLAG BOOLEAN):VARCHAR(16777216)                                             |\n| 2023-09-25 22:56:11.780 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!SET_SPENDING_LIMIT(SPENDING_LIMIT FLOAT):VARCHAR(16777216)                                                       |\n| 2023-09-25 22:56:12.475 +0000 | USAGE     | PROCEDURE  | SNOWFLAKE.CORE.BUDGET!SET_TASK_SCHEDULE(NEW_SCHEDULE VARCHAR):VARCHAR(16777216)                                                        |\n+-------------------------------+-----------+------------+----------------------------------------------------------------------------------------------------------------------------------------+"
        }
    ],
    "usage_notes": "The granted_by column indicates the role that authorized a privilege grant to the grantee. The authorization role is known as the\ngrantor.\nWhen you grant privileges on an object to a role using GRANT <privileges> … TO ROLE, the following authorization rules\ndetermine which role is listed as the grantor of the privilege:\nIf an active role is the object owner (i.e. has the OWNERSHIP privilege on the\nobject), that role is the grantor.\nIf an active role holds the specified permission with the grant option authorized (i.e., the privilege was granted to the active role\nwith the GRANT <privileges> … TO ROLE <role_name> WITH GRANT OPTION, where <role_name> is one of the active roles). If so, the\nrole that holds the privilege with the grant option authorized is the grantor role. Note that if multiple active roles meet this\ncriterion, it is non-deterministic which of the roles becomes the grantor role.\nIf an active role holds the global MANAGE GRANTS privilege, the grantor role is the object owner, not the role that held the\nMANAGE GRANTS privilege. That is, the MANAGE GRANTS privilege allows a role to impersonate the object owner for the purposes of\ngranting privileges on that object.\nIf the granted_by column is empty, the privilege was granted by the Snowflake SYSTEM role. Certain internal operations are\nperformed with this role. Grants of privileges authorized by the SYSTEM role cannot be modified by customers.\nWhen using the SHOW GRANTS … TO SHARE IN APPLICATION PACKAGE syntax:\nThe grantee_name column specifies the name of the application package.\nThe granted_to column specifies APPLICATION PACKAGE SHARE.\nThe granted_by_role_type column specifies the type of grantor role that performed the grant: ROLE, DATABASE_ROLE, or\nAPPLICATION_ROLE. This column only appears in the output when using the SHOW GRANTS ON syntax.\nA data sharing consumer can only view the privileges on objects that are granted to the share, such as\nSELECT on a table. Depending on how the grants are set up, the output of a SHOW GRANTS command that is run by the consumer might show\nempty values for shared objects in the following columns: granted_to, grantee_name, granted_by_role_type, and\ngranted_by. For example:\nIf an account role owns the shared object, the consumer cannot view the OWNERSHIP privilege on shared objects because the consumer\ncannot access (resolve) the role that owns the object (account roles are not shared).\nIf a database role owns the shared object and the provider shares the database role, the consumer can view the OWNERSHIP privilege on\nthe shared object because they can resolve the shared database role.\nThe grant_options column returns FALSE when you run a SHOW GRANTS ON <object_type> <object_name> command for an object in the\nmanaged access schema.\nThe privilege column includes the OWNERSHIP and MANAGE GRANTS privileges for the role that owns the managed access schema when\nyou run a SHOW GRANTS ON SCHEMA <managed_access_schema> command.\nWith database roles and the SHOW FUTURE GRANTS TO DATABASE ROLE syntax, the command returns results for database roles that are not\ngranted to a share.\nIn the data sharing consumer account, this command does not return any rows when a shared database role is granted future\nprivileges. However, depending on your account and the timing of support for future privileges to database roles in this command, you\nmight see this error message:\nAs the consumer, ask the provider to revoke the future grants from the shared database role.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-objects-owned-by-application",
    "title": "SHOW OBJECTS OWNED BY APPLICATION",
    "description": "Lists the objects owned by an app that exists outside the app.",
    "syntax": "SHOW OBJECTS OWNED BY APPLICATION <app_name>",
    "examples": [
        {
            "code": "SHOW OBJECTS OWNED BY APPLICATION hello_snowflake_app;"
        },
        {
            "code": "+---------------------------------+----------------------+---------------------+\n| created_on                      | name                 | object_type         |\n|---------------------------------|----------------------|---------------------|\n| 2024-11-20 17:56:08.887 -0800   | HELLO_SNOWFLAKE_APP  | COMPUTE_POOL        |\n+---------------------------------+----------------------+---------------------+"
        }
    ],
    "parameters": [
        {
            "name": "app_name",
            "description": "The name of the app whose objects you want to list."
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-image-repositories",
    "title": "SHOW IMAGE REPOSITORIES",
    "description": "Lists the image repositories for which you\nhave access privileges.",
    "syntax": "SHOW IMAGE REPOSITORIES [ LIKE '<pattern>' ]\n           [ IN\n                {\n                  ACCOUNT                  |\n\n                  DATABASE                 |\n                  DATABASE <database_name> |\n\n                  SCHEMA                   |\n                  SCHEMA <schema_name>     |\n                  <schema_name>\n                }\n           ]",
    "examples": [
        {
            "code": "SHOW IMAGE REPOSITORIES;"
        },
        {
            "code": "SHOW IMAGE REPOSITORIES IN SCHEMA;"
        },
        {
            "code": "SHOW IMAGE REPOSITORIES IN SCHEMA sc1;"
        },
        {
            "code": "SHOW IMAGE REPOSITORIES IN DATABASE;"
        },
        {
            "code": "SHOW IMAGE REPOSITORIES IN DATABASE db1;"
        },
        {
            "code": "SHOW IMAGE REPOSITORIES IN ACCOUNT;"
        },
        {
            "code": "+-------------------------------+---------------------+---------------+-------------+-----------------------------------------------------------------------------------------------------------------------+-----------+-----------------+---------+---------------+--------------------------------------------------------------+\n| created_on                    | name                | database_name | schema_name | repository_url                                                                                                        | owner     | owner_role_type | comment | encryption    | privatelink_repository_url                                   |\n|-------------------------------+---------------------+---------------+-------------+-----------------------------------------------------------------------------------------------------------------------+-----------+-----------------+---------+---------------|--------------------------------------------------------------+\n| 2024-04-18 13:41:53.481 -0700 | TUTORIAL_REPOSITORY | TUTORIAL_DB   | DATA_SCHEMA | orgname-acctname.registry-dev.snowflakecomputing.com/tutorial_db/data_schema/tutorial_repository                      | TEST_ROLE | ROLE            |         | SNOWFLAKE_SSE | orgname-acctname.registry.privatelink.snowflakecomputing.com |\n+-------------------------------+---------------------+---------------+-------------+-----------------------------------------------------------------------------------------------------------------------+-----------+-----------------+---------+---------------+--------------------------------------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-data-metric-functions",
    "title": "SHOW DATA METRIC FUNCTIONS",
    "description": "Lists the data metric functions (DMFs) for which you have access privileges.",
    "syntax": "SHOW DATA METRIC FUNCTIONS\n  [ LIKE '<pattern>' ]\n  [ IN\n      {\n        ACCOUNT                  |\n\n        DATABASE                 |\n        DATABASE <database_name> |\n\n        SCHEMA                   |\n        SCHEMA <schema_name>     |\n        <schema_name>\n      }\n  ]\n  [ STARTS WITH '<name_string>' ]",
    "examples": [
        {
            "code": "USE SCHEMA governance.dmfs;\n\nSHOW DATA METRIC FUNCTIONS;"
        },
        {
            "code": "+--------------------------+------------------------+-------------+------------+--------------+---------+-------------------+-------------------+--------------------------------------------------------------------------------------------+-----------------------+--------------+-------------------+----------------------+-----------+----------------------+----------+---------------+----------------+\n| created_on               | name                   | schema_name | is_builtin | is_aggregate | is_ansi | min_num_arguments | max_num_arguments | arguments                                                                                  | description           | catalog_name | is_table_function | valid_for_clustering | is_secure | is_external_function | language | is_memoizable | is_data_metric |\n+--------------------------+------------------------+-------------+------------+--------------+---------+-------------------+-------------------+--------------------------------------------------------------------------------------------+-----------------------+--------------+-------------------+----------------------+-----------+----------------------+----------+---------------+----------------+\n| 2023-12-11T23:30:02.785Z | COUNT_POSITIVE_NUMBERS | DMFS        | N          | N            | N       | 1                 | 1                 | \"COUNT_POSITIVE_NUMBERS(TABLE(NUMBER, NUMBER, NUMBER)) RETURNS NUMBER\"                     | user-defined function | GOVERNANCE   | N                 | N                    | N         | N                    | SQL      | N             | Y              |\n+--------------------------+------------------------+-------------+------------+--------------+---------+-------------------+-------------------+--------------------------------------------------------------------------------------------+-----------------------+--------------+-------------------+----------------------+-----------+----------------------+----------+---------------+----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/classes/classification/commands/show-classification",
    "title": "SHOW SNOWFLAKE.ML.CLASSIFICATION",
    "description": "Lists all classification models.",
    "syntax": "{\n  SHOW SNOWFLAKE.ML.CLASSIFICATION           |\n  SHOW SNOWFLAKE.ML.CLASSIFICATION INSTANCES\n}\n                                 [ LIKE <pattern> ]\n                                 [ IN\n                                     {\n                                         ACCOUNT                  |\n\n                                         DATABASE                 |\n                                         DATABASE <database_name> |\n\n                                         SCHEMA                   |\n                                         SCHEMA <schema_name>     |\n                                         <schema_name>\n                                      }\n                                  ]",
    "examples": [
        {
            "code": "{\n  SHOW SNOWFLAKE.ML.CLASSIFICATION           |\n  SHOW SNOWFLAKE.ML.CLASSIFICATION INSTANCES\n}\n                                 [ LIKE <pattern> ]\n                                 [ IN\n                                     {\n                                         ACCOUNT                  |\n\n                                         DATABASE                 |\n                                         DATABASE <database_name> |\n\n                                         SCHEMA                   |\n                                         SCHEMA <schema_name>     |\n                                         <schema_name>\n                                      }\n                                  ]"
        }
    ],
    "usage_notes": "The order of results is not guaranteed."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-replication-accounts",
    "title": "SHOW REPLICATION ACCOUNTS",
    "description": "Lists all the accounts in your organization that are enabled for replication and indicates the region in\nwhich each account is located.",
    "syntax": "SHOW REPLICATION ACCOUNTS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW REPLICATION ACCOUNTS LIKE 'myaccount%';"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "Only account administrators (users with the ACCOUNTADMIN role) can execute this SQL command.\nReturns results only when an account administrator (user with the ACCOUNTADMIN role) executes the command in a replication-enabled\naccount.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-authentication-policies",
    "title": "SHOW AUTHENTICATION POLICIES",
    "description": "Lists authentication policy information, including the creation date, database and\nschema names, owner, and any available comments.",
    "syntax": "SHOW AUTHENTICATION POLICIES\n  [ LIKE '<pattern>' ]\n  [ IN\n       {\n         ACCOUNT                                         |\n\n         DATABASE                                        |\n         DATABASE <database_name>                        |\n\n         SCHEMA                                          |\n         SCHEMA <schema_name>                            |\n\n         APPLICATION <application_name>                  |\n         APPLICATION PACKAGE <application_package_name>  |\n       }\n    |\n    ON\n       {\n         ACCOUNT           |\n         USER <user_name>  |\n       }\n  ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> ]",
    "examples": [
        {
            "code": "SHOW AUTHENTICATION POLICIES;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        },
        {
            "name": "[   ON   ...   ]",
            "description": "Lists the policies that are effective on the specified object. This command considers precedence.\nFor example, listing policies on a user will show the account or built-in policy that is effective\nfor the user if there is no policy set specifically on the user. Specify one of the following: Returns policies effective on the account. Returns policies effective on the specified user."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns policies effective on the account."
        },
        {
            "name": "USER   user_name",
            "description": "Returns policies effective on the specified user."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned. The actual number of rows returned might be less than the specified limit. For\nexample, the number of existing objects is less than the specified limit. Default: No value (no limit is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/classes/custom_classifier/commands/show-custom-classifiers",
    "title": "SHOW CUSTOM_CLASSIFIER",
    "description": "Fully qualified name: SNOWFLAKE.DATA_PRIVACY.CUSTOM_CLASSIFIER",
    "syntax": "{\n  SHOW SNOWFLAKE.DATA_PRIVACY.CUSTOM_CLASSIFIER           |\n  SHOW SNOWFLAKE.DATA_PRIVACY.CUSTOM_CLASSIFIER INSTANCES\n}\n  [ LIKE <pattern> ]\n  [ IN\n    {\n      ACCOUNT                  |\n\n      DATABASE                 |\n      DATABASE <database_name> |\n\n      SCHEMA                   |\n      SCHEMA <schema_name>     |\n      <schema_name>\n    }\n  ]",
    "examples": [
        {
            "code": "SHOW SNOWFLAKE.DATA_PRIVACY.CUSTOM_CLASSIFIER;"
        },
        {
            "code": "+----------------------------------+---------------+---------------+-------------+-----------------+---------+-------------+\n| created_on                       | name          | database_name | schema_name | current_version | comment | owner       |\n+----------------------------------+---------------+---------------+-------------+-----------------+---------+-------------+\n| 2023-09-08 07:00:00.123000+00:00 | MEDICAL_CODES | DATA          | CLASSIFIERS | 1.0             | None    | DATA_OWNER  |\n+----------------------------------+---------------+---------------+-------------+-----------------+---------+-------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The order of results is not guaranteed."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-release-directives",
    "title": "SHOW RELEASE DIRECTIVES",
    "description": "Lists the release directives defined for an application package in the Native Apps Framework.",
    "syntax": "SHOW RELEASE DIRECTIVES [ LIKE '<pattern>' ]\n  IN APPLICATION PACKAGE <name>",
    "examples": [
        {
            "code": "SHOW RELEASE DIRECTIVES IN APPLICATION PACKAGE hello_snowflake_package;"
        },
        {
            "code": "+---------+-------------+---------------------------------+-------------------------------+---------+-------+-------------------------------+------------------------+--------------------------+----------------+-------------------------------+\n| name    | target_type | target_name                     | created_on                    | version | patch | modified_on                   | active_regions         | pending_regions          | release_status | deployed_on                   |\n|---------+-------------+---------------------------------+-------------------------------+---------+-------+-------------------------------+------------------------+--------------------------+----------------+-------------------------------+\n| DEFAULT | DEFAULT     | NULL                            | 2023-04-02 14:55:17.304 -0700 | V2      |     0 | 2023-04-02 15:47:08.673 -0700 | PUBLIC.AWS_AP_SOUTH_1  | PUBLIC.AWS_AP_SOUTH_1    | IN PROGRESS    |                               |\n| NEW_RD  | ACCOUNT     | [PROVIDER_DEV.PROVIDER_AWS]     | 2023-04-02 16:30:44.443 -0700 | V1      |     1 | 2023-04-03 07:10:42.428 -0700 | ALL                    |                          | DEPLOYED       | 2023-04-03 07:10:42.428 -0700 |         |\n+---------+-------------+---------------------------------+-------------------------------+---------+-------+-------------------------------+------------------------+--------------------------+----------------+-------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "name",
            "description": "Specifies the identifier of the application package."
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by the version name specified in the application\npackage. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "This command requires either the OWNERSHIP privilege on the application, or either the MANAGE RELEASES or the MANAGE VERSIONS privilege\non the application package.\nThe command returns results for release directives that match the privileges granted to the role that executes this command.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-tables",
    "title": "SHOW TABLES",
    "description": "Lists the tables for which you have access privileges, including dropped tables that are still within the Time Travel retention period\nand, therefore, can be undropped. The command can be used to list tables for the current/specified database or schema, or across your\nentire account.",
    "syntax": "SHOW [ TERSE ] TABLES [ HISTORY ] [ LIKE '<pattern>' ]\n                                  [ IN\n                                        {\n                                          ACCOUNT                                         |\n\n                                          DATABASE                                        |\n                                          DATABASE <database_name>                        |\n\n                                          SCHEMA                                          |\n                                          SCHEMA <schema_name>                            |\n                                          <schema_name>\n\n                                          APPLICATION <application_name>                  |\n                                          APPLICATION PACKAGE <application_package_name>  |\n                                        }\n                                  ]\n                                  [ STARTS WITH '<name_string>' ]\n                                  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW TERSE TABLES IN tpch_sf1 STARTS WITH 'LINE';"
        },
        {
            "code": "+-------------------------------+----------+-------+-----------------------+-------------+\n| created_on                    | name     | kind  | database_name         | schema_name |\n|-------------------------------+----------+-------+-----------------------+-------------|\n| 2016-07-08 13:41:59.960 -0700 | LINEITEM | TABLE | SNOWFLAKE_SAMPLE_DATA | TPCH_SF1    |\n+-------------------------------+----------+-------+-----------------------+-------------+"
        },
        {
            "code": "SHOW TERSE TABLES LIKE '%PART%' IN tpch_sf1;"
        },
        {
            "code": "+-------------------------------+-----------+-------+-----------------------+-------------+\n| created_on                    | name      | kind  | database_name         | schema_name |\n|-------------------------------+-----------+-------+-----------------------+-------------|\n| 2016-07-08 13:41:59.960 -0700 | JPART     | TABLE | SNOWFLAKE_SAMPLE_DATA | TPCH_SF1    |\n| 2016-07-08 13:41:59.960 -0700 | JPARTSUPP | TABLE | SNOWFLAKE_SAMPLE_DATA | TPCH_SF1    |\n| 2016-07-08 13:41:59.960 -0700 | PART      | TABLE | SNOWFLAKE_SAMPLE_DATA | TPCH_SF1    |\n| 2016-07-08 13:41:59.960 -0700 | PARTSUPP  | TABLE | SNOWFLAKE_SAMPLE_DATA | TPCH_SF1    |\n+-------------------------------+-----------+-------+-----------------------+-------------+"
        },
        {
            "code": "SHOW TERSE TABLES IN tpch_sf1 LIMIT 3 FROM 'J';"
        },
        {
            "code": "+-------------------------------+-----------+-------+-----------------------+-------------+\n| created_on                    | name      | kind  | database_name         | schema_name |\n|-------------------------------+-----------+-------+-----------------------+-------------|\n| 2016-07-08 13:41:59.960 -0700 | JCUSTOMER | TABLE | SNOWFLAKE_SAMPLE_DATA | TPCH_SF1    |\n| 2016-07-08 13:41:59.960 -0700 | JLINEITEM | TABLE | SNOWFLAKE_SAMPLE_DATA | TPCH_SF1    |\n| 2016-07-08 13:41:59.960 -0700 | JNATION   | TABLE | SNOWFLAKE_SAMPLE_DATA | TPCH_SF1    |\n+-------------------------------+-----------+-------+-----------------------+-------------+"
        },
        {
            "code": "CREATE OR REPLACE TABLE test_show_tables_history(c1 NUMBER);\n\nDROP TABLE test_show_tables_history;"
        },
        {
            "code": "SHOW TABLES HISTORY LIKE 'test_show_tables_history';"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Optionally returns only a subset of the output columns: created_on name kind The kind column value is always TABLE. database_name schema_name Default: No value (all columns are included in the output)"
        },
        {
            "name": "HISTORY",
            "description": "Optionally includes dropped tables that have not yet been purged (i.e. they are still within their respective Time Travel retention\nperiods). If multiple versions of a dropped table exist, the output displays a row for each version. The output also includes an\nadditional dropped_on column, which displays: Date and timestamp (for dropped tables). NULL (for active tables). Default: No value (dropped tables are not included in the output)"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "If an account (or database or schema) has a large number of tables, then searching the entire account (or table or schema)\ncan consume a significant amount of compute resources.\nIn the output, results are sorted by database name, schema name, and then table name. This means results for a database\ncan contain tables from multiple schemas and might break pagination. In order for pagination to work as expected, you\nmust execute the SHOW TABLES command for a single schema. You can use the IN SCHEMA schema_name parameter to\nthe SHOW TABLES command. Alternatively, you can use the schema in the current context by executing a USE SCHEMA command\nbefore executing a SHOW TABLES command.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-listings",
    "title": "SHOW LISTINGS",
    "description": "Lists the listings that you have privileges to access.\nShows only listings where the user running the command has any of USAGE, MODIFY, or OWNERSHIP against the listing.",
    "syntax": "SHOW LISTINGS [ LIKE '<pattern>' ]\n              [ STARTS WITH '<name_string>' ]\n              [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW LISTINGS LIKE 'MYLISTING%'"
        },
        {
            "code": "SHOW LISTINGS LIMIT 10 FROM 'MYLISTING%'"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "To SHOW a listing, you must be using a role that has USAGE, MODIFY, or OWNERSHIP privilege on the listing.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-dbt-projects",
    "title": "SHOW DBT PROJECTS",
    "description": "Lists the dbt project objects for which you have access privileges.",
    "syntax": "SHOW DBT PROJECTS [ LIKE '<pattern>' ]\n           [ IN\n                {\n                  ACCOUNT                  |\n\n                  DATABASE                 |\n                  DATABASE <database_name> |\n\n                  SCHEMA                   |\n                  SCHEMA <schema_name>     |\n                  <schema_name>\n                }\n           ]\n           [ STARTS WITH '<name_string>' ]\n           [ LIMIT <rows> ]\n           [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW DBT PROJECTS IN DATABASE my_db;"
        },
        {
            "code": "+---------------------+---------------+-------------+-------------------------------+-------------------------------+--------------+---------+--------------+\n|        name         | database_name | schema_name |          created_on           |          updated_on           |    owner     | comment | default_args |\n+---------------------+---------------+-------------+-------------------------------+-------------------------------+--------------+---------+--------------+\n| COSMOS              | MY_DB         | PUBLIC      | 2025-04-29 17:21:25.413 -0700 | 2025-04-29 17:21:29.462 -0700 | ACCOUNTADMIN |         |              |\n| COSMOS2             | MY_DB         | PUBLIC      | 2025-05-19 14:30:55.204 -0700 | 2025-05-19 14:30:57.106 -0700 | ACCOUNTADMIN |         |              |\n| JAFFLE_SHOP2        | MY_DB         | PUBLIC      | 2025-05-02 16:10:49.577 -0700 | 2025-05-02 16:10:51.844 -0700 | ACCOUNTADMIN |         |              |\n| Jaffle_shop         | MY_DB         | PUBLIC      | 2025-03-25 12:36:16.574 -0700 | 2025-03-25 12:36:17.833 -0700 | ACCOUNTADMIN |         |              |\n| MY_DB_PROJECT       | MY_DB         | PUBLIC      | 2025-05-02 13:42:36.306 -0700 | 2025-05-02 13:42:38.584 -0700 | ACCOUNTADMIN |         |              |\n| MY_SHOP             | MY_DB         | PUBLIC      | 2025-04-29 17:15:27.295 -0700 | 2025-04-29 17:15:28.709 -0700 | ACCOUNTADMIN |         |              |\n| jaffle2             | MY_DB         | PUBLIC      | 2025-04-18 09:34:54.804 -0700 | 2025-04-18 09:34:57.416 -0700 | ACCOUNTADMIN |         |              |\n| task_query_analysis | MY_DB         | PUBLIC      | 2025-04-21 20:50:37.579 -0700 | 2025-04-21 20:50:39.239 -0700 | ACCOUNTADMIN |         |              |\n+---------------------+---------------+-------------+-------------------------------+-------------------------------+--------------+---------+--------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned. The actual number of rows returned might be less than the specified limit. For\nexample, the number of existing objects is less than the specified limit. Default: No value (no limit is applied to the output)."
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-replication-databases",
    "title": "SHOW REPLICATION DATABASES",
    "description": "Lists all the primary and secondary databases (that is to say, all the databases for which replication has been enabled) in your account\nand indicates the region in which each account is located.",
    "syntax": "SHOW REPLICATION DATABASES [ LIKE '<pattern>' ]\n                           [ WITH PRIMARY <account_identifier>.<primary_db_name> ]",
    "examples": [
        {
            "code": "SHOW REPLICATION DATABASES LIKE 'mydb%';"
        },
        {
            "code": "SHOW REPLICATION DATABASES WITH PRIMARY myorg.account1.mydb1;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "WITH   PRIMARY   {account_identifier}.{primary_db_name}",
            "description": "Specifies the scope of the command, which determines whether the command lists records only for the specified primary database.\nThe account_identifier can be in the form org_name . account_name or snowflake_region . account_locator .\nSee Account identifiers for replication and failover for details."
        }
    ],
    "usage_notes": "Returns results for a role with any privilege on the database (for example, USAGE or MONITOR).\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-feature-policies",
    "title": "SHOW FEATURE POLICIES",
    "description": "Lists the feature policies for which you have access privileges.",
    "syntax": "SHOW FEATURE POLICIES\n  [ IN\n    {\n      ACCOUNT                                        |\n      APPLICATION {app_name}                         |\n      APPLICATION PACKAGE {app_package_name}         |\n      DATABASE {database_name}                       |\n      SCHEMA {schema_name}                           |\n    }\n  ]\n\nSHOW FEATURE POLICIES ON ACCOUNT\n\nSHOW FEATURE POLICIES ON APPLICATION <application_name>",
    "examples": [
        {
            "code": "SHOW FEATURE POLICIES;"
        },
        {
            "code": "SHOW FEATURE POLICIES IN APPLICATION hello_snowflake_app;"
        },
        {
            "code": "SHOW FEATURE POLICIES ON ACCOUNT"
        }
    ],
    "parameters": [
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns information about feature policies created in the specified account. Returns information about feature policies created in the specified app. Returns information about feature policies created in the specified application package. Returns information about feature policies created in the specified database. Returns information about feature policies created in the specified schema."
        },
        {
            "name": "ON   ACCOUNT",
            "description": "Shows the feature policies that have been applied to the current account."
        },
        {
            "name": "ON   APPLICATION   app_name",
            "description": "Shows the feature policies that have been applied on the specified app. This command also\ndisplays feature policies that are inherited from those applied on the account."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns information about feature policies created in the specified account."
        },
        {
            "name": "APPLICATION   app_name",
            "description": "Returns information about feature policies created in the specified app."
        },
        {
            "name": "APPLICATION   PACKAGE   app_package_name",
            "description": "Returns information about feature policies created in the specified application package."
        },
        {
            "name": "DATABASE   database_name",
            "description": "Returns information about feature policies created in the specified database."
        },
        {
            "name": "SCHEMA   schema_name",
            "description": "Returns information about feature policies created in the specified schema."
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-catalog-integrations",
    "title": "SHOW CATALOG INTEGRATIONS",
    "description": "Lists the catalog integrations in your account.\nThe output returns integration metadata and properties.",
    "syntax": "SHOW CATALOG INTEGRATIONS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW CATALOG INTEGRATIONS;"
        },
        {
            "code": "SHOW CATALOG INTEGRATIONS LIKE 'demo%';"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-network-rules",
    "title": "SHOW NETWORK RULES",
    "description": "Lists all network rules defined in the system.",
    "syntax": "SHOW NETWORK RULES [ LIKE '<pattern>' ]\n                   [ IN { ACCOUNT | DATABASE [ <db_name> ] | [ SCHEMA ] [ <schema_name> ] } ]\n                   [ STARTS WITH '<name_string>' ]\n                   [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW NETWORK RULES;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   ACCOUNT   |   [   DATABASE   ]   db_name   |   [   SCHEMA   ]   schema_name",
            "description": "Optionally specifies the scope of the command, which determines whether the command lists records only for the current/specified\ndatabase or schema, or across your entire account: The DATABASE or SCHEMA keyword is not required; you can set the scope by specifying only the database or schema name.\nLikewise, the database or schema name is not required if the session currently has a database in use: If DATABASE or SCHEMA is specified without a name and the session does not currently have a database in use, the\nparameter has no effect on the output. If SCHEMA is specified with a name and the session does not currently have a database in use, the schema name must be fully qualified with the database name (e.g. testdb.testschema ). Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-join-policies",
    "title": "SHOW JOIN POLICIES",
    "description": "Lists information about existing join policies, including the creation date, database and schema names, owner, and any available comments.",
    "syntax": "SHOW JOIN POLICIES  [ LIKE '<pattern>' ]\n                           [ IN\n                               {\n                                 ACCOUNT |\n                                 DATABASE [ <database_name> ] |\n                                 SCHEMA [ <schema_name> ] |\n                               }\n                           ]",
    "examples": [
        {
            "code": "SHOW JOIN POLICIES  [ LIKE '<pattern>' ]\n                           [ IN\n                               {\n                                 ACCOUNT |\n                                 DATABASE [ <database_name> ] |\n                                 SCHEMA [ <schema_name> ] |\n                               }\n                           ]"
        },
        {
            "code": "SHOW JOIN POLICIES;"
        },
        {
            "code": "+-------------------------------+------+---------------+----------------+-------------+--------------+---------+-----------------+---------+\n| created_on                    | name | database_name | schema_name    | kind        | owner        | comment | owner_role_type | options |\n|-------------------------------+------+---------------+----------------+-------------+--------------+---------+-----------------+---------|\n| 2024-12-04 15:15:49.591 -0800 | JP1  | POLICY1_DB    | POLICY1_SCHEMA | JOIN_POLICY | POLICY1_ROLE |         | ROLE            |         |\n+-------------------------------+------+---------------+----------------+-------------+--------------+---------+-----------------+---------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-stages",
    "title": "SHOW STAGES",
    "description": "Lists all the stages for which you have access privileges. This command can be used to list the stages for a specified schema or\ndatabase (or the current schema/database for the session), or your entire account.",
    "syntax": "SHOW STAGES [ LIKE '<pattern>' ]\n            [ IN\n                 {\n                   ACCOUNT                                         |\n\n                   DATABASE                                        |\n                   DATABASE <database_name>                        |\n\n                   SCHEMA                                          |\n                   SCHEMA <schema_name>                            |\n                   <schema_name>\n\n                   APPLICATION <application_name>                  |\n                   APPLICATION PACKAGE <application_package_name>  |\n                 }\n            ]",
    "examples": [
        {
            "code": "SHOW STAGES [ LIKE '<pattern>' ]\n            [ IN\n                 {\n                   ACCOUNT                                         |\n\n                   DATABASE                                        |\n                   DATABASE <database_name>                        |\n\n                   SCHEMA                                          |\n                   SCHEMA <schema_name>                            |\n                   <schema_name>\n\n                   APPLICATION <application_name>                  |\n                   APPLICATION PACKAGE <application_package_name>  |\n                 }\n            ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-dynamic-tables",
    "title": "SHOW DYNAMIC TABLES",
    "description": "Lists the dynamic tables for which you have access privileges. The command can be used to list dynamic\ntables for the current/specified database or schema, or across your entire account.",
    "syntax": "SHOW DYNAMIC TABLES [ LIKE '<pattern>' ]\n                    [ IN\n                      {\n                           ACCOUNT              |\n\n                           DATABASE             |\n                           DATABASE <db_name>   |\n\n                           SCHEMA               |\n                           SCHEMA <schema_name> |\n                           <schema_name>\n                      }\n                    ]\n                    [ STARTS WITH '<name_string>' ]\n                    [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW DYNAMIC TABLES LIKE 'product_%' IN SCHEMA mydb.myschema;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "To SHOW a dynamic table, you must be using a role that has MONITOR privilege on the table.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-channels",
    "title": "SHOW CHANNELS",
    "description": "Lists the Snowpipe Streaming channels for which you have access privileges. This command can be used to list the channels for a specified table, database or schema\n(or the current database/schema for the session), or your entire account.",
    "syntax": "SHOW CHANNELS [ LIKE '<pattern>' ]\n           [ IN\n                {\n                  ACCOUNT                  |\n\n                  DATABASE                 |\n                  DATABASE <database_name> |\n\n                  SCHEMA                   |\n                  SCHEMA <schema_name>     |\n                  <schema_name>\n\n                  TABLE                    |\n                  TABLE <table_name>\n                }\n           ]",
    "examples": [
        {
            "code": "use database mydb;\n\nshow channels;\n\n+-------------------------------+-----------+---------------+------------------+------------------------+------------------+---------------+--------------+\n| created_on                    | name      | database_name | schema_name      | table_name             | client_sequencer | row_sequencer | offset_token |\n|-------------------------------+-----------+---------------+------------------+------------------------+------------------+---------------+--------------+\n| 2023-05-05 17:13:17.579 -0700 | CHANNEL8  | TEST_DB1      | STREAMING_INGEST | STREAMING_INGEST_TABLE | 7                | 1             | 0            |\n|                               |           |               |                  |                        |                  |               |              |\n+-------------------------------+-----------+---------------+------------------+------------------------+------------------+---------------+--------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the table. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "TABLE ,  .   TABLE   table_name",
            "description": "Returns records for the table."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-hybrid-tables",
    "title": "SHOW HYBRID TABLES",
    "description": "Lists the hybrid tables for which you have access privileges.",
    "syntax": "SHOW [ TERSE ] [ HYBRID ] TABLES [ LIKE '<pattern>' ]\n                                 [ IN { ACCOUNT | DATABASE [ <db_name> ] | SCHEMA [ <schema_name> ] } ]\n                                 [ STARTS WITH '<name_string>' ]\n                                 [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW HYBRID TABLES LIKE 'product_%' IN mydb.myschema;"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Optionally returns only a subset of the output columns: created_on name kind The kind column value is always HYBRID TABLE. database_name schema_name Default: No value (all columns are included in the output)"
        },
        {
            "name": "HYBRID",
            "description": "Returns hybrid tables only."
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN    ACCOUNT   |   DATABASE   [   db_name   ]   |   SCHEMA   [   schema_name   ]",
            "description": "Optionally specifies the scope of the command, which determines whether the command lists records only for the\ncurrent/specified database or schema, or across your entire account. If you specify the keyword ACCOUNT , then the command retrieves records for all schemas in all databases\nof the current account. If you specify the keyword DATABASE , then: If you specify a db_name , then the command retrieves records for all schemas of the specified database. If you do not specify a db_name , then: If there is a current database, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and schemas in the account. If you specify the keyword SCHEMA , then: If you specify a qualified schema name (e.g. my_database.my_schema ), then the command\nretrieves records for the specified database and schema. If you specify an unqualified schema_name , then: If there is a current database, then the command retrieves records for the specified schema in the current database. If there is no current database, then the command displays the error SQL compilation error: Object does not exist, or operation cannot be performed . If you do not specify a schema_name , then: If there is a current database, then: If there is a current schema, then the command retrieves records for the current schema in the current database. If there is no current schema, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and all schemas in the account. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default. The command returns the objects you have privileges to view in the current\ndatabase. No database: ACCOUNT is the default. The command returns the objects you have privileges to view in your account."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "If an account (or database or schema) has a large number of hybrid tables, then searching the entire account (or database or\nschema) can consume a significant amount of compute resources.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-warehouses",
    "title": "SHOW WAREHOUSES",
    "description": "Lists all the virtual warehouses in your account for which you have access privileges.",
    "syntax": "SHOW WAREHOUSES\n  [ LIKE '<pattern>' ]\n  [ WITH PRIVILEGES <objectPrivilege> [ , <objectPrivilege> [ , ... ] ] ]",
    "examples": [
        {
            "code": "SHOW WAREHOUSES LIKE 'test%';"
        },
        {
            "coden| name          | state     | type               | size    | min_cluster_count | max_cluster_count | started_clusters | running | queued | is_default | is_current | auto_suspend | auto_resume | available | provisioning | quiescing | other | created_on                    | resumed_on                    | updated_on                    | owner        | comment | enable_query_acceleration | query_acceleration_max_scale_factor | resource_monitor | actives | pendings | failed | suspended | uuid     | scaling_policy | owner_role_type | resource_constraint |\n||---------------------+\n| TEST1         | SUSPENDED | STANDARD           | Medium  |                 1 |                 1 |                0 |       0 |      0 | N          | N          |          600 | true        |           |              |           |       | 2023-01-27 14:57:07.768 -0800 | 2023-05-10 16:17:49.258 -0700 | 2023-05-10 16:17:49.258 -0700 | MY_ROLE      |         | true                      |                                   8 | null             |       0 |        0 |      0 |         4 | 76064    | STANDARD       | ROLE            | NULL                +\n| TEST2         | SUSPENDED | STANDARD           | X-Small |                 1 |                 1 |                0 |       0 |      0 | N          | N          |          600 | true        |           |              |           |       | 2023-01-27 14:57:07.953 -0800 | 1969-12-31 16:00:00.000 -0800 | 2023-01-27 14:57:08.356 -0800 | MY_ROLE      |         | true                      |                                  16 | MYTEST_RM        |       0 |        0 |      0 |         1 | 76116    | STANDARD       |  ROLE           | NULL                +\n| TEST3         | SUSPENDED | STANDARD           | Small   |                 1 |                 1 |                0 |       0 |      0 | N          | N          |          600 | true        |           |              |           |       | 2023-08-08 10:26:45.534 -0700 | 2023-08-08 10:26:45.681 -0700 | 2023-08-08 10:26:45.681 -0700 | MY_ROLE      |         | false                     |                                   8 | null             |       0 |        0 |      0 |         2 | 19464517 | STANDARD       | ROLE            | NULL                +\n| TEST4         | RESUMING  | SNOWPARK-OPTIMIZED | Large   |                 1 |                 1 |                0 |       0 |      0 | N          | Y          |          600 | true        |           |              |           |       | 2023-09-21 17:29:58.165 -0700 | 2023-09-21 17:29:58.165 -0700 | 2023-09-21 17:29:58.207 -0700 | MY_ROLE      |         | false                     |                                   8 | null             |       0 |        0 |      0 |         0 | 19464585 | STANDARD       | ROLE            | MEMORY_16X_X86      +\n
        },
        {
            "code": "SHOW WAREHOUSES WITH PRIVILEGES MODIFY, OPERATE;"
        },
        {
            "coden| name                         | state     | type     | size    | min_cluster_count | max_cluster_count | started_clusters | running | queued | is_default | is_current | auto_suspend | auto_resume | available | provisioning | quiescing | other | created_on                    | resumed_on                    | updated_on                    | owner        | comment                                         | enable_query_acceleration | query_acceleration_max_scale_factor | resource_monitor | actives | pendings | failed | suspended | uuid     | scaling_policy | owner_role_type |\n|n| TEST_WH                      | SUSPENDED | STANDARD | X-Small |                 1 |                 1 |                0 |       0 |      0 | Y          | Y          |          600 | true        |           |              |           |       | 2023-01-27 14:57:07.768 -0800 | 2024-07-30 13:39:24.118 -0700 | 2024-07-30 13:39:24.118 -0700 | TEST_ROLE    |                                                 | true                      |                                  32 | TEST_RM          |       0 |        0 |      0 |         1 | 76056    | STANDARD       | ROLE            | NULL                +\n| SNOWPARK_DEMO                | SUSPENDED | STANDARD | X-Large |                 1 |                 1 |                0 |       0 |      0 | N          | N          |          600 | true        |           |              |           |       | 2023-01-27 14:57:07.903 -0800 | 2023-04-10 11:47:03.146 -0700 | 2023-04-10 11:47:03.146 -0700 | ACCOUNTADMIN | Created by straut for Snowpark quickstart       | false                     |                                   8 | null             |       0 |        0 |      0 |        16 | 76104    | STANDARD       | ROLE            | NULL                +\n| TASTY_DEV_WH                 | SUSPENDED | STANDARD | X-Small |                 1 |                 1 |                0 |       0 |      0 | N          | N          |           60 | true        |           |              |           |       | 2023-10-25 16:25:43.681 -0700 | 2023-10-25 16:25:43.681 -0700 | 2023-10-25 16:25:43.711 -0700 | SYSADMIN     | developer warehouse for tasty bytes             | false                     |                                   8 | null             |       0 |        0 |      0 |         1 | 19464633 | STANDARD       | ROLE            | NULL                +\n| TB_DOCS_WH                   | SUSPENDED | STANDARD | X-Small |                 1 |                 1 |                0 |       0 |      0 | N          | N          |           60 | true        |           |              |           |       | 2024-07-24 15:02:32.172 -0700 | 2024-07-24 15:33:30.502 -0700 | 2024-07-24 15:33:30.502 -0700 | SYSADMIN     | developer warehouse for tasty bytes             | false                     |                                   8 | null             |       0 |        0 |      0 |         1 | 19465097 | STANDARD       | ROLE            | NULL                +\n
        },
        {
            "code": "CREATE OR REPLACE PROCEDURE started_and_suspended_warehouses()\n  RETURNS TABLE(name VARCHAR, status VARCHAR, type VARCHAR, size VARCHAR)\n  LANGUAGE SQL\n  AS\n  $$\n    DECLARE\n      res RESULTSET;\n    BEGIN\n      SHOW WAREHOUSES;\n      res := (SELECT \"name\" name, \"state\" state, \"type\" type, \"size\" size\n        FROM TABLE(RESULT_SCAN(LAST_QUERY_ID(-1)))\n        WHERE \"state\" IN ('STARTED','SUSPENDED')\n        ORDER BY \"state\", \"name\");\n      RETURN TABLE(res);\n    END;\n  $$\n  ;\n\nCALL started_and_suspended_warehouses();"
        },
        {
            "code": "+------------------------------+-----------+--------------------+---------+\n| NAME                         | STATUS    | TYPE               | SIZE    |\n|------------------------------+-----------+--------------------+---------|\n| COMPUTE_WH                   | STARTED   | STANDARD           | X-Small |\n| DEFAULT_SIZE                 | SUSPENDED | STANDARD           | Small   |\n| DEFAULT_SIZE_2               | SUSPENDED | STANDARD           | X-Small |\n| MEDIUM                       | SUSPENDED | SNOWPARK-OPTIMIZED | Medium  |\n| PRIV_WH                      | SUSPENDED | STANDARD           | X-Small |\n| SYSTEM$STREAMLIT_NOTEBOOK_WH | SUSPENDED | STANDARD           | X-Small |\n| XSMALL                       | SUSPENDED | STANDARD           | Medium  |\n+------------------------------+-----------+--------------------+---------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "WITH   PRIVILEGES   object_privilege   [   ,   object_privilege   [   ,   ...   ]   ]",
            "description": "Optionally limits rows to objects for which the active role for the current\nuser has been granted all of the specified privileges in the list on the object. If a CREATE <object> privilege is included in the privileges list, the command excludes objects for which secondary roles have\nbeen granted privileges. This is because only the primary role has the authorization to create objects. For more information, see Authorization through primary role and secondary roles ."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-password-policies",
    "title": "SHOW PASSWORD POLICIES",
    "description": "Lists password policy information, including the creation date, database and schema names, owner, and any available comments.",
    "syntax": "SHOW PASSWORD POLICIES [ LIKE '<pattern>' ]\n                       [ IN\n                            {\n                              ACCOUNT                                         |\n\n                              DATABASE                                        |\n                              DATABASE <database_name>                        |\n\n                              SCHEMA                                          |\n                              SCHEMA <schema_name>                            |\n\n                              APPLICATION <application_name>                  |\n                              APPLICATION PACKAGE <application_package_name>  |\n                            }\n                         |\n                         ON\n                            {\n                              ACCOUNT           |\n                              USER <user_name>  |\n                            }\n                       ]\n                       [ STARTS WITH '<name_string>' ]\n                       [ LIMIT <rows> ]",
    "examples": [
        {
            "code": "SHOW PASSWORD POLICIES [ LIKE '<pattern>' ]\n                       [ IN\n                            {\n                              ACCOUNT                                         |\n\n                              DATABASE                                        |\n                              DATABASE <database_name>                        |\n\n                              SCHEMA                                          |\n                              SCHEMA <schema_name>                            |\n\n                              APPLICATION <application_name>                  |\n                              APPLICATION PACKAGE <application_package_name>  |\n                            }\n                         |\n                         ON\n                            {\n                              ACCOUNT           |\n                              USER <user_name>  |\n                            }\n                       ]\n                       [ STARTS WITH '<name_string>' ]\n                       [ LIMIT <rows> ]"
        },
        {
            "code": "SHOW PASSWORD POLICIES;"
        },
        {
            "code": "+---------------------------------+------------------------+------------+------------------------------------+---------+\n| CREATED_ON                      | NAME                   | OWNER      | COMMENT                            | options |\n+---------------------------------+------------------------+------------+------------------------------------+---------+\n| Fri, 10 Dec 2021 00:00:00 -0700 | PASSWORD_POLICY_PROD_1 | PROD_ADMIN | production account password policy | \"\"      |\n+---------------------------------+------------------------+------------+------------------------------------+---------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        },
        {
            "name": "[   ON   ...   ]",
            "description": "Lists the policies that are effective on the specified object. This command considers precedence.\nFor example, listing policies on a user will show the account or built-in policy that is effective\nfor the user if there is no policy set specifically on the user. Specify one of the following: Returns policies effective on the account. Returns policies effective on the specified user."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns policies effective on the account."
        },
        {
            "name": "USER   user_name",
            "description": "Returns policies effective on the specified user."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned. The actual number of rows returned might be less than the specified limit. For\nexample, the number of existing objects is less than the specified limit. Default: No value (no limit is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-users",
    "title": "SHOW USERS",
    "description": "Lists all users in the system.",
    "syntax": "SHOW [ TERSE ] USERS\n  [ LIKE '<pattern>' ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW USERS;"
        },
        {
            "coden| name         | created_on                    | login_name    | display_name | first_name | last_name | email                  | mins_to_unlock | days_to_expiry | comment | disabled | must_change_password | snowflake_lock | default_warehouse | default_namespace | default_role | default_secondary_roles | ext_authn_duo | ext_authn_uid | mins_to_bypass_mfa | owner        | last_success_login            | expires_at_time | locked_until_time | has_password | has_rsa_public_key | type   | has_mfa | has_pat | has_federated_workload_authentication |\n||\n| MY_USER_NAME | 2020-04-28 12:24:38.722 -0700 | MY_LOGIN_NAME | Jane Smith   | Jane       | Smith     | jane.smith@example.com | NULL           | NULL           | NULL    | false    | false                | false          | MY_WAREHOUSE      | MY_DB.MY_SCHEMA   | MY_ROLE      | []                      | false         | NULL          | NULL               | ACCOUNTADMIN | 2025-06-12 15:02:22.783 -0700 | NULL            | NULL              | true         | true               | PERSON | true    | true    | false                                 |\n
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only the following output columns: name created_on display_name first_name last_name email org_identity comment has_password has_rsa_public_key type has_mfa has_pat has_federated_workload_authentication"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "If the account has more than 10,000 users, you can use the LIMIT … FROM …\nparameter to return smaller sets of users.\nFor example, you can run SHOW USERS LIMIT 10000 FROM my_user to return the next 10000 users starting from the user named\nmy_user.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-masking-policies",
    "title": "SHOW MASKING POLICIES",
    "description": "Lists masking policy information, including the creation date, database and schema names, owner, and any available comments.",
    "syntax": "SHOW MASKING POLICIES  [ LIKE '<pattern>' ]\n                       [ IN\n                            {\n                              ACCOUNT                                         |\n\n                              DATABASE                                        |\n                              DATABASE <database_name>                        |\n\n                              SCHEMA                                          |\n                              SCHEMA <schema_name>                            |\n                              <schema_name>\n\n                              APPLICATION <application_name>                  |\n                              APPLICATION PACKAGE <application_package_name>  |\n                            }\n                       ]",
    "examples": [
        {
            "code": "SHOW MASKING POLICIES  [ LIKE '<pattern>' ]\n                       [ IN\n                            {\n                              ACCOUNT                                         |\n\n                              DATABASE                                        |\n                              DATABASE <database_name>                        |\n\n                              SCHEMA                                          |\n                              SCHEMA <schema_name>                            |\n                              <schema_name>\n\n                              APPLICATION <application_name>                  |\n                              APPLICATION PACKAGE <application_package_name>  |\n                            }\n                       ]"
        },
        {
            "code": "SHOW MASKING POLICIES IN SCHEMA governance.policies;"
        },
        {
            "code": "+-------------------------------+------------+---------------+-------------+----------------+---------------+------------------------------+-----------------------------------+-----------------+\n| created_on                    | name       | database_name | schema_name | kind           | owner         | comment                      | options                           | owner_role_type |\n+-------------------------------+------------+---------------+-------------+----------------+---------------+------------------------------+-----------------------------------+-----------------+\n| 2022-08-13 16:59:59.733 +0000 | EMAIL_MASK | GOVERNANCE    | POLICIES    | MASKING_POLICY | MASKING_ADMIN | SPECIFY IN ROW ACCESS POLICY | {“EXEMPT_OTHER_POLICIES”: \"TRUE\"} | ROLE            |\n+-------------------------------+------------+---------------+-------------+----------------+---------------+------------------------------+-----------------------------------+-----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The OPTIONS column returns an empty string (that is, \"\") when the masking policy property EXEMPT_OTHER_POLICIES is set to\nFALSE.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-functions",
    "title": "SHOW FUNCTIONS",
    "description": "Lists all functions that you have privileges to access, including built-in, user-defined, and external functions.",
    "syntax": "SHOW FUNCTIONS [ LIKE '<pattern>' ]\n  [ IN\n    {\n      ACCOUNT                       |\n\n      CLASS <class_name>            |\n\n      DATABASE                      |\n      DATABASE <database_name>      |\n\n      SCHEMA                        |\n      SCHEMA <schema_name>          |\n      <schema_name>\n    }\n  ]",
    "examples": [
        {
            "code": "SHOW FUNCTIONS;"
        },
        {
            "code": "SHOW FUNCTIONS LIKE 'SQUARE';"
        },
        {
            "code": "------------+--------+-------------+------------+--------------+---------+-------------------+-------------------+----------------------------------------------------------------------+------------------------------------------------------------+----------+---------------+----------------+\n created_on | name   | schema_name | is_builtin | is_aggregate | is_ansi | min_num_arguments | max_num_arguments |                               arguments                              |                      description                           | language | is_memoizable | is_data_metric |\n------------+--------+-------------+------------+--------------+---------+-------------------+-------------------+----------------------------------------------------------------------+------------------------------------------------------------+----------+---------------+----------------+\n            | SQUARE |             | Y          | N            | Y       | 1                 | 1                 | SQUARE(NUMBER(38,0)) RETURN NUMBER(38,0), SQUARE(FLOAT) RETURN FLOAT | Compute the square of the input expression.                | SQL      | N             | N              |\n------------+--------+-------------+------------+--------------+---------+-------------------+-------------------+----------------------------------------------------------------------+------------------------------------------------------------+----------+---------------+----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the specified class ( class_name ). Returns records for the current database in use or a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully-qualified schema_name (e.g. db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "CLASS   class_name",
            "description": "Returns records for the specified class ( class_name )."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully-qualified schema_name (e.g. db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "If you specify CLASS, the command only returns the following columns:\nThe output of this command might include objects with names like SN_TEMP_OBJECT_<n> (where <n> is a number). These are\ntemporary objects that are created by the Snowpark library on behalf of the user.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-snapshots",
    "title": "SHOW SNAPSHOTS",
    "description": "Lists the snapshots for which you have access privileges.",
    "syntax": "SHOW SNAPSHOTS [ LIKE '<pattern>' ]\n               [ IN\n                   {\n                       ACCOUNT                  |\n\n                       DATABASE                 |\n                       DATABASE <database_name> |\n\n                       SCHEMA                   |\n                       SCHEMA <schema_name>     |\n                       <schema_name>            |\n                   }\n               ]\n               [ STARTS WITH '<name_string>' ]\n               [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW SNAPSHOTS;"
        },
        {
            "code": "+-------------+---------+---------------+-------------+----------------------------------------------------+-------------+----------+------+--------------+-----------+-----------------+-------------------------------+-------------------------------+---------------+\n| name        | state   | database_name | schema_name | service_name                                       | volume_name | instance | size | comment      | owner     | owner_role_type | created_on                    | updated_on                    | encryption    |\n|-------------+---------+---------------+-------------+----------------------------------------------------+-------------+----------+------+--------------+-----------+-----------------+-------------------------------+-------------------------------+---------------|\n| MY_SNAPSHOT | CREATED | TUTORIAL_DB   | DATA_SCHEMA | TUTORIAL_DB.DATA_SCHEMA.MY_SERVICE_WITH_EBS_VOLUME | block-vol1  | 0        |   10 | new snapshot | TEST_ROLE | ROLE            | 2024-05-09 21:36:58.502 -0700 | 2024-05-09 21:38:03.424 -0700 | SNOWFLAKE_SSE |\n+-------------+---------+---------------+-------------+----------------------------------------------------+-------------+----------+------+--------------+-----------+-----------------+-------------------------------+-------------------------------+---------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-semantic-views",
    "title": "SHOW SEMANTIC VIEWS",
    "description": "Lists the semantic views for which you have access privileges. You can list\nviews for the current or specified schema.",
    "syntax": "SHOW [ TERSE ] SEMANTIC VIEWS [ LIKE '<pattern>' ]\n  [ IN\n    {\n      ACCOUNT                                         |\n\n      DATABASE                                        |\n      DATABASE <database_name>                        |\n\n      SCHEMA                                          |\n      SCHEMA <schema_name>                            |\n      <schema_name>\n    }\n  ]\n\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW SEMANTIC VIEWS;"
        },
        {
            "code": "+-------------------------------+----------------------+---------------+-------------+---------+---------+-----------------+-----------+\n| created_on                    | name                 | database_name | schema_name | comment | owner   | owner_role_type | extension |\n|-------------------------------+----------------------+---------------+-------------+---------+---------+-----------------+-----------+\n| 2025-04-10 08:29:02.732 -0700 | MY_SEMANTIC_VIEW_1   | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:29:21.117 -0700 | MY_SEMANTIC_VIEW_2   | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:29:38.040 -0700 | MY_SEMANTIC_VIEW_3   | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:47:33.161 -0700 | MY_SEMANTIC_VIEW_4   | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:47:46.294 -0700 | MY_SEMANTIC_VIEW_5   | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:47:58.480 -0700 | MY_SEMANTIC_VIEW_6   | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-02-28 16:16:04.002 -0800 | O_TPCH_SEMANTIC_VIEW | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-03-21 07:03:54.120 -0700 | TPCH_REV_ANALYSIS    | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n+-------------------------------+----------------------+---------------+-------------+---------+---------+-----------------+-----------+"
        },
        {
            "code": "SHOW TERSE SEMANTIC VIEWS;"
        },
        {
            "code": "+-------------------------------+-----------------------+---------------+---------------+-------------------+\n| created_on                    | name                  | kind          | database_name | schema_name       |\n|-------------------------------+-----------------------+---------------+---------------+-------------------|\n| 2025-04-10 08:29:02.732 -0700 | MY_SEMANTIC_VIEW_1    | SEMANTIC_VIEW | MY_DB         | MY_SCHEMA         |\n| 2025-04-10 08:29:21.117 -0700 | MY_SEMANTIC_VIEW_2    | SEMANTIC_VIEW | MY_DB         | MY_SCHEMA         |\n| 2025-04-10 08:29:38.040 -0700 | MY_SEMANTIC_VIEW_3    | SEMANTIC_VIEW | MY_DB         | MY_SCHEMA         |\n| 2025-04-10 08:47:33.161 -0700 | MY_SEMANTIC_VIEW_4    | SEMANTIC_VIEW | MY_DB         | MY_SCHEMA         |\n| 2025-04-10 08:47:46.294 -0700 | MY_SEMANTIC_VIEW_5    | SEMANTIC_VIEW | MY_DB         | MY_SCHEMA         |\n| 2025-04-10 08:47:58.480 -0700 | MY_SEMANTIC_VIEW_6    | SEMANTIC_VIEW | MY_DB         | MY_SCHEMA         |\n| 2025-02-28 16:16:04.002 -0800 | O_TPCH_SEMANTIC_VIEW  | SEMANTIC_VIEW | MY_DB         | MY_SCHEMA         |\n| 2025-03-21 07:03:54.120 -0700 | TPCH_REV_ANALYSIS     | SEMANTIC_VIEW | MY_DB         | MY_SCHEMA         |\n+-------------------------------+-----------------------+---------------+---------------+-------------------+"
        },
        {
            "code": "SHOW SEMANTIC VIEWS LIKE '%tpch%';"
        },
        {
            "code": "+-------------------------------+----------------------+---------------+-------------+---------+---------+-----------------+-----------+\n| created_on                    | name                 | database_name | schema_name | comment | owner   | owner_role_type | extension |\n|-------------------------------+----------------------+---------------+-------------+---------+---------+-----------------+-----------|\n| 2025-02-28 16:16:04.002 -0800 | O_TPCH_SEMANTIC_VIEW | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-03-21 07:03:54.120 -0700 | TPCH_REV_ANALYSIS    | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n+-------------------------------+----------------------+---------------+-------------+---------+---------+-----------------+-----------+"
        },
        {
            "code": "SHOW SEMANTIC VIEWS STARTS WITH 'MY_SEMANTIC_VIEW';"
        },
        {
            "code": "+-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------+\n| created_on                    | name               | database_name | schema_name | comment | owner   | owner_role_type | extension |\n|-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------|\n| 2025-04-10 08:29:02.732 -0700 | MY_SEMANTIC_VIEW_1 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:29:21.117 -0700 | MY_SEMANTIC_VIEW_2 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:29:38.040 -0700 | MY_SEMANTIC_VIEW_3 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:47:33.161 -0700 | MY_SEMANTIC_VIEW_4 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:47:46.294 -0700 | MY_SEMANTIC_VIEW_5 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:47:58.480 -0700 | MY_SEMANTIC_VIEW_6 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n+-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------+"
        },
        {
            "code": "SHOW SEMANTIC VIEWS STARTS WITH 'MY_SEMANTIC_VIEW' LIMIT 3;"
        },
        {
            "code": "+-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------+\n| created_on                    | name               | database_name | schema_name | comment | owner   | owner_role_type | extension |\n|-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------|\n| 2025-04-10 08:29:02.732 -0700 | MY_SEMANTIC_VIEW_1 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:29:21.117 -0700 | MY_SEMANTIC_VIEW_2 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:29:38.040 -0700 | MY_SEMANTIC_VIEW_3 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n+-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------+"
        },
        {
            "code": "SHOW SEMANTIC VIEWS STARTS WITH 'MY_SEMANTIC_VIEW' LIMIT 3 FROM 'MY_SEMANTIC_VIEW_3';"
        },
        {
            "code": "+-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------+\n| created_on                    | name               | database_name | schema_name | comment | owner   | owner_role_type | extension |\n|-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------|\n| 2025-04-10 08:47:33.161 -0700 | MY_SEMANTIC_VIEW_4 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:47:46.294 -0700 | MY_SEMANTIC_VIEW_5 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n| 2025-04-10 08:47:58.480 -0700 | MY_SEMANTIC_VIEW_6 | MY_DB         | MY_SCHEMA   |         | MY_ROLE | ROLE            | NULL      |\n+-------------------------------+--------------------+---------------+-------------+---------+---------+-----------------+-----------+"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of the output columns: created_on name kind The kind column value is always SEMANTIC_VIEW . database_name schema_name Default: No value (all columns are included in the output)"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-row-access-policies",
    "title": "SHOW ROW ACCESS POLICIES",
    "description": "Lists the row access policies for which you have access privileges. Returns information that includes the creation date, database and\nschema names, owner, and any available comments.",
    "syntax": "SHOW ROW ACCESS POLICIES [ LIKE '<pattern>' ]\n                         [ LIMIT <rows> [ FROM '<name_string>' ] ]\n                         [ IN\n                              {\n                                ACCOUNT                                         |\n\n                                DATABASE                                        |\n                                DATABASE <database_name>                        |\n\n                                SCHEMA                                          |\n                                SCHEMA <schema_name>                            |\n                                <schema_name>\n\n                                APPLICATION <application_name>                  |\n                                APPLICATION PACKAGE <application_package_name>  |\n                              }\n                         ]",
    "examples": [
        {
            "code": "SHOW ROW ACCESS POLICIES;"
        },
        {
            "code": "---------------------------------+------+---------------+-------------+-------------------+--------------+---------+---------+-----------------+\n          created_on             | name | database_name | schema_name |       kind        |    owner     | comment | options | owner_role_type |\n---------------------------------+------+---------------+-------------+-------------------+--------------+---------+---------+-----------------+\nFri, 23 Jun 1967 00:00:00 -0700  | P1   | RLS_AUTHZ_DB  | S_D_1       | ROW_ACCESS_POLICY | ACCOUNTADMIN |         | \"\"      | ROLE            |\nFri, 23 Jun 1967 00:00:00 -0700  | P2   | RLS_AUTHZ_DB  | S_D_2       | ROW_ACCESS_POLICY | ACCOUNTADMIN |         | \"\"      | ROLE            |\n---------------------------------+------+---------------+-------------+-------------------+--------------+---------+---------+-----------------+"
        },
        {
            "code": ""
        },
        {
            "code": "SHOW ROW ACCESS POLICIES;\n\n---------------------------------+------+---------------+-------------+-------------------+--------------+---------+---------+-----------------+\n          created_on             | name | database_name | schema_name |       kind        |    owner     | comment | options | owner_role_type |\n---------------------------------+------+---------------+-------------+-------------------+--------------+---------+---------+-----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-tasks",
    "title": "SHOW TASKS",
    "description": "Lists the tasks for which you have access privileges. The command can be used to list tasks for the current/specified database or schema,\nor across your entire account.",
    "syntax": "SHOW [ TERSE ] TASKS [ LIKE '<pattern>' ]\n                     [ IN { ACCOUNT | DATABASE [ <db_name> ] | [ SCHEMA ] [ <schema_name> ] | APPLICATION <application_name> | APPLICATION PACKAGE <application_package_name> } ]\n                     [ STARTS WITH '<name_string>' ]\n                     [ ROOT ONLY ]\n                     [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW TASKS LIKE 'line%' IN tpch.public;"
        },
        {
            "code": "SHOW TASKS IN tpch.public;"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of the output columns: created_on name kind (shows NULL for all task records) database_name schema_name schedule"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   ACCOUNT   |   DATABASE   [   db_name   ]   |   SCHEMA   [   schema_name   ]   |   APPLICATION   application_name   |   APPLICATION   PACKAGE   application_package_name",
            "description": "Optionally specifies the scope of the command, which determines whether the command lists records only for the current/specified database or schema, or across your entire account. The APPLICATION and APPLICATION PACKAGE keywords are not required, but they specify the scope for the named Snowflake Native App. If you specify the keyword ACCOUNT , then the command retrieves records for all schemas in all databases\nof the current account. If you specify the keyword DATABASE , then: If you specify a db_name , then the command retrieves records for all schemas of the specified database. If you do not specify a db_name , then: If there is a current database, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and schemas in the account. If you specify the keyword SCHEMA , then: If you specify a qualified schema name (e.g. my_database.my_schema ), then the command\nretrieves records for the specified database and schema. If you specify an unqualified schema_name , then: If there is a current database, then the command retrieves records for the specified schema in the current database. If there is no current database, then the command displays the error SQL compilation error: Object does not exist, or operation cannot be performed . If you do not specify a schema_name , then: If there is a current database, then: If there is a current schema, then the command retrieves records for the current schema in the current database. If there is no current schema, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and all schemas in the account. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "ROOT   ONLY",
            "description": "Filters the command output to return only root tasks (tasks with no predecessors)."
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "Only returns rows for a task owner (that is, the role with the OWNERSHIP privilege on a task) or a role with either the MONITOR\nor OPERATE privilege on a task.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-pipes",
    "title": "SHOW PIPES",
    "description": "Lists the pipes for which you have access privileges. This command can be used to list the pipes for a specified database or schema\n(or the current database/schema for the session), or your entire account.",
    "syntax": "SHOW PIPES [ LIKE '<pattern>' ]\n           [ IN\n                {\n                  ACCOUNT                                         |\n\n                  DATABASE                                        |\n                  DATABASE <database_name>                        |\n\n                  SCHEMA                                          |\n                  SCHEMA <schema_name>                            |\n                  <schema_name>\n\n                  APPLICATION <application_name>                  |\n                  APPLICATION PACKAGE <application_package_name>  |\n                }\n           ]",
    "examples": [
        {
            "code": "use database mydb;\n\nshow pipes;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "Returns results only for the pipe owner (that is, the role with the OWNERSHIP privilege on the pipe), a role with the MONITOR or OPERATE\nprivilege on the pipe, or a role with the global MONITOR EXECUTION privilege.\nTo determine the current status of a pipe, query the SYSTEM$PIPE_STATUS function.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-objects",
    "title": "SHOW OBJECTS",
    "description": "Lists the tables and views for which you have access privileges. This command can be used to list the tables and views for a specified\ndatabase or schema (or the current database/schema for the session), or your entire account.",
    "syntax": "SHOW [ TERSE ] OBJECTS [ LIKE '<pattern>' ]\n                       [ IN\n                             {\n                               ACCOUNT                                         |\n\n                               DATABASE                                        |\n                               DATABASE <database_name>                        |\n\n                               SCHEMA                                          |\n                               SCHEMA <schema_name>                            |\n                               <schema_name>\n\n                               APPLICATION <application_name>                  |\n                               APPLICATION PACKAGE <application_package_name>  |\n                             }\n                       ]\n                       [ STARTS WITH '<name_string>' ]\n                       [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW OBJECTS IN DATABASE STARTS WITH 'HT_';"
        },
        {
            "code": "+-------------------------------+------------------------+---------------+----------------+-------+---------+------------+---------+-----------+--------------+----------------+-----------------+--------+-----------+------------+\n| created_on                    | name                   | database_name | schema_name    | kind  | comment | cluster_by |    rows |     bytes | owner        | retention_time | owner_role_type | budget | is_hybrid | is_dynamic |\n|-------------------------------+------------------------+---------------+----------------+-------+---------+------------+---------+-----------+--------------+----------------+-----------------+--------+-----------+------------|\n| 2024-05-13 19:08:41.946 -0700 | HT_PRECIP              | HYBRID1_DB    | HYBRID1_SCHEMA | TABLE |         |            |       0 |         0 | HYBRID1_ROLE | 1              | ROLE            | NULL   | Y         | N          |\n| 2024-08-23 11:44:13.694 -0700 | HT_SENSOR_DATA_DEVICE1 | HYBRID1_DB    | HYBRID1_SCHEMA | TABLE |         |            | 2678400 | 133920000 | HYBRID1_ROLE | 1              | ROLE            | NULL   | Y         | N          |\n| 2024-05-13 16:37:29.217 -0700 | HT_WEATHER             | HYBRID1_DB    | HYBRID1_SCHEMA | TABLE |         |            |      55 |      2985 | HYBRID1_ROLE | 1              | ROLE            | NULL   | Y         | N          |\n| 2024-07-18 12:17:27.381 -0700 | HT_WEATHER             | HYBRID1_DB    | PUBLIC         | TABLE |         |            |      55 |      3040 | ACCOUNTADMIN | 1              | ROLE            | NULL   | Y         | N          |\n+-------------------------------+------------------------+---------------+----------------+-------+---------+------------+---------+-----------+--------------+----------------+-----------------+--------+-----------+------------+"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of the output columns: created_on name kind database_name schema_name Default: No value (all columns are included in the output)."
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "For materialized views, this returns “VIEW”, not “MATERIALIZED VIEW”.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-cortex-search",
    "title": "SHOW CORTEX SEARCH SERVICES",
    "description": "Lists the Cortex Search services for which you have access\nprivileges.",
    "syntax": "SHOW CORTEX SEARCH SERVICES\n  [ LIKE PATTERN '<pattern>' ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "USE DATABASE mydb;\n\nSHOW CORTEX SEARCH SERVICES;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-columns",
    "title": "SHOW COLUMNS",
    "description": "Lists the columns in the tables or views for which you have access privileges. This command can be used to list the columns for a\nspecified table/view/schema/database (or the current schema/database for the session), or your entire account.",
    "syntax": "SHOW COLUMNS [ LIKE '<pattern>' ]\n             [ IN { ACCOUNT | DATABASE [ <database_name> ] | SCHEMA [ <schema_name> ] | TABLE | [ TABLE ] <table_name> | VIEW | [ VIEW ] <view_name> } | APPLICATION <application_name> | APPLICATION PACKAGE <application_package_name> ]",
    "examples": [
        {
            "code": "create or replace table dt_test (n1 number default 5, n2_int integer default n1+5, n3_bigint bigint autoincrement, n4_dec decimal identity (1,10),\n                                 f1 float, f2_double double, f3_real real,\n                                 s1 string, s2_var varchar, s3_char char, s4_text text,\n                                 b1 binary, b2_var varbinary,\n                                 bool1 boolean,\n                                 d1 date,\n                                 t1 time,\n                                 ts1 timestamp, ts2_ltz timestamp_ltz, ts3_ntz timestamp_ntz, ts4_tz timestamp_tz);\n\nshow columns in table dt_test;\n\n+------------+-------------+-------------+---------------------------------------------------------------------------------------+-------+----------------+--------+------------+---------+---------------+-------------------------------+\n| table_name | schema_name | column_name | data_type                                                                             | null? | default        | kind   | expression | comment | database_name | autoincrement                 |\n|------------+-------------+-------------+---------------------------------------------------------------------------------------+-------+----------------+--------+------------+---------+---------------+-------------------------------|\n| DT_TEST    | PUBLIC      | N1          | {\"type\":\"FIXED\",\"precision\":38,\"scale\":0,\"nullable\":true}                             | true  | 5              | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | N2_INT      | {\"type\":\"FIXED\",\"precision\":38,\"scale\":0,\"nullable\":true}                             | true  | DT_TEST.N1 + 5 | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | N3_BIGINT   | {\"type\":\"FIXED\",\"precision\":38,\"scale\":0,\"nullable\":true}                             | true  |                | COLUMN |            |         | TEST1         | IDENTITY START 1 INCREMENT 1  |\n| DT_TEST    | PUBLIC      | N4_DEC      | {\"type\":\"FIXED\",\"precision\":38,\"scale\":0,\"nullable\":true}                             | true  |                | COLUMN |            |         | TEST1         | IDENTITY START 1 INCREMENT 10 |\n| DT_TEST    | PUBLIC      | F1          | {\"type\":\"REAL\",\"nullable\":true}                                                       | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | F2_DOUBLE   | {\"type\":\"REAL\",\"nullable\":true}                                                       | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | F3_REAL     | {\"type\":\"REAL\",\"nullable\":true}                                                       | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | S1          | {\"type\":\"TEXT\",\"length\":16777216,\"byteLength\":16777216,\"nullable\":true,\"fixed\":false} | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | S2_VAR      | {\"type\":\"TEXT\",\"length\":16777216,\"byteLength\":16777216,\"nullable\":true,\"fixed\":false} | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | S3_CHAR     | {\"type\":\"TEXT\",\"length\":1,\"byteLength\":4,\"nullable\":true,\"fixed\":false}               | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | S4_TEXT     | {\"type\":\"TEXT\",\"length\":16777216,\"byteLength\":16777216,\"nullable\":true,\"fixed\":false} | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | B1          | {\"type\":\"BINARY\",\"length\":8388608,\"byteLength\":8388608,\"nullable\":true,\"fixed\":true}  | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | B2_VAR      | {\"type\":\"BINARY\",\"length\":8388608,\"byteLength\":8388608,\"nullable\":true,\"fixed\":false} | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | BOOL1       | {\"type\":\"BOOLEAN\",\"nullable\":true}                                                    | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | D1          | {\"type\":\"DATE\",\"nullable\":true}                                                       | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | T1          | {\"type\":\"TIME\",\"precision\":0,\"scale\":9,\"nullable\":true}                               | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | TS1         | {\"type\":\"TIMESTAMP_LTZ\",\"precision\":0,\"scale\":9,\"nullable\":true}                      | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | TS2_LTZ     | {\"type\":\"TIMESTAMP_LTZ\",\"precision\":0,\"scale\":9,\"nullable\":true}                      | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | TS3_NTZ     | {\"type\":\"TIMESTAMP_NTZ\",\"precision\":0,\"scale\":9,\"nullable\":true}                      | true  |                | COLUMN |            |         | TEST1         |                               |\n| DT_TEST    | PUBLIC      | TS4_TZ      | {\"type\":\"TIMESTAMP_TZ\",\"precision\":0,\"scale\":9,\"nullable\":true}                       | true  |                | COLUMN |            |         | TEST1         |                               |\n+------------+-------------+-------------+---------------------------------------------------------------------------------------+-------+----------------+--------+------------+---------+---------------+-------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   '<pattern>'",
            "description": "Filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL wildcard\ncharacters ( % and _ ). For example, the following patterns return the same results:"
        },
        {
            "name": "IN   {   ACCOUNT   |   DATABASE   [   <database_name>   ]   |   SCHEMA   [   <schema_name>   ]   |   TABLE   |   [   TABLE   ]   <table_name>   |   VIEW   |   [   VIEW   ]   <view_name>   |   APPLICATION   <application_name>    |   APPLICATION   PACKAGE   <application_package_name>   }",
            "description": "Specifies the scope of the command, which determines whether the command lists records only for the current/specified database,\nschema, table, or view, or across your entire account: If you specify the keyword ACCOUNT , then the command retrieves records for all schemas in all databases\nof the current account. If you specify the keyword DATABASE , then: If you specify a db_name , then the command retrieves records for all schemas of the specified database. If you do not specify a db_name , then: If there is a current database, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and schemas in the account. If you specify the keyword SCHEMA , then: If you specify a qualified schema name (e.g. my_database.my_schema ), then the command\nretrieves records for the specified database and schema. If you specify an unqualified schema_name , then: If there is a current database, then the command retrieves records for the specified schema in the current database. If there is no current database, then the command displays the error SQL compilation error: Object does not exist, or operation cannot be performed . If you do not specify a schema_name , then: If there is a current database, then: If there is a current schema, then the command retrieves records for the current schema in the current database. If there is no current schema, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and all schemas in the account. If you specify the keyword TABLE without a table_name , then: If there is a current database, then: If there is a current schema, then the command retrieves records for the current schema in the current database. If there is no current schema, then the command retrieves records for all schemas in the current database. If there is no current database, then the command retrieves records for all databases and all schemas in the account. If you specify a <table_name> (with or without the keyword TABLE ), then: If you specify a fully-qualified <table_name> (e.g. my_database_name.my_schema_name.my_table_name ),\nthen the command retrieves all records for the specified table. If you specify a schema-qualified <table_name> (e.g. my_schema_name.my_table_name ), then: If a current database exists, then the command retrieves all records for the specified table. If no current database exists, then the command displays an error similar to Cannot perform SHOW <object_type>. This session does not have a current database... . If you specify an unqualified <table_name> , then: If a current database and current schema exist, then the command retrieves records for the specified table in the current\nschema of the current database. If no current database exists or no current schema exists, then the command displays an error similar to: SQL compilation error: <object> does not exist or not authorized. . If you specify the keyword VIEW or a view name, the rules for views parallel the rules for tables. If you specify the keywords APPLICATION or APPLICATION PACKAGE , records for the specified Snowflake Native App Framework application or application package are returned. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        }
    ],
    "usage_notes": "If you use the keyword VIEW and specify a view name, the view may be a materialized view or a non-materialized view.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-notebooks",
    "title": "SHOW NOTEBOOKS",
    "description": "Lists the notebooks for which you have access privileges.",
    "syntax": "SHOW NOTEBOOKS [ LIKE '<pattern>' ]\n               [ IN\n                     {\n                       ACCOUNT                  |\n\n                       DATABASE                 |\n                       DATABASE <database_name> |\n\n                       SCHEMA                   |\n                       SCHEMA <schema_name>     |\n                       <schema_name>\n                     }\n               ]\n               [ STARTS WITH '<name_string>' ]\n               [ LIMIT <rows> ]\n               [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW NOTEBOOKS;"
        },
        {
            "code": "SHOW NOTEBOOKS STARTS WITH 'test';"
        },
        {
            "code": "+--------------------------------+--------------+---------------+----------------------------------------------------------------------------------+--------+-----------------+----------------------+-----------------+------------------------------+\n| created_on                     | name         | database_name | schema_name | comment                                                            | owner  | query_warehouse | url_id               | owner_role_type | code_warehouse               |\n+--------------------------------+--------------+---------------+----------------------------------------------------------------------------------+--------+-----------------+----------------------+-----------------+------------------------------+\n|  2024-03-20 06:37:08.402 +0000 | test_notebook| PUBLIC        | PUBLIC      | {\"lastUpdatedUser\":\"309334439262\",\"lastUpdatedTime\":1711566800002} | PUBLIC | HLEVE1          | 2mbdchin3kn2tlzgqtca | ROLE            | SYSTEM$STREAMLIT_NOTEBOOK_WH |\n+--------------------------------+--------------+---------------+-------------+--------------------------------------------------------------------+--------+-----------------+----------------------+-----------------+------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows",
            "description": "Optionally limits the maximum number of rows returned. The actual number of rows returned might be less than the specified limit. For\nexample, the number of existing objects is less than the specified limit. Default: No value (no limit is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-git-tags",
    "title": "SHOW GIT TAGS",
    "description": "Lists the tags in the specified Snowflake Git repository clone.",
    "syntax": "SHOW GIT TAGS [ LIKE '<pattern>' ] IN [ GIT REPOSITORY ] <repository_name>",
    "examples": [
        {
            "code": "SHOW GIT TAGS IN snowflake_extensions;"
        },
        {
            "code": "-----------------------------------------------------------------------------------------------------------------------------------------------\n| name    | path          | commit_hash                              | author                                     | message                   |\n-----------------------------------------------------------------------------------------------------------------------------------------------\n| example | /tags/example | 16e262d401297cd097d5d6c266c80ff9f7e1e4be | Gladys Kravits (gladyskravits@example.com) | Example code for preview. |\n-----------------------------------------------------------------------------------------------------------------------------------------------"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   [   GIT   REPOSITORY   ]   repository_name",
            "description": "Specifies the Git repository clone containing the tags to show."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-database-roles",
    "title": "SHOW DATABASE ROLES",
    "description": "Lists all the database roles in the specified database.",
    "syntax": "SHOW DATABASE ROLES IN DATABASE <name>\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW DATABASE ROLES IN DATABASE <name>\n  [ LIMIT <rows> [ FROM '<name_string>' ] ]"
        },
        {
            "code": "SHOW DATABASE ROLES IN DATABASE mydb LIMIT 10 FROM 'db_role2';"
        }
    ],
    "parameters": [
        {
            "name": "name",
            "description": "Specifies the name of the database. The command returns an error if you do not specify the name identifier."
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "This command only supports showing database roles in a specific database.\nYou can’t use this command to show database roles in the account.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-versions",
    "title": "SHOW VERSIONS IN APPLICATION PACKAGE",
    "description": "Lists the versions defined in the specified application package.",
    "syntax": "SHOW VERSIONS [ LIKE <pattern> ]\n  IN APPLICATION PACKAGE <name>;",
    "examples": [
        {
            "code": "SHOW VERSIONS [ LIKE <pattern> ]\n  IN APPLICATION PACKAGE <name>;"
        },
        {
            "code": "SHOW VERSIONS IN APPLICATION PACKAGE hello_snowflake_app;"
        },
        {
            "code": "+----------------+-------+---------+---------+-------------------------------+------------+-----------+-------------+-------+---------------+\n| version        | patch | label   | comment | created_on                    | dropped_on | log_level | trace_level | state | review_status |\n|----------------+-------+---------+---------+-------------------------------+------------+-----------+-------------+-------+---------------|\n| V1_0           |     0 | NULL    | NULL    | 2023-05-10 17:11:47.696 -0700 | NULL       | OFF       | OFF         | READY | NOT_REVIEWED  |\n+----------------+-------+---------+---------+-------------------------------+------------+-----------+-------------+-------+---------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   APPLICATION   PACKAGE   name",
            "description": "Specifies the identifier for the application package whose versions you want to view."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-privacy-policies",
    "title": "SHOW PRIVACY POLICIES",
    "description": "Lists the privacy policies for which you have access privileges.",
    "syntax": "SHOW PRIVACY POLICIES [ LIKE '<pattern>' ]\n           [ IN\n                {\n                  ACCOUNT\n                  | DATABASE [ <database_name> ]\n                  | SCHEMA [ <schema_name> ]\n                }\n           ]",
    "examples": [
        {
            "code": "USE DATABASE privacy_policy_db;\nSHOW PRIVACY POLICIES;"
        },
        {
            "code": "+---------------------------------+----------------+-------------------------------------+-------------------------------------+----------------+--------------+---------+-----------------+---------+\n| created_on                      | name           | database_name                       | schema_name                         | kind           | owner        | comment | owner_role_type | options |\n|---------------------------------+----------------+-------------------------------------+-------------------------------------+----------------+--------------+---------+-----------------+---------|\n| Fri, 23 Jun 2021 07:00:00 +0000 | MY_PRIV_POLICY | PRIVACY_POLICY_DB                   | PRIVACY_POLICY_SH                   | PRIVACY_POLICY | ACCOUNTADMIN |         | ROLE            |         |\n+---------------------------------+----------------+-------------------------------------+-------------------------------------+----------------+--------------+---------+-----------------+---------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/classes/budget/commands/show-budget",
    "title": "SHOW BUDGET",
    "description": "Fully qualified name: SNOWFLAKE.CORE.BUDGET",
    "syntax": "{\n  SHOW SNOWFLAKE.CORE.BUDGET           |\n  SHOW SNOWFLAKE.CORE.BUDGET INSTANCES\n}\n  [ LIKE '<pattern>' ]\n  [ IN\n        {\n          ACCOUNT                  |\n\n          DATABASE                 |\n          DATABASE <database_name> |\n\n          SCHEMA                   |\n          SCHEMA <schema_name>     |\n          <schema_name>\n        }\n  ]\n  [ LIMIT <rows> [ FROM '<name_string>' ]",
    "examples": [
        {
            "code": "SHOW SNOWFLAKE.CORE.BUDGET INSTANCES IN SCHEMA budget_db.budget_schema;"
        },
        {
            "code": "SHOW SNOWFLAKE.CORE.BUDGET LIKE '%DEPT%' IN SCHEMA budget_db.budget_schema;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "To refer to this class by its unqualified name, include the database and schema of the class in your\nsearch path.\nThe system function SYSTEM$SHOW_BUDGETS_IN_ACCOUNT might execute faster than\nthe SHOW command but doesn’t include owner fields in the output.\nThe order of results is not guaranteed."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-materialized-views",
    "title": "SHOW MATERIALIZED VIEWS",
    "description": "Lists the materialized views that you have privileges to access.",
    "syntax": "SHOW MATERIALIZED VIEWS [ LIKE '<pattern>' ]\n                        [ IN\n                             {\n                               ACCOUNT                                         |\n\n                               DATABASE                                        |\n                               DATABASE <database_name>                        |\n\n                               SCHEMA                                          |\n                               SCHEMA <schema_name>                            |\n                               <schema_name>\n\n                               APPLICATION <application_name>                  |\n                               APPLICATION PACKAGE <application_package_name>  |\n                             }\n                        ]",
    "examples": [
        {
            "code": "SHOW MATERIALIZED VIEWS;"
        },
        {
            "code": "SHOW MATERIALIZED VIEWS LIKE 'mv1%';\n\n+-------------------------------+------+----------+---------------+-------------+------------+------+-------+----------------------+--------------------+-------------------+-------------------------------+--------------+----------+---------+----------------+-----------+---------+--------------------------------------------+-----------+----------------------+-----------------+\n| created_on                    | name | reserved | database_name | schema_name | cluster_by | rows | bytes | source_database_name | source_schema_name | source_table_name | refreshed_on                  | compacted_on | owner    | invalid | invalid_reason | behind_by | comment | text                                       | is_secure | automatic_clustering | owner_role_type |\n|-------------------------------+------+----------+---------------+-------------+------------+------+-------+----------------------+--------------------+-------------------+-------------------------------+--------------+----------+---------+----------------+-----------+---------+--------------------------------------------+-----------|----------------------+-----------------|\n| 2018-10-05 17:13:17.579 -0700 | MV1  |          | TEST_DB1      | PUBLIC      |            |    0 |     0 | TEST_DB1             | PUBLIC             | INVENTORY         | 2018-10-05 17:13:50.373 -0700 | NULL         | SYSADMIN | false   | NULL           | 0s        |         | CREATE OR REPLACE MATERIALIZED VIEW mv1 AS | false     | OFF                  | ROLE            |\n|                               |      |          |               |             |            |      |       |                      |                    |                   |                               |              |          |         |                |           |         |       SELECT ID, price FROM inventory;     |           |                      |                 |          |\n+-------------------------------+------+----------+---------------+-------------+------------+------+-------+----------------------+--------------------+-------------------+-------------------------------+--------------+----------+---------+----------------+-----------+---------+--------------------------------------------+-----------+----------------------+-----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The output columns are similar to the output columns for SHOW TABLES, but includes the following additional columns:\nrefreshed_on: time of the last DML operation on the base table that was processed by a\n“refresh” operation.\ncompacted_on: time of the last DML operation on the base table that was processed by a\n“compaction” operation.\nbehind_by: If the background process that updates the materialized view\nwith changes from the base table has not yet brought the materialized view\nup to date, then this column shows approximately how many seconds the\nmaterialized view is “behind” the base table. Note that even if this shows\nthat the materialized view is not up to date, any queries on the\nmaterialized view will still return up-to-date results (they just might\ntake a little longer as extra information is retrieved from the base table).\nThe command SHOW VIEWS also shows information about materialized views.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-organization-accounts",
    "title": "SHOW ORGANIZATION ACCOUNTS",
    "description": "Lists the organization account of the organization.",
    "syntax": "SHOW ORGANIZATION ACCOUNTS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW ORGANIZATION ACCOUNTS;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "Only users with the GLOBALORGADMIN role can run this command, which means it can only be run from the organization account.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-replication-groups",
    "title": "SHOW REPLICATION GROUPS",
    "description": "Displays information about replication groups and failover groups.",
    "syntax": "SHOW REPLICATION GROUPS [ IN ACCOUNT <account> ]",
    "examples": [
        {
            "code": "SHOW REPLICATION GROUPS IN ACCOUNT myaccount1;\n\n+------------------+-------------------------------+--------------+------+----------+---------+------------+-----------------------+---------------------------------------------+---------------------------+----------------------------------------------+-------------------+-------------------+----------------------+-----------------+-------------------------------+---------+-----------------------------------+\n| snowflake_region | created_on                    | account_name | name | type     | comment | is_primary | primary               | object_types                                | allowed_integration_types | allowed_accounts                             | organization_name | account_locator   | replication_schedule | secondary_state | next_scheduled_refresh        | owner   | is_listing_auto_fulfillment_group |\n+------------------+-------------------------------+--------------+------+----------+---------+------------+-----------------------+---------------------------------------------+---------------------------+----------------------------------------------+-------------------+-------------------+----------------------+-----------------+-------------------------------+---------+-----------------------------------+\n| AWS_US_EAST_1    | 2021-10-25 19:08:15.209 -0700 | MYACCOUNT1   | MYFG | FAILOVER |         | true       | MYORG.MYACCOUNT1.MYFG | DATABASES, ROLES, USERS, WAREHOUSES, SHARES |                           | MYORG.MYACCOUNT1.MYFG,MYORG.MYACCOUNT2.MYFG  | MYORG             | MYACCOUNT1LOCATOR | 10 MINUTE            |                 |                               | MYROLE  | false                             |\n+------------------+-------------------------------+--------------+------+----------+---------+------------+-----------------------+---------------------------------------------+---------------------------+----------------------------------------------+-------------------+-------------------+----------------------+-----------------+-------------------------------+---------+-----------------------------------+\n| AWS_US_WEST_2    | 2021-10-25 19:08:15.209 -0700 | MYACCOUNT2   | MYFG | FAILOVER |         | false      | MYORG.MYACCOUNT1.MYFG |                                             |                           |                                              | MYORG             | MYACCOUNT2LOCATOR | 10 MINUTE            | STARTED         | 2022-03-06 12:10:35.280 -0800 | NULL    | false                             |\n+------------------+-------------------------------+--------------+------+----------+---------+------------+-----------------------+---------------------------------------------+---------------------------+----------------------------------------------+-------------------+-------------------+----------------------+-----------------+-------------------------------+---------+-----------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "account",
            "description": "Specifies the identifier for the account."
        }
    ],
    "usage_notes": "Executing this command requires a role with any one of the following privileges on a replication group:\nMONITOR\nOWNERSHIP\nREPLICATE\nThe output of SHOW REPLICATION GROUPS includes groups of types FAILOVER and REPLICATION.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-resource-monitors",
    "title": "SHOW RESOURCE MONITORS",
    "description": "Lists all the resource monitors in your account for which you have access privileges.",
    "syntax": "SHOW RESOURCE MONITORS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW RESOURCE MONITORS [ LIKE '<pattern>' ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "The command output includes a level column with the following values:\nWAREHOUSE: The resource monitor is assigned to one or more warehouses and, therefore, is monitoring the credit usage for\nthe assigned warehouse(s).\nACCOUNT: The resource monitor is assigned at the account-level and, therefore, monitoring the credit usage for your entire\naccount.\nNULL: The resource monitor is not assigned to the account or any warehouses and, therefore, is not monitoring any credit\nusage.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-streamlits",
    "title": "SHOW STREAMLITS",
    "description": "Lists the Streamlit objects for which you have access privileges.",
    "syntax": "SHOW [ TERSE ] STREAMLITS [ LIKE '<pattern>' ]\n                          [ IN\n                                {\n                                  ACCOUNT                   |\n\n                                  DATABASE                  |\n                                  DATABASE <db_name>        |\n\n                                  SCHEMA\n                                  SCHEMA <schema_name>      |\n                                  <schema_name>             |\n                                }\n                          ]\n                          [ LIMIT <rows> [ FROM '<name_string>' ]",
    "examples": [
        {
            "code": "SHOW [ TERSE ] STREAMLITS [ LIKE '<pattern>' ]\n                          [ IN\n                                {\n                                  ACCOUNT                   |\n\n                                  DATABASE                  |\n                                  DATABASE <db_name>        |\n\n                                  SCHEMA\n                                  SCHEMA <schema_name>      |\n                                  <schema_name>             |\n                                }\n                          ]\n                          [ LIMIT <rows> [ FROM '<name_string>' ]"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of the output columns: created_on name kind The kind column value is always Streamlit. database_name schema_name title url_id"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "You can use this command to list Streamlit objects for the current/specified database or schema, or across your entire account.\nThe command does not list Streamlit objects that have been dropped.\nThe command does not require a running warehouse to run.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-iceberg-tables",
    "title": "SHOW ICEBERG TABLES",
    "description": "Lists the Apache Iceberg™ tables for which you have access privileges.",
    "syntax": "SHOW [ TERSE ] [ ICEBERG ] TABLES [ LIKE '<pattern>' ]\n                                  [ IN\n                                        {\n                                          ACCOUNT                  |\n\n                                          DATABASE                 |\n                                          DATABASE <database_name> |\n\n                                          SCHEMA                   |\n                                          SCHEMA <schema_name>     |\n                                          <schema_name>\n                                        }\n                                  ]\n                                  [ STARTS WITH '<name_string>' ]\n                                  [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW ICEBERG TABLES LIKE 'glue%' IN tpch.public;"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Optionally returns only a subset of the output columns: created_on name kind The kind column value is always ICEBERG TABLE. database_name schema_name Default: No value (all columns are included in the output)"
        },
        {
            "name": "ICEBERG",
            "description": "Returns Iceberg tables only."
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "If an account (or database or schema) has a large number of Iceberg tables, then searching the entire account (or database or schema)\ncan consume a significant amount of compute resources.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-packages-policies",
    "title": "SHOW PACKAGES POLICIES",
    "description": "Lists packages policy information.",
    "syntax": "SHOW PACKAGES POLICIES [ IN\n                            {\n                              SCHEMA                   |\n                              SCHEMA <schema_name>     |\n                              <schema_name>\n                            }\n                       ]",
    "examples": [
        {
            "code": "SHOW PACKAGES POLICIES [ IN\n                            {\n                              SCHEMA                   |\n                              SCHEMA <schema_name>     |\n                              <schema_name>\n                            }\n                       ]"
        },
        {
            "code": "SHOW PACKAGES POLICIES;"
        }
    ],
    "parameters": [
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name ,  .   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-views",
    "title": "SHOW VIEWS",
    "description": "Lists the views, including secure views, for which you have access privileges. The command can be used to list views for the\ncurrent/specified database or schema, or across your entire account.",
    "syntax": "SHOW [ TERSE ] VIEWS [ LIKE '<pattern>' ]\n                     [ IN { ACCOUNT | DATABASE [ <db_name> ] | [ SCHEMA ] [ <schema_name> ] | APPLICATION <application_name> | APPLICATION PACKAGE <application_package_name> } ]\n                     [ STARTS WITH '<name_string>' ]\n                     [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW VIEWS LIKE 'line%' IN mydb.public;\n\n+-------------------------------+---------+----------+---------------+-------------+----------+---------+-------------------------------------------------------+-----------+-----------------+-----------------+-----------------+\n| created_on                    | name    | reserved | database_name | schema_name | owner    | comment | text                                                  | is_secure | is_materialized | change_tracking | owner_role_type |\n+-------------------------------+---------+----------+---------------+-------------+----------+---------+-------------------------------------------------------+-----------+-----------------+-----------------+-----------------+\n| 2019-05-24 18:41:14.247 -0700 | liners1 |          | MYDB          | PUBLIC      | SYSADMIN |         | create materialized views liners1 as select * from t; | false     | false           | on              | ROLE            |\n+-------------------------------+---------+----------+---------------+-------------+----------+---------+-------------------------------------------------------+-----------+-----------------+-----------------+-----------------+"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Optionally returns only a subset of the output columns: created_on name kind database_name schema_name Default: No value (all columns are included in the output)"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   ACCOUNT   |   [   DATABASE   ]   db_name   |   [   SCHEMA   ]   schema_name   |   [   APPLICATION   ]   application_name   |   [   APPLICATION   PACKAGE   ]   application_package_name",
            "description": "Optionally specifies the scope of the command, which determines whether the command lists records only for the current/specified\ndatabase or schema, or across your entire account: The APPLICATION and APPLICATION PACKAGE keywords are not required, but they specify the scope for the named Snowflake Native App. The DATABASE or SCHEMA keyword is not required; you can set the scope by specifying only the database or schema name.\nLikewise, the database or schema name is not required if the session currently has a database in use: If DATABASE or SCHEMA is specified without a name and the session does not currently have a database in use, the\nparameter has no effect on the output. If SCHEMA is specified with a name and the session does not currently have a database in use, the schema name must be fully qualified with the database name (e.g. testdb.testschema ). Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (i.e. the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (i.e. the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "By design, the command output includes secure views, but does not provide certain information about these views unless you are using\nthe role that has ownership of the view. To view details for secure views, you must use the role that owns the view or use the\nVIEWS view in the Information Schema.\nThe output of this command might include objects with names like SN_TEMP_OBJECT_<n> (where <n> is a number). These are\ntemporary objects that are created by the Snowpark library on behalf of the user.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-application-packages",
    "title": "SHOW APPLICATION PACKAGES",
    "description": "Lists the application packages for which you have access privileges across your entire account in the Native Apps Framework.",
    "syntax": "SHOW APPLICATION PACKAGES [ LIKE '<pattern>' ]\n  [ STARTS WITH '<name_string>' ]\n  [ LIMIT <rows> [ FROM '<name_string>' ] ];",
    "examples": [
        {
            "code": "SHOW APPLICATION PACKAGES;"
        },
        {
            "code": "+-------------------------------+-------------------------+------------+------------+--------------+----------------+----------+---------+----------------+------------+-------------------+\n| created_on                    | name                    | is_default | is_current | distribution | owner          | comment  | options | retention_time | dropped_on | application_class |\n| 2023-06-02 16:28:31.371 -0700 | hello_snowflake_package | N          | N          | INTERNAL     | ACCOUNTADMIN   |          |         | 1              | NULL       | NULL              |\n+-------------------------------+-------------------------+------------+------------+--------------+----------------+----------+---------+----------------+------------+-------------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-notification-integrations",
    "title": "SHOW NOTIFICATION INTEGRATIONS",
    "description": "Lists the notification integrations in your account.",
    "syntax": "SHOW NOTIFICATION INTEGRATIONS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW NOTIFICATION INTEGRATIONS;"
        },
        {
            "code": "+-----------------------------+-----------------------------+--------------+---------+---------+-------------------------------+-----------+\n| name                        | type                        | category     | enabled | comment | created_on                    | direction |\n|-----------------------------+-----------------------------+--------------+---------+---------+-------------------------------+-----------|\n| MY_AZURE_INBOUND_QUEUE_INT  | QUEUE - AZURE_STORAGE_QUEUE | NOTIFICATION | true    | NULL    | 2025-03-08 11:34:55.861 -0800 | INBOUND   |\n| MY_GCP_INBOUND_QUEUE_INT    | QUEUE - GCP_PUBSUB          | NOTIFICATION | true    | NULL    | 2025-03-08 11:35:35.163 -0800 | INBOUND   |\n| MY_GCP_OUTBOUND_QUEUE_INT   | QUEUE - GCP_PUBSUB          | NOTIFICATION | true    | NULL    | 2025-03-08 11:37:06.487 -0800 | OUTBOUND  |\n| MY_AWS_OUTBOUND_QUEUE_INT   | QUEUE - AWS_SNS             | NOTIFICATION | true    | NULL    | 2025-03-08 11:36:13.072 -0800 | OUTBOUND  |\n| MY_EMAIL_INT                | EMAIL                       | NOTIFICATION | true    | NULL    | 2025-03-08 11:38:55.866 -0800 | OUTBOUND  |\n| MY_AZURE_OUTBOUND_QUEUE_INT | QUEUE - AZURE_EVENT_GRID    | NOTIFICATION | true    | NULL    | 2025-03-08 11:36:40.822 -0800 | OUTBOUND  |\n| MY_WEBHOOK_INT              | WEBHOOK                     | NOTIFICATION | true    | NULL    | 2025-03-08 11:40:17.336 -0800 | OUTBOUND  |\n+-----------------------------+-----------------------------+--------------+---------+---------+-------------------------------+-----------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "The command does not require a running warehouse to execute.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-variables",
    "title": "SHOW VARIABLES",
    "description": "Lists all variables defined in the current session.",
    "syntax": "SHOW VARIABLES [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW VARIABLES [ LIKE '<pattern>' ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-alerts",
    "title": "SHOW ALERTS",
    "description": "Lists the alerts for which you have access privileges.",
    "syntax": "SHOW [ TERSE ] ALERTS [ LIKE '<pattern>' ]\n                      [ IN\n                            {\n                              ACCOUNT                                         |\n\n                              DATABASE                                        |\n                              DATABASE <database_name>                        |\n\n                              SCHEMA                                          |\n                              SCHEMA <schema_name>                            |\n                              <schema_name>\n\n                              APPLICATION <application_name>                  |\n                              APPLICATION PACKAGE <application_package_name>  |\n                            }\n                      ]\n                      [ STARTS WITH '<name_string>' ]\n                      [ LIMIT <rows> [ FROM '<name_string>' ] ]",
    "examples": [
        {
            "code": "SHOW [ TERSE ] ALERTS [ LIKE '<pattern>' ]\n                      [ IN\n                            {\n                              ACCOUNT                                         |\n\n                              DATABASE                                        |\n                              DATABASE <database_name>                        |\n\n                              SCHEMA                                          |\n                              SCHEMA <schema_name>                            |\n                              <schema_name>\n\n                              APPLICATION <application_name>                  |\n                              APPLICATION PACKAGE <application_package_name>  |\n                            }\n                      ]\n                      [ STARTS WITH '<name_string>' ]\n                      [ LIMIT <rows> [ FROM '<name_string>' ] ]"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Returns only a subset of the output columns: created_on name kind (shows NULL for all alerts) database_name schema_name schedule state"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "Only returns rows for an alert owner (that is, the role with the OWNERSHIP privilege on an alert) or a role with the OPERATE\nprivilege on an alert.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-connections",
    "title": "SHOW CONNECTIONS",
    "description": "Lists the connections for which you have access privileges.",
    "syntax": "SHOW CONNECTIONS [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW CONNECTIONS LIKE 'test%';"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-secrets",
    "title": "SHOW SECRETS",
    "description": "Lists the secrets for which you have rights to see. This command can be used to list the secrets for a specified database\nor schema (or the current database/schema for the session), or your entire account.",
    "syntax": "SHOW SECRETS [ LIKE '<pattern>' ]\n             [ IN { ACCOUNT | [ DATABASE ] <db_name> | [ SCHEMA ] <schema_name> | APPLICATION <application_name> | APPLICATION PACKAGE <application_package_name> } ]",
    "examples": [
        {
            "code": "SHOW SECRETS [ LIKE '<pattern>' ]\n             [ IN { ACCOUNT | [ DATABASE ] <db_name> | [ SCHEMA ] <schema_name> | APPLICATION <application_name> | APPLICATION PACKAGE <application_package_name> } ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "Snowflake never returns the PASSWORD property value.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-databases",
    "title": "SHOW DATABASES",
    "description": "Lists the databases for which you have access privileges across your entire account, including dropped databases that are still within\nthe Time Travel retention period and, therefore, can be undropped.",
    "syntax": "SHOW [ TERSE ] DATABASES [ HISTORY ] [ LIKE '<pattern>' ]\n                                     [ STARTS WITH '<name_string>' ]\n                                     [ LIMIT <rows> [ FROM '<name_string>' ] ]\n                                     [ WITH PRIVILEGES <object_privilege> [ , <object_privilege> [ , ... ] ] ]",
    "examples": [
        {
            "code": "SHOW DATABASES;"
        },
        {
            "code": "+---------------------------------+-----------+------------+------------+--------+--------+---------+---------+----------------+----------+-----------------+-------------------+\n| created_on                      | name      | is_default | is_current | origin | owner  | comment | options | retention_time | kind     | owner_role_type | OBJECT_VISIBILITY |\n|---------------------------------+-----------+------------+------------+--------+--------+---------+---------+----------------+----------|-----------------|-------------------|\n| Tue, 17 Mar 2015 16:57:04 -0700 | MYTESTDB  | N          | Y          |        | PUBLIC |         |         | 1              | STANDARD | ROLE            | NULL              |\n| Wed, 25 Feb 2015 17:30:04 -0800 | SALES1    | N          | N          |        | PUBLIC |         |         | 1              | STANDARD | ROLE            | NULL              |\n| Fri, 13 Feb 2015 19:21:49 -0800 | DEMO1     | N          | N          |        | PUBLIC |         |         | 1              | STANDARD | ROLE            | NULL              |\n+---------------------------------+-----------+------------+------------+--------+--------+---------+---------+----------------+----------+-----------------+-------------------+"
        },
        {
            "code": "SHOW DATABASES HISTORY;"
        },
        {
            "code": "+---------------------------------+-----------+------------+------------+--------+--------+---------+---------+----------------+---------------------------------+----------+-----------------+-------------------+\n| created_on                      | name      | is_default | is_current | origin | owner  | comment | options | retention_time | dropped_on                      | kind     | owner_role_type | OBJECT_VISIBILITY |\n|---------------------------------+-----------+------------+------------+--------+--------+---------+---------+----------------+---------------------------------|----------|-----------------|-------------------|\n| Tue, 17 Mar 2015 16:57:04 -0700 | MYTESTDB  | N          | Y          |        | PUBLIC |         |         | 1              | [NULL]                          | STANDARD | ROLE            | NULL              |\n| Wed, 25 Feb 2015 17:30:04 -0800 | SALES1    | N          | N          |        | PUBLIC |         |         | 1              | [NULL]                          | STANDARD | ROLE            | NULL              |\n| Fri, 13 Feb 2015 19:21:49 -0800 | DEMO1     | N          | N          |        | PUBLIC |         |         | 1              | [NULL]                          | STANDARD | ROLE            | NULL              |\n| Wed, 25 Feb 2015 16:16:54 -0800 | MYTESTDB2 | N          | N          |        | PUBLIC |         |         | 1              | Fri, 13 May 2016 17:35:09 -0700 | STANDARD | ROLE            | NULL              |\n+---------------------------------+-----------+------------+------------+--------+--------+---------+---------+----------------+---------------------------------+----------+-----------------+-------------------+"
        },
        {
            "code": "SHOW DATABASES WITH PRIVILEGES USAGE, MODIFY;"
        },
        {
            "code": "+-------------------------------+-----------------------------------------------------------+------------+------------+-----------------------------------------------------------+--------------+---------+---------+----------------+-------------------+-----------------+-------------------+\n| created_on                    | name                                                      | is_default | is_current | origin                                                    | owner        | comment | options | retention_time | kind              | owner_role_type | OBJECT_VISIBILITY |\n|-------------------------------+-----------------------------------------------------------+------------+------------+-----------------------------------------------------------+--------------+---------+---------+----------------+-------------------+-----------------|-------------------|\n| 2023-01-27 14:33:11.417 -0800 | BOOKS_DB                                                  | N          | N          |                                                           | DATA_ADMIN   |         |         | 1              | STANDARD          | ROLE            | NULL              |\n| 2023-09-15 15:22:51.111 -0700 | TEST_DB                                                   | N          | N          |                                                           | ACCOUNTADMIN |         |         | 4              | STANDARD          | ROLE            | NULL              |\n| 2023-08-18 13:33:01.024 -0700 | SNOWFLAKE                                                 | N          | N          | SNOWFLAKE.ACCOUNT_USAGE                                   |              |         |         | 0              | APPLICATION       |                 | NULL              |\n+-------------------------------+-----------------------------------------------------------+------------+------------+-----------------------------------------------------------+--------------+---------+---------+----------------+-------------------+-----------------+-------------------+"
        }
    ],
    "parameters": [
        {
            "name": "TERSE",
            "description": "Optionally returns output containing only the following columns: created_on name kind database_name schema_name Note that kind , database_name , and schema_name always display NULL because the columns are not\napplicable for databases. Default: No value (all columns are included in the output)"
        },
        {
            "name": "HISTORY",
            "description": "Optionally includes dropped databases that have not yet been purged (i.e. they are still within their respective Time Travel\nretention periods). If multiple versions of a dropped database exist, the output displays a row for each version. The output also\nincludes an additional dropped_on column, which displays: Date and timestamp (for dropped databases). NULL (for active databases). Default: No value (dropped databases are not included in the output)"
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        },
        {
            "name": "WITH   PRIVILEGES   object_privilege   [   ,   object_privilege   [   ,   ...   ]   ]",
            "description": "Optionally limits rows to objects for which the active role for the current\nuser has been granted all of the specified privileges in the list on the object. If a CREATE <object> privilege is included in the privileges list, the command excludes objects for which secondary roles have\nbeen granted privileges. This is because only the primary role has the authorization to create objects. For more information, see Authorization through primary role and secondary roles ."
        },
        {
            "name": "OBJECT_VISIBILITY",
            "description": "This new column is appended to the existing views and is reserved for future use. For more information, see DATABASES and SCHEMATA views, and SHOW DATABASES and SHOW SCHEMAS commands: New column in output ."
        }
    ],
    "usage_notes": "The HISTORY and WITH PRIVILEGES parameters are mutually exclusive; they cannot both be used in the same statement.\nFor a personal database, the value in the kind column is PERSONAL DATABASE.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/classes/forecast/commands/show-forecast.html#label-class-forecast-show",
    "title": "SHOW SNOWFLAKE.ML.FORECAST",
    "description": "Lists all forecasting models.",
    "syntax": "{\n  SHOW SNOWFLAKE.ML.FORECAST           |\n  SHOW SNOWFLAKE.ML.FORECAST INSTANCES\n}\n  [ LIKE <pattern> ]\n  [ IN\n      {\n        ACCOUNT                  |\n\n        DATABASE                 |\n        DATABASE <database_name> |\n\n        SCHEMA                   |\n        SCHEMA <schema_name>     |\n        <schema_name>\n      }\n   ]",
    "examples": [
        {
            "code": "{\n  SHOW SNOWFLAKE.ML.FORECAST           |\n  SHOW SNOWFLAKE.ML.FORECAST INSTANCES\n}\n  [ LIKE <pattern> ]\n  [ IN\n      {\n        ACCOUNT                  |\n\n        DATABASE                 |\n        DATABASE <database_name> |\n\n        SCHEMA                   |\n        SCHEMA <schema_name>     |\n        <schema_name>\n      }\n   ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The order of results is not guaranteed."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-compute-pools",
    "title": "SHOW COMPUTE POOLS",
    "description": "Lists the compute pools in your account for which you have access privileges.",
    "syntax": "SHOW COMPUTE POOLS [ LIKE '<pattern>' ]\n                   [ STARTS WITH '<name_string>' ]\n                   [ LIMIT <ROWS> [ FROM '<name-string>' ] ]",
    "examples": [
        {
            "code": "SHOW COMPUTE POOLS;"
        },
        {
            "code": "SHOW COMPUTE POOLS LIMIT 1;"
        },
        {
            "code": "SHOW COMPUTE POOLS LIKE '%tu%';"
        },
        {
            "code": "SHOW COMPUTE POOLS LIKE '%my_pool%' LIMIT 2;"
        },
        {
            "code": "+-------------------------+-----------+-----------+-----------+-----------------+--------------+----------+-------------------+-------------+--------------+------------+--------------+-------------------------------+-------------------------------+-------------------------------+--------------+---------+--------------+-------------+--------+\n| name                    | state     | min_nodes | max_nodes | instance_family | num_services | num_jobs | auto_suspend_secs | auto_resume | active_nodes | idle_nodes | target_nodes | created_on                    | resumed_on                    | updated_on                    | owner        | comment | is_exclusive | application | budget |\n|-------------------------+-----------+-----------+-----------+-----------------+--------------+----------+-------------------+-------------+--------------+------------+--------------+-------------------------------+-------------------------------+-------------------------------+--------------+---------+--------------+-------------+--------|\n| TUTORIAL_COMPUTE_POOL   | ACTIVE    |         1 |         1 | CPU_X64_XS      |            3 |        0 |              3600 | true        |            1 |          0 |            1 | 2024-02-24 20:41:31.978 -0800 | 2024-08-08 11:27:01.775 -0700 | 2024-08-18 13:47:08.150 -0700 | TEST_ROLE    | NULL    | false        | NULL        | NULL   |\n| TUTORIAL_COMPUTE_POOL_2 | SUSPENDED |         1 |         1 | CPU_X64_XS      |            0 |        0 |              3600 | true        |            0 |          0 |            0 | 2024-01-15 21:23:09.744 -0800 | 2024-04-06 15:24:50.541 -0700 | 2024-08-18 13:46:08.110 -0700 | ACCOUNTADMIN | NULL    | false        | NULL        | NULL   |\n+-------------------------+-----------+-----------+-----------+-----------------+--------------+----------+-------------------+-------------+--------------+------------+--------------+-------------------------------+-------------------------------+-------------------------------+--------------+---------+--------------+-------------+--------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "STARTS   WITH   ' name_string '",
            "description": "Optionally filters the command output based on the characters that appear at the beginning of\nthe object name. The string must be enclosed in single quotes and is case sensitive . For example, the following strings return different results: . Default: No value (no filtering is applied to the output)"
        },
        {
            "name": "LIMIT   rows   [   FROM   ' name_string '   ]",
            "description": "Optionally limits the maximum number of rows returned, while also enabling “pagination” of the results. The actual number of rows\nreturned might be less than the specified limit. For example, the number of existing objects is less than the specified limit. The optional FROM ' name_string ' subclause effectively serves as a “cursor” for the results. This enables fetching the\nspecified number of rows following the first row whose object name matches the specified string: The string must be enclosed in single quotes and is case sensitive . The string does not have to include the full object name; partial names are supported. Default: No value (no limit is applied to the output) Note For SHOW commands that support both the FROM ' name_string ' and STARTS WITH ' name_string ' clauses, you can combine\nboth of these clauses in the same statement. However, both conditions must be met or they cancel out each other and no results are\nreturned. In addition, objects are returned in lexicographic order by name, so FROM ' name_string ' only returns rows with a higher\nlexicographic value than the rows returned by STARTS WITH ' name_string ' . For example: ... STARTS WITH 'A' LIMIT ... FROM 'B' would return no results. ... STARTS WITH 'B' LIMIT ... FROM 'A' would return no results. ... STARTS WITH 'A' LIMIT ... FROM 'AB' would return results (if any rows match the input strings)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-external-volumes",
    "title": "SHOW EXTERNAL VOLUMES",
    "description": "Lists the external volumes in your account for which you have access privileges.",
    "syntax": "SHOW EXTERNAL VOLUMES [ LIKE '<pattern>' ]",
    "examples": [
        {
            "code": "SHOW EXTERNAL VOLUMES;"
        },
        {
            "code": "SHOW EXTERNAL VOLUMES LIKE 'aws%';"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-transactions",
    "title": "SHOW TRANSACTIONS",
    "description": "List all running transactions. The command can be used to show transactions for the current user or all users in the account.",
    "syntax": "SHOW TRANSACTIONS [ IN ACCOUNT ]",
    "examples": [
        {
            "code": "SHOW TRANSACTIONS [ IN ACCOUNT ]"
        },
        {
            "code": "SHOW TRANSACTIONS;"
        },
        {
            "code": "+---------------------+---------+-----------------+--------------------------------------+-------------------------------+---------+-------+\n|                  id | user    |         session | name                                 | started_on                    | state   | scope |\n|---------------------+---------+-----------------+--------------------------------------+-------------------------------+---------+-------|\n| 1721165674582000000 | CALIBAN | 186457423713330 | 551f494d-90ed-438d-b32b-1161396c3a22 | 2024-07-16 14:34:34.582 -0700 | running |     0 |\n| 1721165584820000000 | CALIBAN | 186457423749354 | a092aa44-9a0a-4955-9659-123b35c0efeb | 2024-07-16 14:33:04.820 -0700 | running |     0 |\n+---------------------+---------+-----------------+--------------------------------------+-------------------------------+---------+-------+"
        }
    ],
    "parameters": [
        {
            "name": "IN   ACCOUNT",
            "description": "Shows all transactions across all users in the account. It can only be used by users with the ACCOUNTADMIN role (i.e. account administrators)."
        }
    ],
    "usage_notes": "The command output includes the IDs for all running transactions. These IDs can be used as input for\nSYSTEM$ABORT_TRANSACTION to abort a specified transaction.\nA stored procedure that contains a transaction can be called from within another transaction. These\ntransactions are separate but “scoped.” The values in the scope column are useful for discovering whether two transactions are in the same scope.\nFor more information, see Scoped transactions.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-locks",
    "title": "SHOW LOCKS",
    "description": "Lists all running transactions that have locks on resources. The command can be used to show locks for the current user in all the\nuser’s sessions or all users in the account.",
    "syntax": "SHOW LOCKS [ IN ACCOUNT ]",
    "examples": [
        {
            "code": "SHOW LOCKS;"
        },
        {
            "code": "+---------------------------+------------+---------------------+-------------------------------+---------+-------------------------------+--------------------------------------+\n| resource                  | type       |         transaction | transaction_started_on        | status  | acquired_on                   | query_id                             |\n|---------------------------+------------+---------------------+-------------------------------+---------+-------------------------------+--------------------------------------|\n| CALIBAN_DB.PUBLIC.WEATHER | PARTITIONS | 1721330303831000000 | 2024-07-18 12:18:23.831 -0700 | HOLDING | 2024-07-18 12:18:49.832 -0700 | 01b5c1c6-0002-8691-0000-a9950068a0c6 |\n+---------------------------+------------+---------------------+-------------------------------+---------+-------------------------------+--------------------------------------+"
        },
        {
            "code": "SHOW LOCKS;"
        },
        {
            "code": "+---------------------+------+---------------------+-------------------------------+---------+-------------+--------------------------------------+\n| resource            | type |         transaction | transaction_started_on        | status  | acquired_on | query_id                             |\n|---------------------+------+---------------------+-------------------------------+---------+-------------+--------------------------------------|\n| 1721165584820000000 | ROW  | 1721165584820000000 | 2024-07-16 14:33:04.820 -0700 | HOLDING | NULL        |                                      |\n| 1721165584820000000 | ROW  | 1721165674582000000 | 2024-07-16 14:34:34.582 -0700 | WAITING | NULL        | 01b5b715-0002-852b-0000-a99500665352 |\n+---------------------+------+---------------------+-------------------------------+---------+-------------+--------------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "IN   ACCOUNT",
            "description": "Returns all locks across all users in the account. This parameter only applies when executed by users with the ACCOUNTADMIN role\n(account administrators). For all other roles, the function only shows locks across all sessions for the current user."
        }
    ],
    "usage_notes": "The command output includes the IDs for all running transactions that have locks on resources. These IDs can be used as input for\nSYSTEM$ABORT_TRANSACTION to abort a specified transaction.\nFor hybrid tables, this command displays a lock only if a transaction is blocked, or is blocking another transaction.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-file-formats",
    "title": "SHOW FILE FORMATS",
    "description": "Lists the file formats for which you have access privileges. This command can be used to list the file formats for a specified\ndatabase or schema (or the current database/schema for the session), or your entire account.",
    "examples": [
        {
            "code": "USE DATABASE testdb;\n\nSHOW FILE FORMATS;"
        },
        {
            "code": "+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+\n| created_on                      | name      | database_name | schema_name | type | owner        | comment | owner_role_type |\n+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+\n| Wed, 29 Apr 2015 18:59:03 -0700 | MY_FORMAT | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | CSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | VSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | TSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+"
        },
        {
            "code": "SHOW FILE FORMATS IN DATABASE testdb;"
        },
        {
            "code": "+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+\n| created_on                      | name      | database_name | schema_name | type | owner        | comment | owner_role_type |\n+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+\n| Wed, 29 Apr 2015 18:59:03 -0700 | MY_FORMAT | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | CSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | VSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | TSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+"
        },
        {
            "code": "SHOW FILE FORMATS IN SCHEMA testdb.public;"
        },
        {
            "code": "+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+\n| created_on                      | name      | database_name | schema_name | type | owner        | comment | owner_role_type |\n+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+\n| Wed, 29 Apr 2015 18:59:03 -0700 | MY_FORMAT | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | CSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | VSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n| Mon, 27 Apr 2015 17:49:12 -0700 | TSV       | TESTDB        | PUBLIC      | CSV  | ACCOUNTADMIN |         | ROLE            |\n+---------------------------------+-----------+---------------+-------------+------+--------------+---------+-----------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Returns records for the named Snowflake Native App or application package. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        },
        {
            "name": "APPLICATION   application_name ,  .   APPLICATION   PACKAGE   application_package_name",
            "description": "Returns records for the named Snowflake Native App or application package."
        }
    ],
    "usage_notes": "The output of this command might include objects with names like SN_TEMP_OBJECT_<n> (where <n> is a number). These are\ntemporary objects that are created by the Snowpark library on behalf of the user.\nThe command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe command returns a maximum of ten thousand records for the specified object type, as dictated by the access privileges for the role\nused to execute the command. Any records above the ten thousand records limit aren’t returned, even with a filter applied.\nTo view results for which more than ten thousand records exist, query the corresponding view (if one exists) in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-projection-policies",
    "title": "SHOW PROJECTION POLICIES",
    "description": "Lists projection policy information, including the creation date, database and schema names,\nowner, and any available comments.",
    "syntax": "SHOW PROJECTION POLICIES [ LIKE '<pattern>' ]\n                         [ IN\n                              {\n                                ACCOUNT                  |\n\n                                DATABASE [ <database_name> ] |\n\n                                SCHEMA [ <schema_name> ]     |\n                              }\n                         ]",
    "examples": [
        {
            "code": "SHOW PROJECTION POLICIES [ LIKE '<pattern>' ]\n                         [ IN\n                              {\n                                ACCOUNT                  |\n\n                                DATABASE [ <database_name> ] |\n\n                                SCHEMA [ <schema_name> ]     |\n                              }\n                         ]"
        },
        {
            "code": "SHOW PROJECTION POLICIES;"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query.\nThe value for LIMIT rows can’t exceed 10000. If LIMIT rows is omitted, the command results in an error\nif the result set is larger than ten thousand rows.\nTo view results for which more than ten thousand records exist, either include LIMIT rows or query the corresponding\nview in the Snowflake Information Schema."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/classes/anomaly-detection/commands/show-anomaly-detection.html#label-class-anomaly-detection-show",
    "title": "SHOW SNOWFLAKE.ML.ANOMALY_DETECTION",
    "description": "Lists all anomaly detection models.",
    "syntax": "{\n  SHOW SNOWFLAKE.ML.ANOMALY_DETECTION           |\n  SHOW SNOWFLAKE.ML.ANOMALY_DETECTION INSTANCES\n}\n  [ LIKE <pattern> ]\n  [ IN\n      {\n        ACCOUNT                  |\n\n        DATABASE                 |\n        DATABASE <database_name> |\n\n        SCHEMA                   |\n        SCHEMA <schema_name>     |\n        <schema_name>\n      }\n   ]",
    "examples": [
        {
            "code": "{\n  SHOW SNOWFLAKE.ML.ANOMALY_DETECTION           |\n  SHOW SNOWFLAKE.ML.ANOMALY_DETECTION INSTANCES\n}\n  [ LIKE <pattern> ]\n  [ IN\n      {\n        ACCOUNT                  |\n\n        DATABASE                 |\n        DATABASE <database_name> |\n\n        SCHEMA                   |\n        SCHEMA <schema_name>     |\n        <schema_name>\n      }\n   ]"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "[   IN   ...   ]",
            "description": "Optionally specifies the scope of the command. Specify one of the following: Returns records for the entire account. Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables. Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output. Default: Depends on whether the session currently has a database in use: Database: DATABASE is the default (that is, the command returns the objects you have privileges to view in the database). No database: ACCOUNT is the default (that is, the command returns the objects you have privileges to view in your account)."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns records for the entire account."
        },
        {
            "name": "DATABASE ,  .   DATABASE   db_name",
            "description": "Returns records for the current database in use or for a specified database ( db_name ). If you specify DATABASE without db_name and no database is in use, the keyword has no effect on the output. Note Using SHOW commands without an IN clause in a database context can result in fewer than expected results. Objects with the same name are only displayed once if no IN clause is used. For example, if you have table t1 in schema1 and table t1 in schema2 , and they are both in scope of the database context you’ve specified (that is, the database\nyou’ve selected is the parent of schema1 and schema2 ), then SHOW TABLES only displays one of the t1 tables."
        },
        {
            "name": "SCHEMA ,  .   SCHEMA   schema_name",
            "description": "Returns records for the current schema in use or a specified schema ( schema_name ). SCHEMA is optional if a database is in use or if you specify the fully qualified schema_name (for example, db.schema ). If no database is in use, specifying SCHEMA has no effect on the output."
        }
    ],
    "usage_notes": "The order of results is not guaranteed."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/sql/show-parameters",
    "title": "SHOW PARAMETERS",
    "description": "Lists all the account, session, and object parameters that can be set, as well as the current and default values for each parameter:",
    "syntax": "SHOW PARAMETERS\n  [ LIKE '<pattern>' ]\n  [ { IN | FOR } {\n        { SESSION | ACCOUNT }\n      | { USER | WAREHOUSE | DATABASE | SCHEMA | TASK } [ <name> ]\n      | TABLE [ <table_or_view_name> ]\n    } ]",
    "examples": [
        {
            "code": "SHOW PARAMETERS;\n\n+-------------------------------------+----------------------------------+----------------------------------+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| key                                 | value                            | default                          | level   | description                                                                                                                                                                         |\n|-------------------------------------+----------------------------------+----------------------------------+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| ABORT_DETACHED_QUERY                | false                            | false                            | SESSION | If true, Snowflake will automatically abort queries when it detects that the client has disappeared.                                                                                |\n| AUTOCOMMIT                          | true                             | true                             | SESSION | The autocommit property determines whether is statement should to be implicitly                                                                                                     |\n|                                     |                                  |                                  |         | wrapped within a transaction or not. If autocommit is set to true, then a                                                                                                           |\n|                                     |                                  |                                  |         | statement that requires a transaction is executed within a transaction                                                                                                              |\n|                                     |                                  |                                  |         | implicitly. If autocommit is off then an explicit commit or rollback is required                                                                                                    |\n|                                     |                                  |                                  |         | to close a transaction. The default autocommit value is true.                                                                                                                       |\n| AUTOCOMMIT_API_SUPPORTED            | true                             | true                             |         | Whether autocommit feature is enabled for this client. This parameter is for                                                                                                        |\n|                                     |                                  |                                  |         | Snowflake use only.                                                                                                                                                                 |\n| BINARY_INPUT_FORMAT                 | HEX                              | HEX                              |         | input format for binary                                                                                                                                                             |\n| BINARY_OUTPUT_FORMAT                | HEX                              | HEX                              |         | display format for binary                                                                                                                                                           |\n| CLIENT_SESSION_KEEP_ALIVE           | false                            | false                            |         | If true, client session will not expire automatically                                                                                                                               |\n| DATE_INPUT_FORMAT                   | AUTO                             | AUTO                             |         | input format for date                                                                                                                                                               |\n| DATE_OUTPUT_FORMAT                  | YYYY-MM-DD                       | YYYY-MM-DD                       |         | display format for date                                                                                                                                                             |\n| ERROR_ON_NONDETERMINISTIC_MERGE     | true                             | true                             |         | raise an error when attempting to merge-update a row that joins many rows                                                                                                           |\n| ERROR_ON_NONDETERMINISTIC_UPDATE    | false                            | false                            |         | raise an error when attempting to update a row that joins many rows                                                                                                                 |\n| LOCK_TIMEOUT                        | 43200                            | 43200                            |         | Number of seconds to wait while trying to lock a resource, before timing out                                                                                                        |\n|                                     |                                  |                                  |         | and aborting the statement. A value of 0 turns off lock waiting i.e. the                                                                                                            |\n|                                     |                                  |                                  |         | statement must acquire the lock immediately or abort. If multiple resources                                                                                                         |\n|                                     |                                  |                                  |         | need to be locked by the statement, the timeout applies separately to each                                                                                                          |\n|                                     |                                  |                                  |         | lock attempt.                                                                                                                                                                       |\n| QUERY_TAG                           |                                  |                                  |         | String (up to 2000 characters) used to tag statements executed by the session                                                                                                       |\n| QUOTED_IDENTIFIERS_IGNORE_CASE      | false                            | false                            |         | If true, the case of quoted identifiers is ignored                                                                                                                                  |\n| ROWS_PER_RESULTSET                  | 0                                | 0                                |         | maxium number of rows in a result set                                                                                                                                               |\n| STATEMENT_QUEUED_TIMEOUT_IN_SECONDS | 0                                | 0                                |         | Timeout in seconds for queued statements: statements will automatically be canceled if they are queued on a warehouse for longer than this amount of time; disabled if set to zero. |\n| STATEMENT_TIMEOUT_IN_SECONDS        | 0                                | 0                                |         | Timeout in seconds for statements: statements will automatically be canceled if they run for longer than this amount of time; disabled if set to zero.                              |\n| TIMESTAMP_DAY_IS_ALWAYS_24H         | false                            | true                             | SYSTEM  | If set, arithmetic on days always uses 24 hours per day,                                                                                                                            |\n|                                     |                                  |                                  |         | possibly not preserving the time (due to DST changes)                                                                                                                               |\n| TIMESTAMP_INPUT_FORMAT              | AUTO                             | AUTO                             |         | input format for timestamp                                                                                                                                                          |\n| TIMESTAMP_LTZ_OUTPUT_FORMAT         |                                  |                                  |         | Display format for TIMESTAMP_LTZ values. If empty, TIMESTAMP_OUTPUT_FORMAT is used.                                                                                                 |\n| TIMESTAMP_NTZ_OUTPUT_FORMAT         | YYYY-MM-DD HH24:MI:SS.FF3        | YYYY-MM-DD HH24:MI:SS.FF3        | SYSTEM  | Display format for TIMESTAMP_NTZ values. If empty, TIMESTAMP_OUTPUT_FORMAT is used.                                                                                                 |\n| TIMESTAMP_OUTPUT_FORMAT             | YYYY-MM-DD HH24:MI:SS.FF3 TZHTZM | YYYY-MM-DD HH24:MI:SS.FF3 TZHTZM | SYSTEM  | Default display format for all timestamp types.                                                                                                                                     |\n| TIMESTAMP_TYPE_MAPPING              | TIMESTAMP_NTZ                    | TIMESTAMP_NTZ                    | SYSTEM  | If TIMESTAMP type is used, what specific TIMESTAMP* type it should map to:                                                                                                          |\n|                                     |                                  |                                  |         |   TIMESTAMP_LTZ (default), TIMESTAMP_NTZ or TIMESTAMP_TZ                                                                                                                            |\n| TIMESTAMP_TZ_OUTPUT_FORMAT          |                                  |                                  |         | Display format for TIMESTAMP_TZ values. If empty, TIMESTAMP_OUTPUT_FORMAT is used.                                                                                                  |\n| TIMEZONE                            | America/Los_Angeles              | America/Los_Angeles              |         | time zone                                                                                                                                                                           |\n| TIME_INPUT_FORMAT                   | AUTO                             | AUTO                             |         | input format for time                                                                                                                                                               |\n| TIME_OUTPUT_FORMAT                  | HH24:MI:SS                       | HH24:MI:SS                       |         | display format for time                                                                                                                                                             |\n| TRANSACTION_ABORT_ON_ERROR          | false                            | false                            |         | If this parameter is true, and a statement issued within a non-autocommit                                                                                                           |\n|                                     |                                  |                                  |         | transaction returns with an error, then the non-autocommit transaction is                                                                                                           |\n|                                     |                                  |                                  |         | aborted. All statements issued inside that transaction will fail until an                                                                                                           |\n|                                     |                                  |                                  |         | commit or rollback statement is executed to close that transaction.                                                                                                                 |\n| TRANSACTION_DEFAULT_ISOLATION_LEVEL | READ COMMITTED                   | READ COMMITTED                   |         | The default isolation level when starting a starting a transaction, when no                                                                                                         |\n|                                     |                                  |                                  |         | isolation level was specified                                                                                                                                                       |\n| TWO_DIGIT_CENTURY_START             | 1970                             | 1970                             |         | For 2-digit dates, defines a century-start year.                                                                                                                                    |\n|                                     |                                  |                                  |         | For example, when set to 1980:                                                                                                                                                      |\n|                                     |                                  |                                  |         |   - parsing a string '79' will produce 2079                                                                                                                                         |\n|                                     |                                  |                                  |         |   - parsing a string '80' will produce 1980                                                                                                                                         |\n| UNSUPPORTED_DDL_ACTION              | ignore                           | ignore                           |         | The action to take upon encountering an unsupported ddl statement                                                                                                                   |\n| USE_CACHED_RESULT                   | true                             | true                             |         | If enabled, query results can be reused between successive invocations of the same query as long as the original result has not expired                                             |\n+-------------------------------------+----------------------------------+----------------------------------+---------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
        },
        {
            "code": "SHOW PARAMETERS IN WAREHOUSE testwh;\n\n+-------------------------------------+--------+---------+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| key                                 | value  | default | level | description                                                                                                                                                                                                                   |\n|-------------------------------------+--------+---------+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| MAX_CONCURRENCY_LEVEL               | 8      | 8       |       | Concurrency level for SQL statements (i.e. queries and DML) executed by a warehouse cluster (used to determine when statements are queued or additional clusters are started). Small SQL statements count as a fraction of 1. |\n| STATEMENT_QUEUED_TIMEOUT_IN_SECONDS | 0      | 0       |       | Timeout in seconds for queued statements: statements will automatically be canceled if they are queued on a warehouse for longer than this amount of time; disabled if set to zero.                                           |\n| STATEMENT_TIMEOUT_IN_SECONDS        | 172800 | 172800  |       | Timeout in seconds for statements: statements are automatically canceled if they run for longer; if set to zero, max value (604800) is enforced.                                                                              |\n+-------------------------------------+--------+---------+-------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+"
        },
        {
            "code": "USE DATABASE testdb;\n\nSHOW PARAMETERS IN DATABASE;\n\n+-----------------------------+-------+---------+-------+------------------------------------------------------------------+\n| key                         | value | default | level | description                                                      |\n|-----------------------------+-------+---------+-------+------------------------------------------------------------------|\n| DATA_RETENTION_TIME_IN_DAYS | 1     | 1       |       | number of days to retain the old version of deleted/updated data |\n+-----------------------------+-------+---------+-------+------------------------------------------------------------------+"
        }
    ],
    "parameters": [
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   |   FOR",
            "description": "IN ... or FOR ... specifies the scope of the command, which determines the parameters that are returned: Returns all the session parameters and their settings for the current session. A user can change these parameters for their session\nusing ALTER SESSION . Returns a list of the account, session, and object parameters that can be set at the account level. A user with the ACCOUNTADMIN role\n(i.e. account administrator) can change these parameters via ALTER ACCOUNT . For more information, see Parameter management . Returns a list of the session parameter defaults that are set for the specified user (or the current user) each time the user\nlogs in. If no user is specified, the command returns results for the current user. An administrator with the appropriate user privileges can change the session parameter defaults for a user using ALTER USER . Individual users can also change their session parameter defaults using ALTER USER . Returns the object parameters that can be set for the current/specified object. Users with the appropriate privileges can change these\nparameters using the corresponding ALTER <object> command. Returns the object parameters that can be set for the specified table or view. Users with the appropriate privileges can change these\nparameters using the ALTER TABLE command. Use TABLE as the domain for all table-like objects, such as tables, views, and materialized views. Default: SESSION"
        },
        {
            "name": "SESSION",
            "description": "Returns all the session parameters and their settings for the current session. A user can change these parameters for their session\nusing ALTER SESSION ."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns a list of the account, session, and object parameters that can be set at the account level. A user with the ACCOUNTADMIN role\n(i.e. account administrator) can change these parameters via ALTER ACCOUNT . For more information, see Parameter management ."
        },
        {
            "name": "USER   [   name   ]",
            "description": "Returns a list of the session parameter defaults that are set for the specified user (or the current user) each time the user\nlogs in. If no user is specified, the command returns results for the current user. An administrator with the appropriate user privileges can change the session parameter defaults for a user using ALTER USER . Individual users can also change their session parameter defaults using ALTER USER ."
        },
        {
            "name": "WAREHOUSE   |   DATABASE   |   SCHEMA   |   TASK   [   name   ]",
            "description": "Returns the object parameters that can be set for the current/specified object. Users with the appropriate privileges can change these\nparameters using the corresponding ALTER <object> command."
        },
        {
            "name": "TABLE   [   table_or_view_name   ]",
            "description": "Returns the object parameters that can be set for the specified table or view. Users with the appropriate privileges can change these\nparameters using the ALTER TABLE command. Use TABLE as the domain for all table-like objects, such as tables, views, and materialized views."
        },
        {
            "name": "LIKE   ' pattern '",
            "description": "Optionally filters the command output by object name. The filter uses case-insensitive pattern matching, with support for SQL\nwildcard characters ( % and _ ). For example, the following patterns return the same results: . Default: No value (no filtering is applied to the output)."
        },
        {
            "name": "IN   |   FOR",
            "description": "IN ... or FOR ... specifies the scope of the command, which determines the parameters that are returned: Returns all the session parameters and their settings for the current session. A user can change these parameters for their session\nusing ALTER SESSION . Returns a list of the account, session, and object parameters that can be set at the account level. A user with the ACCOUNTADMIN role\n(i.e. account administrator) can change these parameters via ALTER ACCOUNT . For more information, see Parameter management . Returns a list of the session parameter defaults that are set for the specified user (or the current user) each time the user\nlogs in. If no user is specified, the command returns results for the current user. An administrator with the appropriate user privileges can change the session parameter defaults for a user using ALTER USER . Individual users can also change their session parameter defaults using ALTER USER . Returns the object parameters that can be set for the current/specified object. Users with the appropriate privileges can change these\nparameters using the corresponding ALTER <object> command. Returns the object parameters that can be set for the specified table or view. Users with the appropriate privileges can change these\nparameters using the ALTER TABLE command. Use TABLE as the domain for all table-like objects, such as tables, views, and materialized views. Default: SESSION"
        },
        {
            "name": "SESSION",
            "description": "Returns all the session parameters and their settings for the current session. A user can change these parameters for their session\nusing ALTER SESSION ."
        },
        {
            "name": "ACCOUNT",
            "description": "Returns a list of the account, session, and object parameters that can be set at the account level. A user with the ACCOUNTADMIN role\n(i.e. account administrator) can change these parameters via ALTER ACCOUNT . For more information, see Parameter management ."
        },
        {
            "name": "USER   [   name   ]",
            "description": "Returns a list of the session parameter defaults that are set for the specified user (or the current user) each time the user\nlogs in. If no user is specified, the command returns results for the current user. An administrator with the appropriate user privileges can change the session parameter defaults for a user using ALTER USER . Individual users can also change their session parameter defaults using ALTER USER ."
        },
        {
            "name": "WAREHOUSE   |   DATABASE   |   SCHEMA   |   TASK   [   name   ]",
            "description": "Returns the object parameters that can be set for the current/specified object. Users with the appropriate privileges can change these\nparameters using the corresponding ALTER <object> command."
        },
        {
            "name": "TABLE   [   table_or_view_name   ]",
            "description": "Returns the object parameters that can be set for the specified table or view. Users with the appropriate privileges can change these\nparameters using the ALTER TABLE command. Use TABLE as the domain for all table-like objects, such as tables, views, and materialized views."
        }
    ],
    "usage_notes": "The command doesn’t require a running warehouse to execute.\nThe command only returns objects for which the current user’s current role has been granted at least one access privilege.\nThe MANAGE GRANTS access privilege implicitly allows its holder to see every object in the account. By default, only the account\nadministrator (users with the ACCOUNTADMIN role) and security administrator (users with the SECURITYADMIN role) have the\nMANAGE GRANTS privilege.\nTo post-process the output of this command, you can use the pipe operator\nor the RESULT_SCAN function. Both constructs treat the output as a result set that\nyou can query."
}
]