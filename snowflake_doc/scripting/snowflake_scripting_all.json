[
{
    "url": "https://docs.snowflake.com/en/sql-reference-snowflake-scripting#snowflake-scripting-reference",
    "title": "Snowflake Scripting reference",
    "description": "These topics provide reference information for the language elements supported in\nSnowflake Scripting."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/while",
    "title": "WHILE (Snowflake Scripting)",
    "description": "A WHILE loop iterates while a specified condition is true.",
    "syntax": "WHILE ( <condition> ) { DO | LOOP }\n    <statement>;\n    [ <statement>; ... ]\nEND { WHILE | LOOP } [ <label> ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "CREATE PROCEDURE power_of_2()\nRETURNS NUMBER(8, 0)\nLANGUAGE SQL\nAS\n$$\nDECLARE\n  counter NUMBER(8, 0);      -- Loop counter.\n  power_of_2 NUMBER(8, 0);   -- Stores the most recent power of 2 that we calculated.\nBEGIN\n  counter := 1;\n  power_of_2 := 1;\n  WHILE (counter <= 8) DO\n    power_of_2 := power_of_2 * 2;\n    counter := counter + 1;\n  END WHILE;\n  RETURN power_of_2;\nEND;\n$$\n;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/return",
    "title": "RETURN (Snowflake Scripting)",
    "description": "Returns the value of a specified expression.",
    "syntax": "RETURN <expression>;",
    "examples": [
        {
            "title": "Examples",
            "code": "DECLARE\n  my_var VARCHAR;\nBEGIN\n  my_var := 'Snowflake';\n  RETURN my_var;\nEND;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/repeat",
    "title": "REPEAT (Snowflake Scripting)",
    "description": "A REPEAT loop iterates until a specified condition is true. A REPEAT loop tests the condition at\nthe end of the loop. This means that the body of a REPEAT loop always executes at least once.",
    "syntax": "REPEAT\n    <statement>;\n    [ <statement>; ... ]\nUNTIL ( <condition> )\nEND REPEAT [ <label> ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "CREATE PROCEDURE power_of_2()\nRETURNS NUMBER(8, 0)\nLANGUAGE SQL\nAS\n$$\nDECLARE\n    counter NUMBER(8, 0);      -- Loop counter.\n    power_of_2 NUMBER(8, 0);   -- Stores the most recent power of 2 that we calculated.\nBEGIN\n    counter := 1;\n    power_of_2 := 1;\n    REPEAT\n        power_of_2 := power_of_2 * 2;\n        counter := counter + 1;\n    UNTIL (counter > 8)\n    END REPEAT;\n    RETURN power_of_2;\nEND;\n$$;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/raise",
    "title": "RAISE (Snowflake Scripting)",
    "description": "Raises an exception.",
    "syntax": "RAISE <exception_name> ;",
    "examples": [
        {
            "title": "Examples",
            "code": "CREATE PROCEDURE thrower()\nRETURNS VARCHAR\nLANGUAGE SQL\nAS\n$$\n    DECLARE\n        MY_EXCEPTION EXCEPTION;\n    BEGIN\n        RAISE MY_EXCEPTION;\n    END;\n$$\n;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/open",
    "title": "OPEN (Snowflake Scripting)",
    "description": "Opens a cursor.",
    "syntax": "OPEN <cursor_name> [ USING (bind_variable_1 [, bind_variable_2 ...] ) ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "DECLARE\n    c1 CURSOR FOR SELECT price FROM invoices;\nBEGIN\n    OPEN c1;\n    ..."
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/null",
    "title": "NULL (Snowflake Scripting)",
    "description": "NULL can be used as a “no-op” (no operation) statement.",
    "syntax": "NULL;"
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/loop",
    "title": "LOOP (Snowflake Scripting)",
    "description": "A LOOP loop does not specify a number of iterations or a terminating condition. The user must explicitly\nexit the loop by using BREAK or RETURN inside the loop.",
    "syntax": "LOOP\n    <statement>;\n    [ <statement>; ... ]\nEND LOOP [ <label> ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "CREATE TABLE dummy_data (ID INTEGER);\n\nCREATE PROCEDURE break_out_of_loop()\nRETURNS INTEGER\nLANGUAGE SQL\nAS\n$$\n    DECLARE\n        counter INTEGER;\n    BEGIN\n        counter := 0;\n        LOOP\n            counter := counter + 1;\n            IF (counter > 5) THEN\n                BREAK;\n            END IF;\n            INSERT INTO dummy_data (ID) VALUES (:counter);\n        END LOOP;\n        RETURN counter;\n    END;\n$$\n;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/let",
    "title": "LET (Snowflake Scripting)",
    "description": "Assigns an expression to a Snowflake Scripting variable, cursor, or RESULTSET.",
    "syntax": "LET { <variable_assignment> | <cursor_assignment> | <resultset_assignment> }\n\nLET <variable_name> <type> { DEFAULT | := } <expression> ;\n\nLET <variable_name> { DEFAULT | := } <expression> ;\n\nBEGIN\n  ...\n  LET profit NUMBER(38, 2) DEFAULT 0.0;\n  LET revenue NUMBER(38, 2) DEFAULT 110.0;\n  LET cost NUMBER(38, 2) := 100.0;\n  ...\n\nLET <cursor_name> CURSOR FOR <query> ;\n\nLET <cursor_name> CURSOR FOR <resultset_name> ;\n\nBEGIN\n  ...\n  LET c1 CURSOR FOR SELECT price FROM invoices;\n  ...\n\n<resultset_name> := ( <query> ) ;\n\nBEGIN\n  ...\n  LET res RESULTSET := (SELECT price FROM invoices);\n  ..."
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/if",
    "title": "IF (Snowflake Scripting)",
    "description": "An IF statement provides a way to execute a set of statements if a condition is met.",
    "syntax": "IF ( <condition> ) THEN\n    <statement>;\n    [ <statement>; ... ]\n[\nELSEIF ( <condition> ) THEN\n    <statement>;\n    [ <statement>; ... ]\n]\n[\nELSE\n    <statement>;\n    [ <statement>; ... ]\n]\nEND IF;",
    "examples": [
        {
            "title": "Examples",
            "code": "CREATE OR REPLACE PROCEDURE example_if(flag INTEGER)\nRETURNS VARCHAR\nLANGUAGE SQL\nAS\n$$\nBEGIN\n  IF (FLAG = 1) THEN\n    RETURN 'one';\n  ELSEIF (FLAG = 2) THEN\n    RETURN 'two';\n  ELSE\n    RETURN 'Unexpected input.';\n  END IF;\nEND;\n$$\n;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/for",
    "title": "FOR (Snowflake Scripting)",
    "description": "A FOR loop repeats a sequence of steps a specific number of times. The number of times might be specified by the\nuser, or might be specified by the number of rows in a cursor. The syntax\nof these two types of FOR loops is slightly different.",
    "syntax": "FOR <row_variable> IN <cursor_name> DO\n    statement;\n    [ statement; ... ]\nEND FOR [ <label> ] ;\n\nFOR <counter_variable> IN [ REVERSE ] <start> TO <end> { DO | LOOP }\n    statement;\n    [ statement; ... ]\nEND { FOR | LOOP } [ <label> ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "CREATE or replace TABLE invoices (price NUMBER(12, 2));\nINSERT INTO invoices (price) VALUES\n    (11.11),\n    (22.22);"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/fetch",
    "title": "FETCH (Snowflake Scripting)",
    "description": "Uses the specified cursor to fetch one or more rows.",
    "syntax": "FETCH <cursor_name> INTO <variable> [, <variable> ... ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "FETCH my_cursor_name INTO my_variable_name ;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/exception",
    "title": "EXCEPTION (Snowflake Scripting)",
    "description": "Specifies how to handle exceptions raised in the Snowflake Scripting block.",
    "syntax": "EXCEPTION\n    WHEN <exception_name> [ OR <exception_name> ... ] THEN\n        <statement>;\n        [ <statement>; ... ]\n    [ WHEN ... ]\n    [ WHEN OTHER THEN ]\n        <statement>;\n        [ <statement>; ... ]",
    "examples": [
        {
            "title": "Examples",
            "code": "DECLARE\n  RESULT VARCHAR;\n  EXCEPTION_1 EXCEPTION (-20001, 'I caught the expected exception.');\n  EXCEPTION_2 EXCEPTION (-20002, 'Not the expected exception!');\nBEGIN\n  RESULT := 'If you see this, I did not catch any exception.';\n  IF (TRUE) THEN\n    RAISE EXCEPTION_1;\n  END IF;\n  RETURN RESULT;\nEXCEPTION\n  WHEN EXCEPTION_2 THEN\n    RETURN SQLERRM;\n  WHEN EXCEPTION_1 THEN\n    RETURN SQLERRM;\nEND;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/declare",
    "title": "DECLARE (Snowflake Scripting)",
    "description": "Declares one or more Snowflake Scripting variables, cursors, RESULTSETs, nested stored procedures, or exceptions.",
    "syntax": "DECLARE\n  {   <variable_declaration>\n    | <cursor_declaration>\n    | <resultset_declaration>\n    | <nested_stored_procedure_declaration>\n    | <exception_declaration> };\n  [\n    {   <variable_declaration>\n      | <cursor_declaration>\n      | <resultset_declaration>\n      | <nested_stored_procedure_declaration>\n      | <exception_declaration> };\n    ...\n  ]\n\n<variable_declaration> ::=\n  <variable_name> [<type>] [ { DEFAULT | := } <expression>]\n\nprofit NUMBER(38, 2) := 0;\n\n<cursor_declaration> ::=\n  <cursor_name> CURSOR FOR <query>\n\nc1 CURSOR FOR SELECT id, price FROM invoices;\n\n<resultset_name> RESULTSET [ { DEFAULT | := } [ ASYNC ] ( <query> ) ] ;\n\nres RESULTSET DEFAULT (SELECT col1 FROM mytable ORDER BY col1);\n\n<nested_procedure_name> PROCEDURE (\n    [ <arg_name> <arg_data_type> ] [ , ... ] )\n  RETURNS { <result_data_type> | TABLE ( [ <col_name> <col_data_type> [ , ... ] ] ) }\n  AS <nested_procedure_definition>\n\nRETURNS TABLE (sales_date DATE, quantity NUMBER)\n\nRETURNS TABLE ()\n\nCREATE OR REPLACE PROCEDURE test_return_geography_table_1()\n  RETURNS TABLE(g GEOGRAPHY)\n  ...\n\nWITH test_return_geography_table_1() AS PROCEDURE\n  RETURNS TABLE(g GEOGRAPHY)\n  ...\nCALL test_return_geography_table_1();\n\nStored procedure execution error: data type of returned table does not match expected returned table type\n\nCREATE OR REPLACE PROCEDURE test_return_geography_table_1()\n  RETURNS TABLE()\n  ...\n\nWITH test_return_geography_table_1() AS PROCEDURE\n  RETURNS TABLE()\n  ...\nCALL test_return_geography_table_1();\n\n<exception_name> EXCEPTION [ ( <exception_number> , '<exception_message>' ) ] ;\n\nexception_could_not_create_table EXCEPTION (-20003, 'ERROR: Could not create table.');",
    "examples": [
        {
            "title": "Examples",
            "code": "DECLARE\n  profit number(38, 2) DEFAULT 0.0;\nBEGIN\n  LET cost number(38, 2) := 100.0;\n  LET revenue number(38, 2) DEFAULT 110.0;\n\n  profit := revenue - cost;\n  RETURN profit;\nEND;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/continue",
    "title": "CONTINUE (Snowflake Scripting)",
    "description": "CONTINUE (or ITERATE) skips the rest of the statements in the iteration of a loop and starts the next iteration of\nthe loop.",
    "syntax": "{ CONTINUE | ITERATE } [ <label> ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "DECLARE\n  counter1 NUMBER(8, 0);\n  counter2 NUMBER(8, 0);\nBEGIN\n  counter1 := 0;\n  counter2 := 0;\n  WHILE (counter1 < 3) DO\n    counter1 := counter1 + 1;\n    CONTINUE;\n    counter2 := counter2 + 1;\n  END WHILE;\n  RETURN counter2;\nEND;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/close",
    "title": "CLOSE (Snowflake Scripting)",
    "description": "Closes the specified cursor.",
    "syntax": "CLOSE <cursor_name> ;",
    "examples": [
        {
            "title": "Examples",
            "code": "CLOSE my_cursor_name;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/case",
    "title": "CASE (Snowflake Scripting)",
    "description": "A CASE statement provides a way to specify multiple conditions.",
    "syntax": "CASE ( <expression_to_match> )\n    WHEN <expression> THEN\n        <statement>;\n        [ <statement>; ... ]\n    [ WHEN ... ]\n    [ ELSE\n        <statement>;\n        [ <statement>; ... ]\n    ]\nEND [ CASE ] ;\n\nCASE\n    WHEN <boolean_expression> THEN\n        <statement>;\n        [ <statement>; ... ]\n    [ WHEN ... ]\n    [ ELSE\n        <statement>;\n        [ <statement>; ... ]\n    ]\nEND [ CASE ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "CREATE PROCEDURE case_demo_01(v VARCHAR)\nRETURNS VARCHAR\nLANGUAGE SQL\nAS\n  BEGIN\n    CASE (v)\n      WHEN 'first choice' THEN\n        RETURN 'one';\n      WHEN 'second choice' THEN\n        RETURN 'two';\n      ELSE\n        RETURN 'unexpected choice';\n    END;\n  END;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/cancel",
    "title": "CANCEL (Snowflake Scripting)",
    "description": "Cancels an asynchronous child job\nthat is running for a RESULTSET.",
    "syntax": "CANCEL <result_set_name> ;",
    "examples": [
        {
            "title": "Examples",
            "code": "CANCEL my_result_set;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/break",
    "title": "BREAK (Snowflake Scripting)",
    "description": "BREAK (or EXIT) terminates a loop.",
    "syntax": "{ BREAK | EXIT } [ <label> ] ;",
    "examples": [
        {
            "title": "Examples",
            "code": "DECLARE\n  i INTEGER;\n  j INTEGER;\nBEGIN\n  i := 1;\n  j := 1;\n  WHILE (i <= 4) DO\n    WHILE (j <= 4) DO\n      -- Exit when j is 3, even if i is still 1.\n      IF (j = 3) THEN\n        BREAK outer_loop;\n      END IF;\n      j := j + 1;\n    END WHILE inner_loop;\n    i := i + 1;\n  END WHILE outer_loop;\n  -- Execution resumes here after the BREAK executes.\n  RETURN i;\nEND;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/begin",
    "title": "BEGIN … END (Snowflake Scripting)",
    "description": "BEGIN and END define a Snowflake Scripting block.",
    "syntax": "BEGIN\n    <statement>;\n    [ <statement>; ... ]\n[ EXCEPTION <exception_handler> ]\nEND;",
    "examples": [
        {
            "title": "Examples",
            "code": "EXECUTE IMMEDIATE $$\nBEGIN\n    CREATE TABLE parent (ID INTEGER);\n    CREATE TABLE child (ID INTEGER, parent_ID INTEGER);\n    RETURN 'Completed';\nEND;\n$$\n;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/sql-reference/snowflake-scripting/await",
    "title": "AWAIT (Snowflake Scripting)",
    "description": "Waits for all asynchronous child jobs\nthat are running to finish or for a specific asynchronous child job that is running for a\nRESULTSET to finish, then returns\nwhen the all jobs have finished or the specific job has finished, respectively.",
    "syntax": "AWAIT { ALL | <result_set_name> };",
    "examples": [
        {
            "title": "Examples",
            "code": "AWAIT ALL;"
        }
    ]
},
{
    "url": "https://docs.snowflake.com/en/developer-guide/snowflake-scripting/index",
    "title": "Snowflake Scripting Developer Guide",
    "description": "Topics in this section explain how to write a stored procedure in SQL by using Snowflake Scripting.\nSnowflake Scripting is an extension to Snowflake SQL that adds support for procedural logic. You can use Snowflake Scripting to\nwrite stored procedures and procedural code outside of a stored procedure. This guide\nexplains how to use Snowflake Scripting."
}
]